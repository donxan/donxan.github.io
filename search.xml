<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTML5基本介绍</title>
    <url>/posts/7334fb9a/</url>
    <content><![CDATA[<h2 id="一-网页固定格式"><a href="#一-网页固定格式" class="headerlink" title="一.网页固定格式"></a>一.网页固定格式</h2><h3 id="1-编写网页的步骤"><a href="#1-编写网页的步骤" class="headerlink" title="1.编写网页的步骤:"></a>1.编写网页的步骤:</h3><ul>
<li>新建一个文本文档</li>
<li>利用记事本打开</li>
<li>编写THML代码</li>
<li>保存并且修改纯文本文档的扩展名为.html</li>
<li>利用浏览器打开编写好的文件</li>
</ul>
<a id="more"></a>

<h2 id="一-网页固定格式-1"><a href="#一-网页固定格式-1" class="headerlink" title="一.网页固定格式"></a>一.网页固定格式</h2><h3 id="1-编写网页的步骤-1"><a href="#1-编写网页的步骤-1" class="headerlink" title="1.编写网页的步骤:"></a>1.编写网页的步骤:</h3><ul>
<li>新建一个文本文档</li>
<li>利用记事本打开</li>
<li>编写THML代码</li>
<li>保存并且修改纯文本文档的扩展名为.html</li>
<li>利用浏览器打开编写好的文件</li>
</ul>
<blockquote>
<p>一款强大的编辑软件  <a href="http://www.sdifen.com/?s=webstorm+&submit=搜索" target="_blank" rel="noopener">Webstorm</a>或者 <a href="http://www.pc6.com/mac/112553.html" target="_blank" rel="noopener">WebStorm</a></p>
</blockquote>
<h4 id="1-1-WebStorm常见快捷键"><a href="#1-1-WebStorm常见快捷键" class="headerlink" title="1.1 WebStorm常见快捷键"></a>1.1 WebStorm常见快捷键</h4><ul>
<li><p>如何在<code>WebStorm</code>中利用快捷键创建一个新的<code>.html</code>的文件</p>
<ul>
<li>同时按下键盘上的<code>Ctrl + Alt + Insert</code></li>
</ul>
</li>
<li><p>如何在<code>WebStorm</code>中让光标移动到当前行的末尾</p>
<ul>
<li>按下键盘上的<code>End</code>键即可</li>
</ul>
</li>
<li><p>如何在<code>WebStorm</code>中让光标移动到当前行的最前面</p>
<ul>
<li>按下键盘上的<code>Home</code>键即可</li>
</ul>
</li>
<li><p>如何在<code>WebStorm</code>中让光标在多行中闪烁</p>
<ul>
<li>按住键盘上的Alt键不放, 然后再按住鼠标的左键不放, 然后再拖动鼠标即可</li>
</ul>
</li>
<li><p>如何在<code>WebStorm</code>中快速的复制光标所在的那一行</p>
<ul>
<li>按下键盘上的<code>Ctrl + D</code></li>
</ul>
</li>
<li><p>如何在<code>WebStorm</code>中快速的删除光标所在的那一行</p>
<ul>
<li>按下键盘上的<code>Ctrl + X</code></li>
</ul>
</li>
<li><p>如何在<code>WebStorm</code>中让标签包裹一段内容, 也就是自动在一段内容前后加上标签</p>
<ul>
<li>按下键盘上的<code>Ctrl + Alt + T</code>, 然后按下回车, 然后输入对应的标签即可</li>
</ul>
</li>
</ul>
<h3 id="2-网页基本结构"><a href="#2-网页基本结构" class="headerlink" title="2.网页基本结构"></a>2.网页基本结构</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;音视频测试&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>通过观察我们发现, HTML基本结构中所有的标签都是成对出现的, 这些成对出现的标签中有一个带/有一个不带/, 那么这些不带/的标签我们称之为开始标签, 这些带/的我们称之为结束标签</li>
</ul>
<h2 id="二-网页标签"><a href="#二-网页标签" class="headerlink" title="二.网页标签"></a>二.网页标签</h2><h3 id="1-HTML标签"><a href="#1-HTML标签" class="headerlink" title="1.HTML标签"></a>1.HTML标签</h3><ul>
<li>作用: 用于告诉浏览器这是一个网页, 也就是说告诉浏览器我是一个HTML文档<blockquote>
<p>注意点: 其它所有的标签都必须写在html标签里面, 也就是写在html开始标签和结束标签中间</p>
</blockquote>
</li>
</ul>
<h3 id="2-head标签"><a href="#2-head标签" class="headerlink" title="2.head标签"></a>2.head标签</h3><ul>
<li>作用:<br>用于给网站添加一些配置信息</li>
<li>例如:<ul>
<li>指定网站的标题 / 指定网站的小图片</li>
<li>添加网站的SEO相关的信息(指定网站的关键字/指定网站的描述信息)</li>
<li>外挂一些外部的css/js文件</li>
<li>添加一些浏览器适配相关的内容<blockquote>
<p>注意点:<br>一般情况下, 写在head标签内部的内容都不会显示给用户查看, 也就是说一般情况下写在head标签内部的内容我们都看不到</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="3-title标签"><a href="#3-title标签" class="headerlink" title="3.title标签"></a>3.title标签</h3><ul>
<li>作用:<br>专门用于指定网站的标题, 并且这个指定的标题将来还会作为用户保存网站的默认标题<blockquote>
<p>注意点:<br>title标签必须写在head标签里面</p>
</blockquote>
</li>
</ul>
<h3 id="4-body标签"><a href="#4-body标签" class="headerlink" title="4.body标签"></a>4.body标签</h3><ul>
<li>作用:<br>专门用于定义HTML文档中需要显示给用户查看的内容(文字/图片/音频/视频)<blockquote>
<p>注意点:<br>虽然说有时候你可能将内容写到了别的地方在网页中也能看到, 但是千万不要这么干, 一定要将需要显示的内容写在body中<br>一对html标签中(一个html开始标签和一个html结束标签)只能有一对body标签</p>
</blockquote>
</li>
</ul>
<h3 id="5-meta标签"><a href="#5-meta标签" class="headerlink" title="5.meta标签"></a>5.meta标签</h3><ul>
<li>作用 : 在编写网页的时候指定字符集,可避免出现乱码现象</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br></pre></td></tr></table></figure>

<h4 id="GBK-GB2312-和UTF-8区别"><a href="#GBK-GB2312-和UTF-8区别" class="headerlink" title="GBK(GB2312)和UTF-8区别"></a>GBK(GB2312)和UTF-8区别</h4><ul>
<li>GBK(GB2312)里面存储的字符比较少, 仅仅存储了汉字和一些常用外文<br>体积比较小</li>
<li>UTF-8里面存储的世界上所有的文字,提交比较大<blockquote>
<h4 id="个人推荐-所有一律都写UTF-8"><a href="#个人推荐-所有一律都写UTF-8" class="headerlink" title="个人推荐:所有一律都写UTF-8"></a>个人推荐:所有一律都写UTF-8</h4></blockquote>
</li>
</ul>
<h2 id="3-HTML标签分类"><a href="#3-HTML标签分类" class="headerlink" title="3.HTML标签分类"></a>3.HTML标签分类</h2><h3 id="1-单标签"><a href="#1-单标签" class="headerlink" title="1.单标签"></a>1.单标签</h3><ul>
<li>只有开始标签没有结束标签, 也就是由一个&lt;&gt;组成的</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span> /&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-双标签"><a href="#2-双标签" class="headerlink" title="2.双标签"></a>2.双标签</h3><p> 有开始标签和结束标签, 也就是由一个&lt;&gt;和一个&lt;/&gt;组成的</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="4-HTML标签关系分类"><a href="#4-HTML标签关系分类" class="headerlink" title="4.HTML标签关系分类"></a>4.HTML标签关系分类</h2><h3 id="1-并列关系-兄弟-平级"><a href="#1-并列关系-兄弟-平级" class="headerlink" title="1.并列关系(兄弟/平级)"></a>1.并列关系(兄弟/平级)</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-嵌套关系-父子-上下级"><a href="#2-嵌套关系-父子-上下级" class="headerlink" title="2.嵌套关系(父子/上下级)"></a>2.嵌套关系(父子/上下级)</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">      &lt;meta charset=<span class="string">"UTF-8"</span> /&gt;</span><br><span class="line">      &lt;title&gt;音视频测试&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><h3 id="对HTML5语言有兴趣的同学-给大家极力推荐-江哥的视频HTML5-跨平台开发-只是不知道会不会继续更新"><a href="#对HTML5语言有兴趣的同学-给大家极力推荐-江哥的视频HTML5-跨平台开发-只是不知道会不会继续更新" class="headerlink" title="对HTML5语言有兴趣的同学,给大家极力推荐:江哥的视频HTML5 + 跨平台开发,只是不知道会不会继续更新"></a>对HTML5语言有兴趣的同学,给大家极力推荐:江哥的视频<a href="http://study.163.com/course/introduction.htm?courseId=1003864040" target="_blank" rel="noopener">HTML5 + 跨平台开发</a>,只是不知道会不会继续更新</h3></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>HTML5标签</tag>
        <tag>CSS</tag>
        <tag>WebStorm</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5学习笔记之表格标签</title>
    <url>/posts/9483b8e/</url>
    <content><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/647982-151e7c132c68a833.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<a id="more"></a>


<h3 id="作用"><a href="#作用" class="headerlink" title="作用:"></a>作用:</h3><ul>
<li>以表格形式将数据显示出来, 当数据量非常大的时候, 表格这种展现形式被认为是最为清晰的一种展现形式</li>
</ul>
<h3 id="格式"><a href="#格式" class="headerlink" title="格式:"></a>格式:</h3><ul>
<li>table定义表格</li>
<li>tr定义行</li>
<li>td定义单元格</li>
</ul>
<h3 id="表格中的属性"><a href="#表格中的属性" class="headerlink" title="表格中的属性"></a>表格中的属性</h3><ul>
<li><code>border</code>: 默认情况下表格的边框宽度为0看不到, 通过border属性给表格指定边框宽度</li>
<li><code>width</code>: 默认情况下表格的宽度是由内容自动计算出来的, 可以通过width属性指定表格的宽度</li>
<li><code>height</code>:默认情况下表格的高度是由内容自动计算出来的, 可以通过height属性指定表格的高度</li>
<li><code>cellspacing</code>: 外边距. 默认情况下单元格之间有2个像素的间隙, 可以通过cellpadding指定表格之间的间隙</li>
<li><code>cellpadding</code>: 内边距. 默认情况下单元格边缘距离内容有1个像素的内边距, 可以通过cellpadding属性指定单元格边缘和内容之间的内边距</li>
<li><code>align</code>: 规定表格相对周围元素的对齐方式, 它的取值有center、left、right<ul>
<li>给table设置align属性, 是让表格在浏览器中居左/居右/居中</li>
<li>给tr设置align属性, 是让当前行中所有内容居左/居右/居中</li>
<li>给td设置align属性,是让当前单元格中所有内容居左/居右/居中</li>
<li>该属性仅仅作为了解, 企业开发中用css代替, 因为HTML仅仅用于说明语义</li>
<li>如果td中设置了align属性, tr中也设置了align属性, 那么单元格中的内容会按照td中设置的来对齐</li>
</ul>
</li>
<li><code>valign</code>: 规定表格相对周围元素的对齐方式, 它的取值有center、left、right<ul>
<li>给table设置valign属性, 无效<br>给tr设置valign属性, 是让当前行中所有内容居上/居中/居下</li>
<li>给td设置valign属性,是让当前单元格中所有内容居上/居中/居下</li>
<li>如果td中设置了valign属性, tr中也设置了valign属性, 那么单元格中的内容会按照td中设置的来对齐</li>
</ul>
</li>
<li><code>bgcolor</code>:规定表格的背景颜色<ul>
<li>给table设置bgcolor属性, 是给整个表格设置背景颜色</li>
<li>给tr设置bgcolor属性, 是给当前行设置背景颜色</li>
<li>给td设置bgcolor属性, 是给当前单元格设置背景颜色</li>
<li>该属性仅仅作为了解, 企业开发中用css代替, 因为HTML仅仅用于说明语义</li>
</ul>
</li>
</ul>
<h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--表格标签--&gt;</span><br><span class="line">&lt;!--先定义一个表格, 然后通过tr告诉浏览器这个表格中一共有多少行, 然后再通过td告诉浏览器这一行中一共有多少个元素(一共有多少列)--&gt;</span><br><span class="line">&lt;table border=<span class="string">"1"</span> width=<span class="string">"500"</span> cellpadding=<span class="string">"5"</span> cellspacing=<span class="string">"10"</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>

<h4 id="展示样式"><a href="#展示样式" class="headerlink" title="展示样式"></a>展示样式</h4><p><img src="http://upload-images.jianshu.io/upload_images/4122543-cac6e5756352e691.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20170614_17.png"></p>
<h3 id="表格中的其它标签"><a href="#表格中的其它标签" class="headerlink" title="表格中的其它标签"></a>表格中的其它标签</h3><ul>
<li>表单中有两种类型的单元格, 一种是标准单元格td, 一种是表头单元格th</li>
<li>th标签: 给每一列设置标题, 单元格中的内容会自动加粗，居中</li>
<li>caption标签:给整个表格设置标题<ul>
<li>一定要嵌套在talbe标签内部才有效</li>
</ul>
</li>
</ul>
<h4 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;table bgcolor=<span class="string">"#5f9ea0"</span> cellspacing=<span class="string">"1px"</span> width=<span class="string">"1000"</span> align=<span class="string">"center"</span>&gt;</span><br><span class="line">    &lt;caption&gt;</span><br><span class="line">        &lt;h2&gt;这周代码量排行榜&lt;/h2&gt;</span><br><span class="line">    &lt;/caption&gt;</span><br><span class="line">    &lt;tr bgcolor=<span class="string">"#8a2be2"</span>&gt;</span><br><span class="line">        &lt;th&gt;排名&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;关键词&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;趋势&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;今日搜索&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;最近一天&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;最近一天相关链接&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr bgcolor=<span class="string">"#f0ffff"</span> align=<span class="string">"center"</span>&gt;</span><br><span class="line">        &lt;td&gt;1&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;穷爸爸富爸爸&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;上涨&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;456&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;234214&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;</span><br><span class="line">            &lt;a href="#"&gt;贴吧&lt;/a&gt;</span><br><span class="line">            &lt;a href="#"&gt;百度&lt;/a&gt;</span><br><span class="line">            &lt;a href="#"&gt;杭州&lt;/a&gt;</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr bgcolor=<span class="string">"#f0ffff"</span> align=<span class="string">"center"</span>&gt;</span><br><span class="line">        &lt;td&gt;2&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;穷爸爸富爸爸&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;上涨&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;234&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;3423542&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;</span><br><span class="line">            &lt;a href="#"&gt;贴吧&lt;/a&gt;</span><br><span class="line">            &lt;a href="#"&gt;百度&lt;/a&gt;</span><br><span class="line">            &lt;a href="#"&gt;杭州&lt;/a&gt;</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br></pre></td></tr></table></figure>

<h4 id="展示样式-1"><a href="#展示样式-1" class="headerlink" title="展示样式"></a>展示样式</h4><p><img src="http://upload-images.jianshu.io/upload_images/4122543-70f5e09e43e7df60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20170615_19.png"></p>
<h3 id="表格的结构"><a href="#表格的结构" class="headerlink" title="表格的结构"></a>表格的结构</h3><ul>
<li>thead标签:用来存放当前列的表头, 如果没有加css页面默认将表头中的高度设置变小</li>
<li>tbody标签:一般用来存放页面中的主体数据, 如果不写会自动加上</li>
<li>tfoot标签:用来存放表格的页脚（脚注或表注), 如果没有加css页面默认将表头中的高度设置变小, 一般不会出现</li>
</ul>
<h4 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;table bgcolor=<span class="string">"#7fffd4"</span> width=<span class="string">"800"</span> cellspacing=<span class="string">"2"</span> align=<span class="string">"center"</span>&gt;</span><br><span class="line">    &lt;caption&gt;我是表格标题&lt;/caption&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">    &lt;tr align=<span class="string">"center"</span>&gt;</span><br><span class="line">        &lt;th&gt;每一列的标题&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;每一列的标题&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;每一列的标题&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;每一列的标题&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;每一列的标题&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">    &lt;tr align=<span class="string">"center"</span>&gt;</span><br><span class="line">        &lt;td&gt;数据&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;数据&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;数据&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;数据&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;数据&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">    &lt;tfoot&gt;</span><br><span class="line">    &lt;tr align=<span class="string">"center"</span>&gt;</span><br><span class="line">        &lt;td&gt;数据&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;数据&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;数据&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;数据&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;数据&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/tfoot&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>

<h4 id="展示样式-2"><a href="#展示样式-2" class="headerlink" title="展示样式"></a>展示样式</h4><p><img src="http://upload-images.jianshu.io/upload_images/4122543-00a3d46f21a7cce7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20170615_20.png"></p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>表格结构的意义主要是用于SEO, 便于搜索引擎指定哪部分的内容是需要抓取的重要内容, 一般情况下搜索引擎会优先抓取tbody中的内容</li>
<li>由于有一部分浏览器对talbe的这种结构支持不是很好, 所以在企业开发中一般都不用严格的按照这种结构来编写</li>
</ul>
<blockquote>
<p>对HTML5语言有兴趣的同学,给大家极力推荐:江哥的视频<a href="http://study.163.com/course/introduction.htm?courseId=1003864040" target="_blank" rel="noopener">HTML5 + 跨平台开发</a>,只是不知道会不会继续更新</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>HTML5标签</tag>
        <tag>CSS</tag>
        <tag>WebStorm</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5学习笔记之音视频标签</title>
    <url>/posts/d95c95af/</url>
    <content><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/647982-0d0c0be17835a633.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<a id="more"></a>


<h2 id="video标签"><a href="#video标签" class="headerlink" title="video标签"></a>video标签</h2><h3 id="作用-播放视频"><a href="#作用-播放视频" class="headerlink" title="作用: 播放视频"></a>作用: 播放视频</h3><h3 id="video标签格式1"><a href="#video标签格式1" class="headerlink" title="video标签格式1:"></a>video标签格式1:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="video标签的属性"><a href="#video标签的属性" class="headerlink" title="video标签的属性"></a>video标签的属性</h4><ul>
<li>src: 告诉video标签需要播放的视频地址</li>
<li>autoplay: 告诉video标签是否需要自动播放视频</li>
<li>controls:告诉video标签是否需要显示控制条</li>
<li>poster: 告诉video标签视频没有播放之前显示的占位图片</li>
<li>loop: 告诉video标签循环播放视频. 一般用于做广告视频</li>
<li>preload: 告诉video标签预加载视频, 但是需要注意preload和autoplay相冲, 如果设置了autoplay属性, 那么preload属性就会失效</li>
<li>muted:告诉video标签视频静音</li>
<li>width/height: 和img标签中的一模一样</li>
</ul>
<h3 id="video标签格式2"><a href="#video标签格式2" class="headerlink" title="video标签格式2"></a>video标签格式2</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">type</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">type</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>第二种格式存在的意义<ul>
<li>由于视频数据非常非常的重要, 所以五大浏览器厂商都不愿意支持别人的视频格式, 所以导致了没有一种视频格式是所有浏览器都支持的这个时候W3C为了解决这个问题, 所以推出了第二个video标签的格式</li>
<li>video标签的第二种格式存在的意义就是为了解决浏览器适配问题. video 元素支持三种视频格式, 我们可以把这三种格式都通过source标签指定给video标签, 那么以后当浏览器播放视频时它就会从这三种中选择一种自己支持的格式来播放</li>
</ul>
</li>
<li>注意点:<ul>
<li>当前通过video标签的第二种格式虽然能够指定所有浏览器都支持的视频格式, 但是想让所有浏览器都通过video标签播放视频还有一个前提条件, 就是浏览器必须支持HTML5标签, 否则同样无法播放</li>
<li>在过去的一些浏览器是不支持HTML5标签的, 所以为了让过去的一些浏览器也能够通过video标签来播放视频, 那么我们以后可以通过一个JS的框架叫做html5media来实现</li>
</ul>
</li>
</ul>
<h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;video width=<span class="string">"200"</span> height=<span class="string">"100"</span> poster=<span class="string">"http://www.youname.com/images/first.png"</span> autoplay=<span class="string">"autoplay"</span> preload=<span class="string">"none"</span> controls=<span class="string">"controls"</span>&gt;</span><br><span class="line">    &lt;!--楚乔传,好像是第<span class="number">4</span>集--&gt;</span><br><span class="line">    &lt;source src=<span class="string">"https://v.qq.com/x/cover/dhzimk1qzznf301/t0024jjys1q.html?ptag=baidu.aladdin.tv"</span> &gt;</span><br><span class="line">    &lt;source src=<span class="string">"http://www.youname.com/images/first.ogg"</span> /&gt;</span><br><span class="line">&lt;/video&gt;</span><br></pre></td></tr></table></figure>


<h2 id="audio标签"><a href="#audio标签" class="headerlink" title="audio标签"></a>audio标签</h2><ul>
<li>作用: 播放音频</li>
<li>注意点:<ul>
<li>audio标签的使用和video标签的使用基本一样</li>
<li>video中能够使用的属性在audio标签中大部分都能够使用, 并且功能都一样</li>
<li>只不过有3个属性不能用,<code>height/width/poster</code></li>
</ul>
</li>
<li>格式:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">type</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="三-详情和概要标签"><a href="#三-详情和概要标签" class="headerlink" title="三.详情和概要标签"></a>三.详情和概要标签</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用:"></a>作用:</h3><ul>
<li>利用summary标签来描述概要信息, 利用details标签来描述详情信息</li>
<li>默认情况下是折叠展示, 想看见详情必须点击</li>
</ul>
<h3 id="格式"><a href="#格式" class="headerlink" title="格式:"></a>格式:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">summary</span>&gt;</span>概要信息<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">    详情信息</span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--详情和概要标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">summary</span>&gt;</span>概要信息<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">    这里是详情: 是假的呢举案说法南石道街开发病那都是独守空房技能速度加快非农数据的看法山东矿机第三方看似简单妇女节看电视呢房间看电视开始的减肥纳斯达克今年初vdsfw的看法今年圣诞节开放男</span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/4122543-3bd310e521eed10e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20170615_9.png"></p>
<h2 id="marquee标签"><a href="#marquee标签" class="headerlink" title="marquee标签"></a>marquee标签</h2><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用:"></a>作用:</h3><p>跑马灯效果</p>
<h3 id="格式-1"><a href="#格式-1" class="headerlink" title="格式:"></a>格式:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">marquee</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="属性"><a href="#属性" class="headerlink" title="属性:"></a>属性:</h3><ul>
<li>direction: 设置滚动方向 left/right/up/down</li>
<li>scrollamount: 设置滚动速度, 值越大就越快</li>
<li>loop: 设置滚动次数, 默认是-1, 也就是无限滚动</li>
<li>behavior: 设置滚动类型 slide滚动到边界就停止, alternate滚动到边界就弹回</li>
</ul>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点:"></a>注意点:</h3><blockquote>
<p>marquee标签不是W3C推荐的标签, 在W3C官方文档中也无法查询这个标签, 但是各大浏览器对这个标签的支持非常好</p>
</blockquote>
<h3 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--跑马灯-marquee标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">direction</span>=<span class="string">"left"</span> <span class="attr">scrollamount</span>=<span class="string">"5"</span>&gt;</span>跑马灯<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">direction</span>=<span class="string">"right"</span> <span class="attr">scrollamount</span>=<span class="string">"3"</span>&gt;</span>marquee<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">direction</span>=<span class="string">"up"</span> <span class="attr">scrollamount</span>=<span class="string">"1"</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">direction</span>=<span class="string">"down"</span> <span class="attr">scrollamount</span>=<span class="string">"1"</span>&gt;</span>down<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/4122543-6bc10b374b5e362e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20170615_10.png"></p>
<blockquote>
<p>注: 实际的效果中,这三个是一直在滚动的,只是图片看不到效果,自己亲自实践感受下吧!</p>
</blockquote>
<h2 id="HTML中被废弃的标签"><a href="#HTML中被废弃的标签" class="headerlink" title="HTML中被废弃的标签"></a>HTML中被废弃的标签</h2><blockquote>
<p>由于HTML现在只负责语义而不负责样式.但是HTML一开始有一部分标签连样式也包揽了, 所以这部分标签都被废弃了</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">b、u、i、s </span><br><span class="line">- 以上标签自己带有样式, 有浓厚的样式作用, 今后一般都只作为CSS钩子使用</span><br><span class="line">- 原则: 不到万不得已,切记不要使用如上标签. 大家可以到BAT的网站查看源代码, 几乎看不到以上标签</span><br></pre></td></tr></table></figure>

<ul>
<li>b(Bold)作用: 将文本字体加粗<ul>
<li>格式:<code>&lt;b&gt;将文本字体加粗&lt;/b&gt;</code></li>
</ul>
</li>
<li>u(Underlined)作用: 为文本添加下划线<ul>
<li>格式: <code>&lt;u&gt;为文本添加下划线&lt;/u&gt;</code></li>
</ul>
</li>
<li>i(Italic)作用: 显示斜体文本效果<ul>
<li>格式: <code>&lt;i&gt;显示斜体文本效果&lt;/i&gt;</code></li>
</ul>
</li>
<li>s(Strikethrough)作用: 为文本添加删除线<ul>
<li>格式: <code>&lt;s&gt;为文本添加删除线&lt;/s&gt;</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>为了弥补 b、u、i、s标签的不足, W3C又推出了一组新的标签, 这些标签在显示上看似和buis没什么区别, 但是在语义上却有重大区别</p>
</blockquote>
<ul>
<li>strong作用: 着重内容<ul>
<li>格式:<code>&lt;strong&gt;着重内容&lt;/strong&gt;</code></li>
</ul>
</li>
<li>ins(Inserted)作用: 新插入的文本<ul>
<li>格式:<code>&lt;ins&gt;新插入的文本&lt;/ins&gt;</code></li>
</ul>
</li>
<li>em(Emphasized)作用:强调内容<ul>
<li>格式:<code>&lt;em&gt;强调内容&lt;/em&gt;</code></li>
</ul>
</li>
<li>del(Deleted)作用: 已删除的文本<ul>
<li>格式:<code>&lt;del&gt;已删除的文本&lt;/del&gt;</code></li>
</ul>
</li>
</ul>
<p> 示例代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--新增标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>着重内容<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>新插入的内容<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>强调的内容<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>已经删除的内容<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/4122543-595238b7fcc8c71f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20170615_11.png"></p>
<blockquote>
<p>对HTML5语言有兴趣的同学,给大家极力推荐:江哥的视频<a href="http://study.163.com/course/introduction.htm?courseId=1003864040" target="_blank" rel="noopener">HTML5 + 跨平台开发</a>,只是不知道会不会继续更新</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>HTML5标签</tag>
        <tag>CSS</tag>
        <tag>WebStorm</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客不蒜子统计不显示</title>
    <url>/posts/641ca9b6/</url>
    <content><![CDATA[<ul>
<li>10月份开始引用不蒜子作为静态网站的博客的统计功能都无法显示了, 刚开始还以为是自己的博客修改了什么文件所致, 随之查看了好多其他博客, 发现好多类似的网站统计都不显示了</li>
</ul>
<a id="more"></a>



<ul>
<li>随后上<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子的官网</a>看了一下，才知道，原来不蒜子的域名更改了，导致<code>script</code>引用不了，从而无法进行统计</li>
<li>下面是不蒜子官网的公告</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">！！！！2018年9月 - 重要提示 ！！！！</span><br><span class="line">大家好，因七牛强制过期原有的『dn-lbstatics.qbox.me』域名（预计2018年10月初），与客服沟通数次无果，即使我提出为此付费也不行，只能更换域名到『busuanzi.ibruce.info』！因我是最早的一批七牛用户，为七牛至少带来了数百个邀请用户，很痛心，很无奈！</span><br><span class="line">各位继续使用不蒜子提供的服务，只需把原有的：</span><br></pre></td></tr></table></figure>

<script async src="//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"></script>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">域名改一下即可：</span><br></pre></td></tr></table></figure>

<script async src="//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"></script>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">只需要修改该js域名，其他均未改变。若有疑问，可以加入不蒜子交流QQ群：`419260983`，对您带来的不便，非常抱歉！！！还是那句话，不蒜子不会中断服务！！！！</span><br></pre></td></tr></table></figure>

<p>所以想要继续使用不蒜子功能，只需修改对应的不蒜子域名即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;note success&quot;&gt;&lt;p&gt;所需修改文件地址&lt;/p&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">…/next/layout/_third-party/analytics/busuanzi-counter.swig</span><br></pre></td></tr></table></figure>

<p>原代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改后代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>我的博客: <a href="https://blog.iuops.com/">https://blog.iuops.com/</a></p>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>busuanzi</tag>
        <tag>不蒜子</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客多台电脑设备同步管理</title>
    <url>/posts/3ac2f657/</url>
    <content><![CDATA[<ul>
<li>最近一直在折腾Hexo博客, 玩的可谓是不亦乐乎啊; 这里就整理一下之前遗留的一些问题和一些个性化配置</li>
<li>如有遇到搭建个人博客时遇到的问题, 这里可参考我的之前的两篇相关博客<ul>
<li><a href="https://www.titanjun.top/2018/03/08/%E5%9F%BA%E4%BA%8EGitHub%E5%92%8CHexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">基于GitHub和Hexo搭建个人博客</a></li>
<li><a href="https://www.titanjun.top/2018/04/03/NexT%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/" target="_blank" rel="noopener">NexT主题配置个性化设置</a></li>
</ul>
</li>
</ul>
<a id="more"></a>

<h2 id="个性化配置"><a href="#个性化配置" class="headerlink" title="个性化配置"></a>个性化配置</h2><h3 id="返回顶部按钮显示滚动进度"><a href="#返回顶部按钮显示滚动进度" class="headerlink" title="返回顶部按钮显示滚动进度"></a>返回顶部按钮显示滚动进度</h3><ul>
<li>打开主题配置文件 <code>~themes/next/_config.yml</code> 找到<code>sidebar</code>字段</li>
<li>把<code>scrollpercent</code>的属性改为<code>true</code>即可, 如下:</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">sidebar:</span><br><span class="line"># Sidebar Position - 侧栏位置（只对Pisces | Gemini两种风格有效）</span><br><span class="line">  position: left        <span class="comment">//靠左放置</span></span><br><span class="line">  <span class="meta">#position: right      <span class="comment">//靠右放置</span></span></span><br><span class="line"></span><br><span class="line"># Sidebar Display - 侧栏显示时机（只对Muse | Mist两种风格有效）</span><br><span class="line">  <span class="meta">#display: post        <span class="comment">//默认行为，在文章页面（拥有目录列表）时显示</span></span></span><br><span class="line">  display: always       <span class="comment">//在所有页面中都显示</span></span><br><span class="line">  <span class="meta">#display: hide        <span class="comment">//在所有页面中都隐藏（可以手动展开）</span></span></span><br><span class="line">  <span class="meta">#display: remove      <span class="comment">//完全移除</span></span></span><br><span class="line"></span><br><span class="line">  offset: <span class="number">12</span>            <span class="comment">//文章间距（只对Pisces | Gemini两种风格有效）</span></span><br><span class="line"></span><br><span class="line">  b2t: <span class="literal">false</span>            <span class="comment">//返回顶部按钮（只对Pisces | Gemini两种风格有效）</span></span><br><span class="line"></span><br><span class="line">  scrollpercent: <span class="literal">true</span>   <span class="comment">//返回顶部按钮的百分比</span></span><br></pre></td></tr></table></figure>

<h2 id="多设备管理博客"><a href="#多设备管理博客" class="headerlink" title="多设备管理博客"></a>多设备管理博客</h2><p>正常情况下, 我们博客的相关配置信息都是在本地的, 并未上传服务器, 这样当我们想在其他设备, 比如公司的电脑或者原电脑重装了系统, 那么我们便无法再维护我们的博客了</p>
<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ul>
<li>首先你需要在电脑上配置相关环境<ul>
<li>安装<code>Node.js</code></li>
<li>安装<code>git</code></li>
<li>安装<code>hexo</code></li>
</ul>
</li>
<li>具体安装方式, 可参考这里<a href="https://www.titanjun.top/2018/03/08/%E5%9F%BA%E4%BA%8EGitHub%E5%92%8CHexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">基于GitHub和Hexo搭建个人博客</a></li>
</ul>
<h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><ul>
<li><code>hexo</code>生成的静态博客文件都是上传到<code>GitHub</code>上的, 且默认放在<code>master</code>分支上, 而一些相关的配置文件都在本地</li>
<li><code>hexo</code>的源文件（部署环境文件）可以都放在<code>hexo</code>分支上（可以新创建一个<code>hexo</code>分支），换新电脑时，直接<code>git clone hexo</code>分支</li>
</ul>
<h4 id="对username-github-io仓库新建hexo分支"><a href="#对username-github-io仓库新建hexo分支" class="headerlink" title="对username.github.io仓库新建hexo分支"></a>对<code>username.github.io</code>仓库新建<code>hexo</code>分支</h4><p>在<code>Github</code>的<code>username.github.io</code>仓库上新建一个<code>hexo</code>(分支名字可自定义)分支, 在下图箭头位置输入分支名字,回车即可创建成功</p>
<p><img src="https://upload-images.jianshu.io/upload_images/4122543-a8884eab55430542.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" alt="GitHub新建分支.png"></p>
<h4 id="设置默认分支"><a href="#设置默认分支" class="headerlink" title="设置默认分支"></a>设置默认分支</h4><p>切换到该<code>hexo</code>分支，并在该仓库<code>-&gt;Settings-&gt;Branches-&gt;Default branch</code>中将默认分支设为<code>hexo</code>，<code>save</code>保存</p>
<p><img src="https://upload-images.jianshu.io/upload_images/4122543-61af6e01e50d7837.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" alt="Snip20180412_1.png"></p>
<h3 id="配置文件上传导Github"><a href="#配置文件上传导Github" class="headerlink" title="配置文件上传导Github"></a>配置文件上传导<code>Github</code></h3><p>该步骤需要在搭建博客的电脑上操作(博客配置文件和主题配置文件所在的电脑上操作)</p>
<h4 id="克隆hexo分支"><a href="#克隆hexo分支" class="headerlink" title="克隆hexo分支"></a>克隆<code>hexo</code>分支</h4><ul>
<li>将上述新建的<code>hexo</code>分支克隆到本地, 在终端中<code>cd</code>进入该<code>username.github.io</code>文件目录</li>
<li>在当前目录使用<code>Git Bash</code>执行<code>git branch</code>命令查看当前所在分支，应为新建的分支<code>hexo</code></li>
<li>如果用<code>Sourcetree</code>软件管理代码的话, 克隆到本地的项目可能没有<code>username.github.io</code>层级, 所有文件都在根目录下, 操作上都不影响, 只需要记住操作要在文件的根目录下即可</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">*hexo</span><br></pre></td></tr></table></figure>

<h4 id="上传部署文件"><a href="#上传部署文件" class="headerlink" title="上传部署文件"></a>上传部署文件</h4><ul>
<li>先将本地博客的部署文件（<code>Hexo</code>目录下的全部文件）全部拷贝进<code>username.github.io</code>文件目录中去</li>
<li>然后安装要用到的一些插件, 有的可能不需要, 但都安装了貌似没有任何影响</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-category --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br><span class="line">npm install hexo-server --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-deployer-heroku --save</span><br><span class="line">npm install hexo-deployer-rsync --save</span><br><span class="line">npm install hexo-deployer-openshift --save</span><br><span class="line">npm install hexo-renderer-marked@<span class="number">0.2</span> --save</span><br><span class="line">npm install hexo-renderer-stylus@<span class="number">0.2</span> --save</span><br><span class="line">npm install hexo-generator-feed@<span class="number">1</span> --save</span><br><span class="line">npm install hexo-generator-sitemap@<span class="number">1</span> --save</span><br><span class="line">npm install hexo-generator-search --save</span><br><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<ul>
<li>最后就是讲所有的文件都提交到<code>hexo</code>分支</li>
<li>提交时考虑以下注意事项<ul>
<li>将themes目录以内中的主题的.git目录删除（如果有），因为一个git仓库中不能包含另一个git仓库，否则提交主题文件夹会失败</li>
<li>后期需要更新主题时在另一个地方<code>git clone</code>下来该主题的最新版本，然后将内容拷到当前主题目录即可</li>
</ul>
</li>
<li>最后用终端或者管理工具将所有文件提交到<code>hexo</code>分支 <blockquote>
<p><code>master</code>分支和<code>hexo</code>分支各自保存着一个版本，<code>master</code>分支用于保存博客静态资源，提供博客页面供人访问；<code>hexo</code>分支用于备份博客部署文件，供自己维护更新，两者在一个<code>GitHub</code>仓库内也不会有任何冲突  </p>
</blockquote>
</li>
</ul>
<h3 id="同步到其他电脑"><a href="#同步到其他电脑" class="headerlink" title="同步到其他电脑"></a>同步到其他电脑</h3><ul>
<li>将新电脑的生成的<code>ssh key</code>添加到<code>GitHub</code>账户上<ul>
<li><code>ssh key</code>的配置方式可参考<a href="https://www.titanjun.top/2018/03/08/%E5%9F%BA%E4%BA%8EGitHub%E5%92%8CHexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">基于GitHub和Hexo搭建个人博客</a></li>
</ul>
</li>
<li>在新电脑上克隆<code>username.github.io</code>仓库的<code>hexo</code>分支到本地，此时本地<code>git</code>仓库处于<code>hexo</code>分支</li>
<li>切换到<code>username.github.io</code>目录，执行<code>npm install</code>(由于仓库有一个<code>.gitignore</code>文件，里面默认是忽略掉 <code>node_modules</code>文件夹的，也就是说仓库的<code>hexo</code>分支并没有存储该目录，所以需要<code>install</code>下)<ul>
<li>如果<code>node_modules</code>文件没有丢失, 可不执行该操作</li>
</ul>
</li>
<li>到这里了就可以开始在自己的电脑上写博客了！</li>
<li>需要注意的是每次更新博客之后, 都要把相关修改上传到<code>hexo</code>分支</li>
<li>每次换电脑更新博客的时候, 在修改之前最好也要<code>git pull</code>拉取一下最新的更新</li>
</ul>
<blockquote>
<p>说到这里所有的相关问题基本也都解决了</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>多设备</tag>
        <tag>同步管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac破解版软件大全</title>
    <url>/posts/90cf2451/</url>
    <content><![CDATA[<blockquote>
<p>转自<a href="http://www.sdifenzhou.com/page/6/" target="_blank" rel="noopener">史蒂芬周的博客</a></p>
</blockquote>
<blockquote>
<p>转自<a href="http://www.pc6.com/mac/soft/" target="_blank" rel="noopener">苹果网 PC6 </a></p>
</blockquote>
<a id="more"></a>

]]></content>
      <tags>
        <tag>Mac 工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中常用的模块</title>
    <url>/posts/85d9cd1f/</url>
    <content><![CDATA[<ul>
<li>上一篇文章中记录了<a href="https://www.titanjun.top/2018/05/31/Python中模块的使用/" target="_blank" rel="noopener">Python中模块的使用</a>, 这里就是记录一些常用的模块</li>
<li>最近学习中发现, 之前接触的模块好多却都忘记了怎么使用</li>
<li>这里就简单总结一下<code>os</code>, <code>random</code>等模块的使用吧</li>
<li><a href="https://github.com/CoderTitan/PythonDemo" target="_blank" rel="noopener">GitHub代码示例目地址</a></li>
</ul>
<a id="more"></a>


<h2 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a><code>os</code>模块</h2><p> <code>os</code>模块简单的来说它是一个<code>Python</code>的系统编程的操作模块，可以处理文件和目录, 这些我们日常手动需要做的操作</p>
<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 获取操作系统的类型</span></span><br><span class="line">print(os.name)</span><br><span class="line"><span class="comment"># 输出: posix</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''操作系统的类型</span></span><br><span class="line"><span class="string">nt -&gt; windows</span></span><br><span class="line"><span class="string">posix -&gt; Linux/Unix</span></span><br><span class="line"><span class="string">OS -&gt; Mac(内核是Linux)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 输出操作系统详细的信息</span></span><br><span class="line">print(os.uname())</span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment"># posix.uname_result(sysname='Darwin', nodename='xxx.local', release='17.5.0', version='Darwin Kernel Version 17.5.0: Mon Mar  5 22:24:32 PST 2018; root:xnu-4570.51.1~1/RELEASE_X86_64', machine='x86_64')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 获取操作系统中的环境变量(输出一个字典)</span></span><br><span class="line">print(os.environ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 获取指定的环境变量</span></span><br><span class="line"><span class="comment"># 参数为上述操作系统环境变量中字典的某一个键值对的键值</span></span><br><span class="line">os.environ.get(<span class="string">'PYTHONPATH'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 获取当前工作目录, 即当前python脚本所在的目录</span></span><br><span class="line">print(os.getcwd())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 返回指定目录下的所有的文件, 返回一个列表</span></span><br><span class="line">print(os.listdir(path))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 在制定目录下增删目录</span></span><br><span class="line"><span class="comment"># 在当前目录下创建文件</span></span><br><span class="line"><span class="comment"># 在制定的路径下创建</span></span><br><span class="line">os.mkdir(<span class="string">r'/Users/xxx/titan'</span>)</span><br><span class="line"><span class="comment"># 默认在当前目录下</span></span><br><span class="line">os.mkdir(<span class="string">'jun'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除目录</span></span><br><span class="line">os.rmdir(<span class="string">'jun'</span>)</span><br><span class="line">os.rmdir(<span class="string">'r'</span>/Users/xxx/titan<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8. 获取文件属性</span></span><br><span class="line">print(<span class="string">'文件属性:'</span>, os.stat(<span class="string">'titan'</span>))</span><br><span class="line"><span class="string">'''输出:</span></span><br><span class="line"><span class="string">文件属性: os.stat_result(st_mode=16877, st_ino=10797606, st_dev=16777224, st_nlink=2, st_uid=501, st_gid=20, st_size=68, st_atime=1527059854, st_mtime=1527058920, st_ctime=1527058920)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 9. 重命名</span></span><br><span class="line"><span class="comment"># os.rename('jun', 'titan')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10. 删除普通文件</span></span><br><span class="line"><span class="comment"># os.remove(path)</span></span><br></pre></td></tr></table></figure>

<h3 id="os模块中的常用值"><a href="#os模块中的常用值" class="headerlink" title="os模块中的常用值"></a>os模块中的常用值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#curdir  表示当前文件夹   .表示当前文件夹  一般情况下可以省略</span></span><br><span class="line">print(os.curdir)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pardir  表示上一层文件夹   ..表示上一层文件夹  不可省略!</span></span><br><span class="line">print(os.pardir)</span><br><span class="line"></span><br><span class="line"><span class="comment">#os.mkdir('../../../man')#相对路径  从当前目录开始查找</span></span><br><span class="line"><span class="comment">#os.mkdir('/home/sy/man1')#绝对路径  从根目录开始查找</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#name 获取代表操作系统的名称字符串</span></span><br><span class="line">print(os.name) <span class="comment">#posix -&gt; linux或者unix系统  nt -&gt; window系统</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sep 获取系统路径间隔符号  window -&gt;\    linux -&gt;/</span></span><br><span class="line">print(os.sep)</span><br><span class="line"></span><br><span class="line"><span class="comment">#extsep 获取文件名称和后缀之间的间隔符号  window &amp; linux -&gt; .</span></span><br><span class="line">print(os.extsep)</span><br><span class="line"></span><br><span class="line"><span class="comment">#linesep  获取操作系统的换行符号  window -&gt; \r\n  linux/unix -&gt; \n</span></span><br><span class="line">print(repr(os.linesep))</span><br></pre></td></tr></table></figure>

<h3 id="处理文件路径"><a href="#处理文件路径" class="headerlink" title="处理文件路径"></a>处理文件路径</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 拼接路径</span></span><br><span class="line">p1 = <span class="string">'/xxx/GitHub/PythonDemo/PythonStudy'</span></span><br><span class="line">p2 = <span class="string">'6-os模块/jun.txt'</span></span><br><span class="line">print(os.path.join(p1, p2))</span><br><span class="line"><span class="comment"># 输出: /xxx/GitHub/PythonDemo/PythonStudy/6-os模块/jun.txt</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. # 拆分路径</span></span><br><span class="line">path2 = <span class="string">r'/xxx/GitHub/PythonDemo/PythonStudy/6-os模块/jun.txt'</span></span><br><span class="line">print(<span class="string">'拆分路径:'</span>, os.path.split(path2))</span><br><span class="line"><span class="comment"># 输出一个元组: ('/xxx/GitHub/PythonDemo/PythonStudy/6-os模块', 'jun.txt')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 获取扩展名, 返回一个元组</span></span><br><span class="line">os.path.splitext(path2)</span><br><span class="line"><span class="comment"># 输出: ('/xxx/GitHub/PythonDemo/PythonStudy/6-os模块/jun', '.txt')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 是否是目录</span></span><br><span class="line">print(<span class="string">'是否是目录:'</span>, os.path.isdir(path2))</span><br><span class="line"><span class="comment"># 是否是目录: False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 判断文件是否存在</span></span><br><span class="line">print(<span class="string">'文件是否存在:'</span>, os.path.isfile(path2))</span><br><span class="line"><span class="comment"># 文件是否存在: False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 判断目录是否存在</span></span><br><span class="line">path3 = <span class="string">r'/Users/quanjunt/Documents/Quanjun/GitHub/PythonDemo/PythonStudy/6-os模块'</span></span><br><span class="line">print(<span class="string">'判断目录是否存在:'</span>, os.path.exists(path3))</span><br><span class="line"><span class="comment"># 输出: False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.  获取文件大小(字节)</span></span><br><span class="line">print(<span class="string">'文件大小:'</span>, os.path.getsize(path3))</span><br><span class="line"><span class="comment"># 文件大小: 170</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8. 获取文件名</span></span><br><span class="line">print(<span class="string">'文件名:'</span>, os.path.basename(path2))</span><br><span class="line"><span class="comment"># 输出: jun.txt</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 9. 获取文件路径中的目录部分</span></span><br><span class="line">print(<span class="string">'文件目录:'</span>, os.path.dirname(path2))</span><br><span class="line"><span class="comment"># 输出: /xxx/GitHub/PythonDemo/PythonStudy/6-os模块</span></span><br></pre></td></tr></table></figure>

<h2 id="random模块"><a href="#random模块" class="headerlink" title="random模块"></a><code>random</code>模块</h2><p><code>random</code>是<code>python</code>产生伪随机数的模块，随机种子默认为系统时钟</p>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先要先导入模块</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.从序列的元素中随机挑选一个元素</span></span><br><span class="line">random.choice((<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>))</span><br><span class="line">random.choice(<span class="string">"titanjun"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 从指定范围内，按指定基数递增的集合中获取一个随机数</span></span><br><span class="line">print(random.randrange(<span class="number">10</span>, <span class="number">100</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 随机生成的一个实数，它在[0,1)范围内</span></span><br><span class="line">random.random()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机生成指定范围[a,b]的整数</span></span><br><span class="line">print(random.randint(<span class="number">1</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机生成指定范围[a,b)的整数</span></span><br><span class="line">print(random.randrange(<span class="number">2</span>, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机生成指定范围[a,b)的指定步长的数</span></span><br><span class="line">print(random.randrange(<span class="number">1</span>, <span class="number">10</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机生成指定序列中的指定个数的元素(返回列表)</span></span><br><span class="line">print(random.sample(<span class="string">'titanjun'</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将序列的所有元素随机排序</span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">random.shuffle(list1)</span><br><span class="line">print(list1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机生成一个在该范围内的实数</span></span><br><span class="line">print(random.uniform(<span class="number">2</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure>

<h3 id="随机生成6位验证码"><a href="#随机生成6位验证码" class="headerlink" title="随机生成6位验证码"></a>随机生成6位验证码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">checkCode = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    temp = random.randint(<span class="number">0</span>, <span class="number">9</span>)</span><br><span class="line">    checkCode += str(temp)</span><br><span class="line">print(<span class="string">"6位随机验证码:"</span>, checkCode)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>os</tag>
        <tag>random</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中的运算符和条件循环语句</title>
    <url>/posts/b4004272/</url>
    <content><![CDATA[<ul>
<li>上文<a href="https://www.titanjun.top/2018/04/10/Python数据类型详解01/" target="_blank" rel="noopener">Python数据类型详解01</a>中主要介绍了<code>Python</code>中的一些常用的数据类型</li>
<li>这篇文章主要介绍一些<code>Python</code>中的运算符</li>
</ul>
<a id="more"></a>

<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>以下假设变量a为9，变量b为7：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加 - 两个对象相加</td>
<td>a + b 输出结果 16</td>
</tr>
<tr>
<td>-</td>
<td>减 - 得到负数或是一个数减去另一个数</td>
<td>a - b 输出结果 -2</td>
</tr>
<tr>
<td>*</td>
<td>乘 - 两个数相乘或是返回一个被重复若干次的字符串</td>
<td>a * b 输出结果 63</td>
</tr>
<tr>
<td>/</td>
<td>除 - x除以y</td>
<td>a / b 输出结果 1.2857142857142858</td>
</tr>
<tr>
<td>%</td>
<td>取模 - 返回除法的余数</td>
<td>a % b 输出结果 2</td>
</tr>
<tr>
<td><code>**</code></td>
<td>幂 - 返回x的y次幂</td>
<td>2**3， 输出结果 8</td>
</tr>
<tr>
<td><code>//</code></td>
<td>取整除 - 返回商的整数部分</td>
<td>9//2 输出结果 4 , 9.0//2.0 输出结果 4.0</td>
</tr>
</tbody></table>
<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>以下假设变量a为10，变量b为20：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>==</td>
<td>等于 - 比较对象是否相等</td>
<td>(a == b) 返回 False。</td>
</tr>
<tr>
<td>!=</td>
<td>不等于 - 比较两个对象是否不相等</td>
<td>(a != b) 返回 true.</td>
</tr>
<tr>
<td>&lt;&gt;</td>
<td>不等于 - 比较两个对象是否不相等</td>
<td>(a &lt;&gt; b) 返回 true。这个运算符类似 != 。</td>
</tr>
<tr>
<td><code>&gt;</code></td>
<td>大于 - 返回x是否大于y</td>
<td>(a &gt; b) 返回 False。</td>
</tr>
<tr>
<td><code>&lt;</code></td>
<td>小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。</td>
<td>(a &lt; b) 返回 true。</td>
</tr>
<tr>
<td><code>&gt;=</code></td>
<td>大于等于 - 返回x是否大于等于y。</td>
<td>(a &gt;= b) 返回 False。</td>
</tr>
<tr>
<td><code>&lt;=</code></td>
<td>小于等于 - 返回x是否小于等于y。</td>
<td>(a &lt;= b) 返回 true。</td>
</tr>
</tbody></table>
<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>以下假设变量a为10，变量b为20：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>简单的赋值运算符</td>
<td>c = a + b 将 a + b 的运算结果赋值为 c</td>
</tr>
<tr>
<td>+=</td>
<td>加法赋值运算符</td>
<td>c += a 等效于 c = c + a</td>
</tr>
<tr>
<td>-=</td>
<td>减法赋值运算符</td>
<td>c -= a 等效于 c = c - a</td>
</tr>
<tr>
<td>*=</td>
<td>乘法赋值运算符</td>
<td>c *= a 等效于 c = c * a</td>
</tr>
<tr>
<td>/=</td>
<td>除法赋值运算符</td>
<td>c /= a 等效于 c = c / a</td>
</tr>
<tr>
<td>%=</td>
<td>取模赋值运算符</td>
<td>c %= a 等效于 c = c % a</td>
</tr>
<tr>
<td><code>**=</code></td>
<td>幂赋值运算符</td>
<td>c *<em>= a 等效于 c = c *</em> a</td>
</tr>
<tr>
<td><code>//=</code></td>
<td>取整除赋值运算符</td>
<td>c //= a 等效于 c = c // a</td>
</tr>
</tbody></table>
<blockquote>
<p>以上这三类基本和其他语言的运算符没什么区别, 也没有什么地方是需要敲黑板的, 下面介绍的僵尸<code>Python</code>中比较特殊的运算符了</p>
</blockquote>
<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>按位运算符是把数字看作二进制来进行计算的。<code>Python</code>中的按位运算法则如下：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td>按位与运算符</td>
<td>(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td>
</tr>
<tr>
<td>^</td>
<td>按位异或运算符</td>
<td>(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>左移动运算符</td>
<td>a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>右移动运算符</td>
<td>a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td>
</tr>
</tbody></table>
<p>该运算符的运算方法是: 先将数字转成二进制, 再把二进制的每一位数字进行以上运算符运算, 最后再把结果转成十进制输出, 测试如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 5.位运算符</span></span><br><span class="line">a = <span class="number">60</span>            <span class="comment"># 60 = 0011 1100</span></span><br><span class="line">b = <span class="number">13</span>            <span class="comment"># 13 = 0000 1101</span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运算和输出结果</span></span><br><span class="line">c = a &amp; b        <span class="comment"># 12 = 0000 1100</span></span><br><span class="line">c = a | b        <span class="comment"># 61 = 0011 1101</span></span><br><span class="line">c = a ^ b        <span class="comment"># 49 = 0011 0001</span></span><br><span class="line">c = ~a           <span class="comment"># -61 = 1100 0011</span></span><br><span class="line">c = a &lt;&lt; <span class="number">2</span>       <span class="comment"># 240 = 1111 0000</span></span><br><span class="line">c = a &gt;&gt; <span class="number">2</span>       <span class="comment"># 15 = 0000 1111</span></span><br></pre></td></tr></table></figure>

<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p><code>Python</code>语言支持逻辑运算符，但是与其他语言(<code>Swift</code>)中的逻辑运算符(<code>&amp;, |, !</code>)不同, 注意区别位运算符, 使用时不要用错了, 以下假设变量 a 为 10, b为 20:</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>and</td>
<td>x and y    布尔”与” - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值</td>
<td>(a and b) 返回 20。</td>
</tr>
<tr>
<td>or</td>
<td>x or y    布尔”或”    - 如果 x 是非 0，它返回 x 的值，否则它返回 y 的计算值</td>
<td>(a or b) 返回 10。</td>
</tr>
<tr>
<td>not</td>
<td>not x    布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True</td>
<td>not(a and b) 返回 False</td>
</tr>
</tbody></table>
<h3 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h3><p><code>Python</code>支持成员运算符, 支持字符串，列表或元组</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>in</td>
<td>如果在指定的序列中找到值返回True，否则返回False</td>
<td>x 在 y序列中 , 如果x在y序列中返回True。</td>
</tr>
<tr>
<td>not in</td>
<td>如果在指定的序列中没有找到值返回True，否则返回False</td>
<td>x 不在 y序列中 , 如果x不在y序列中返回True。</td>
</tr>
</tbody></table>
<p>测试示例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 成员运算符</span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">print(<span class="number">3</span> <span class="keyword">in</span> list1)         <span class="comment"># True</span></span><br><span class="line">print(<span class="number">10</span> <span class="keyword">in</span> list1)        <span class="comment"># False</span></span><br><span class="line">print(<span class="number">10</span> <span class="keyword">not</span> <span class="keyword">in</span> list1)    <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">str1 = <span class="string">'titanjun'</span></span><br><span class="line">print(<span class="string">'jun'</span> <span class="keyword">in</span> str1)       <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<h3 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h3><p>身份运算符用于比较两个对象的存储单元</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>is</td>
<td>is是判断两个标识符是不是引用自一个对象</td>
<td>x is y, 如果 id(x) 等于 id(y) , is 返回结果 1</td>
</tr>
<tr>
<td>is not</td>
<td>is not是判断两个标识符是不是引用自不同对象</td>
<td>x is not y, 如果 id(x) 不等于 id(y). is not 返回结果 1</td>
</tr>
</tbody></table>
<h3 id="Python运算符优先级"><a href="#Python运算符优先级" class="headerlink" title="Python运算符优先级"></a><code>Python</code>运算符优先级</h3><p>以下表格列出了从最高到最低优先级的所有运算符：<br>运算符 | 描述<br>—|—<br><code>**</code> |     指数 (最高优先级)<br><code>~, +, -</code> |     按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)<br><code>*, /, %, //</code> |     乘，除，取模和取整除<br><code>+, -</code> |     加法减法<br><code>&gt;&gt;, &lt;&lt;</code> |     右移，左移运算符<br><code>&amp;</code> |     位 ‘AND’<br><code>^, |</code>     | 位运算符<br><code>&lt;=, &lt;, &gt;, &gt;=</code> |     比较运算符<br><code>&lt;&gt;, ==, !=</code> |     等于运算符<br><code>=, %=, /=, //=, -=, +=, *=, **=</code> |     赋值运算符<br><code>is, is not</code> |     身份运算符<br><code>in, not in</code> |     成员运算符<br><code>not, or, and</code> |     逻辑运算符</p>
<h2 id="条件和循环语句"><a href="#条件和循环语句" class="headerlink" title="条件和循环语句"></a>条件和循环语句</h2><ul>
<li><code>Python</code>程序语言指定任何非0和非空<code>null</code>值为<code>true</code>，0 或者 <code>null</code>为<code>false</code></li>
<li>由于 <code>python</code> 并不支持 <code>switch</code> 语句，所以多个条件判断，只能用 <code>elif</code> 来实现</li>
</ul>
<h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><ul>
<li>if语句的使用和其他语言没什么区别, 主要是格式不一样, 没有大括号, 主要时注意缩进</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件：</span><br><span class="line">    执行语句……</span><br><span class="line"><span class="keyword">elif</span> 判断条件：</span><br><span class="line">    执行语句……</span><br><span class="line"><span class="keyword">else</span>：</span><br><span class="line">    执行语句……</span><br></pre></td></tr></table></figure>

<p>使用示例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># if-else语句</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">2</span> &gt; <span class="number">3</span>:</span><br><span class="line">    print(<span class="string">'真的'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"假的"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># if-elif语句</span></span><br><span class="line">a = <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span>):</span><br><span class="line">    print(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">elif</span> (a == <span class="number">2</span>):</span><br><span class="line">    print(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h3 id="While循环语句"><a href="#While循环语句" class="headerlink" title="While循环语句"></a>While循环语句</h3><p>与C语言中用法一样, 这里就不在赘述了</p>
<h3 id="for-循环语句"><a href="#for-循环语句" class="headerlink" title="for 循环语句"></a>for 循环语句</h3><p><code>Python</code>中 <code>for</code>循环可以遍历任何序列的项目，如一个列表或者一个字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for循环</span></span><br><span class="line"><span class="comment"># 输出每一个字符</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="string">"char"</span>:</span><br><span class="line">    print(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用索引</span></span><br><span class="line">list2 = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(len(list2)):</span><br><span class="line">    print(list2[index])</span><br></pre></td></tr></table></figure>

<ul>
<li>其中, 函数 <code>len()</code> 返回列表的长度，即元素的个数。 <code>range</code>返回一个序列的数, 这个后面会说到</li>
<li>在 <code>python</code> 中，<code>for … else</code> 表示<code>for</code> 中的语句和普通的没有区别，<code>else</code> 中的语句会在循环正常执行完（即 <code>for</code> 不是通过 <code>break</code> 跳出而中断的）的情况下执行，<code>while … else</code> 也是一样。</li>
</ul>
<ul>
<li>对于<code>Python</code>语言, 我也是小白, 正在努力学习中, 文中如有不足之处, 还望多多指教</li>
<li>测试代码详见 <a href="https://github.com/CoderTitan/PythonDemo" target="_blank" rel="noopener">GitHub地址</a></li>
<li>后期会持续更新相关文章</li>
</ul>
]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>判断语句</tag>
        <tag>运算符</tag>
      </tags>
  </entry>
  <entry>
    <title>Python之高阶函数</title>
    <url>/posts/7f54d88f/</url>
    <content><![CDATA[<ul>
<li>做过<code>Swift</code>开发的童鞋都知道, 在<code>Swift</code>中有许多的高阶函数(<code>Map</code>, <code>Filter</code>, <code>Reduce</code>, <code>Zip</code>等), 这些在开发中让我们节省大量代码</li>
<li><code>Python</code>中同样有许多的内置函数, 但是这里也只介绍几个常用的高阶函数</li>
</ul>
<a id="more"></a>


<h3 id="map映射"><a href="#map映射" class="headerlink" title="map映射"></a><code>map</code>映射</h3><p>根据提供的函数对指定序列做映射, 并返回映射后的序列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">map(function, iterable, ...)</span><br></pre></td></tr></table></figure>

<h4 id="参数-返回值"><a href="#参数-返回值" class="headerlink" title="参数/返回值"></a>参数/返回值</h4><ul>
<li><code>function</code> – 函数, 序列中的每个元素需要执行的操作, 可以是匿名函数</li>
<li><code>iterable</code> – 一个或多个序列</li>
<li><code>Python 2.x</code>中返回列表, <code>Python 3.x</code>中返回<code>map</code>类</li>
</ul>
<h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 调用外部函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">res = map(square, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">print(res)</span><br><span class="line">print(list(res))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用匿名函数</span></span><br><span class="line">res1 = map(<span class="keyword">lambda</span> x: x * <span class="number">3</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">print(list(res1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用内置函数</span></span><br><span class="line">res2 = map(str, [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">print(list(res2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个序列</span></span><br><span class="line">res3 = map(<span class="keyword">lambda</span> x, y: x * y, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>])</span><br><span class="line">print(list(res3))</span><br><span class="line"></span><br><span class="line"><span class="string">'''输出结果</span></span><br><span class="line"><span class="string">&lt;map object at 0x1041a5da0&gt;</span></span><br><span class="line"><span class="string">[1, 4, 9, 16]</span></span><br><span class="line"><span class="string">[3, 6, 9, 12]</span></span><br><span class="line"><span class="string">['2', '3', '4', '5']</span></span><br><span class="line"><span class="string">[3, 4, 12, 4]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a><code>reduce</code></h3><ul>
<li>函数会对参数序列中元素进行累积</li>
<li>函数将集合中的所有数据进行下列操作：用传给<code>educe</code>中的函数<code>function</code>先对集合中的第1、2个元素进行操作，得到的结果再与第三个数据用<code>function</code>函数运算，最后得到一个结果</li>
<li>在<code>Python3</code>中，<code>reduce</code>函数已经被从全局名字空间里移除了，它现在被放置在<code>fucntools</code>模块里，如果想要使用它，则需要通过引入<code>functools</code>模块来调用<code>reduce</code>函数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">reduce(function, iterable[, initializer])</span><br></pre></td></tr></table></figure>

<h4 id="参数-返回值-1"><a href="#参数-返回值-1" class="headerlink" title="参数/返回值"></a>参数/返回值</h4><ul>
<li><code>function</code> – 函数, 序列中的每个元素需要执行的操作, 可以是匿名函数</li>
<li><code>iterable</code> – 需要执行操作的序列</li>
<li><code>initializer</code> – 可选，初始参数</li>
<li>最后返回函数的计算结果, 和初始参数类型相同</li>
</ul>
<h4 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 求元素的和</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mySum</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">red = reduce(mySum, list1)</span><br><span class="line">print(red)</span><br><span class="line"></span><br><span class="line">red2 = reduce(mySum, list1, <span class="number">2</span>)</span><br><span class="line">print(red2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匿名函数</span></span><br><span class="line">red3 = reduce(<span class="keyword">lambda</span> x, y: x * y, list1)</span><br><span class="line">print(red3)</span><br><span class="line"></span><br><span class="line">red4 = reduce(<span class="keyword">lambda</span> x, y: x * y, list1, <span class="number">3</span>)</span><br><span class="line">print(red4)</span><br><span class="line"></span><br><span class="line">red5 = reduce(<span class="keyword">lambda</span> x, y: x + y, [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>], <span class="string">'数字: '</span>)</span><br><span class="line">print(red5)</span><br><span class="line"></span><br><span class="line"><span class="string">'''输出结果:</span></span><br><span class="line"><span class="string">10</span></span><br><span class="line"><span class="string">12</span></span><br><span class="line"><span class="string">24</span></span><br><span class="line"><span class="string">72</span></span><br><span class="line"><span class="string">数字: 1234</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<h3 id="filter过滤"><a href="#filter过滤" class="headerlink" title="filter过滤"></a><code>filter</code>过滤</h3><p>用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filter(function, iterable)</span><br></pre></td></tr></table></figure>

<h4 id="参数-返回值-2"><a href="#参数-返回值-2" class="headerlink" title="参数/返回值"></a>参数/返回值</h4><ul>
<li><code>function</code> – 过滤操作执行的函数</li>
<li><code>iterable</code> – 需要过滤的序列</li>
<li>序列的每个元素作为参数传递给函数进行判，然后返回<code>True</code>或<code>False</code>，最后将返回<code>True</code>的元素放到新列表中</li>
<li><code>Python 2.x</code>中返回的是过滤后的列表, 而<code>Python 3.x</code>中返回到是一个<code>filter</code>类</li>
</ul>
<h4 id="使用示例-2"><a href="#使用示例-2" class="headerlink" title="使用示例"></a>使用示例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isOdd</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">fil0 = filter(isOdd, list2)</span><br><span class="line">print(fil0)</span><br><span class="line">print(list(fil0))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匿名函数</span></span><br><span class="line">fil = filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>, list2)</span><br><span class="line">print(list(fil))</span><br><span class="line"></span><br><span class="line"><span class="string">'''输出结果:</span></span><br><span class="line"><span class="string">&lt;filter object at 0x1039e20f0&gt;</span></span><br><span class="line"><span class="string">[1, 3, 5]</span></span><br><span class="line"><span class="string">[2, 4, 6]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<h3 id="sorted排序"><a href="#sorted排序" class="headerlink" title="sorted排序"></a><code>sorted</code>排序</h3><ul>
<li>在列表中有一个内置的排序函数<code>sort()</code>, 对列表的对象进行排序, 没有返回值</li>
<li><code>sorted()</code>函数对所有可迭代的对象进行排序操作</li>
<li><code>sort</code>与<code>sorted</code>区别：<ul>
<li><code>sort</code>是应用在<code>list</code>上的方法，<code>sorted</code>可以对所有可迭代的对象进行排序操作。</li>
<li><code>list</code>的<code>sort</code>方法返回的是对已经存在的列表进行操作，而内建函数<code>sorted</code>方法返回的是一个新的<code>list</code>，而不是在原来的基础上进行的操作</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list.sort(cmp=<span class="literal">None</span>, key=<span class="literal">None</span>, reverse=<span class="literal">False</span>)</span><br><span class="line">sorted(iterable[, cmp[, key[, reverse]]])</span><br></pre></td></tr></table></figure>

<h4 id="参数-返回值-3"><a href="#参数-返回值-3" class="headerlink" title="参数/返回值"></a>参数/返回值</h4><ul>
<li><code>iterable</code> – 可迭代对象</li>
<li><code>cmp</code> – 比较的函数，这个具有两个参数，参数的值都是从可迭代对象中取出，此函数必须遵守的规则为，大于则返回1，小于则返回-1，等于则返回0。</li>
<li><code>key</code> – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</li>
<li><code>reverse</code> – 排序规则，<code>reverse = True</code>降序，<code>reverse = False</code>升序(默认）</li>
<li><code>sort</code>没有返回值, <code>sorted</code>返回重新排序的列表</li>
</ul>
<h4 id="使用示例-3"><a href="#使用示例-3" class="headerlink" title="使用示例"></a>使用示例</h4><p>使用<code>sort()</code>排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用sort</span></span><br><span class="line">list3 = [<span class="number">3</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">4</span>]</span><br><span class="line">list3.sort()</span><br><span class="line">print(list3)</span><br><span class="line"></span><br><span class="line">aList = [<span class="string">'123'</span>, <span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="string">'Taobao'</span>, <span class="string">'Facebook'</span>]</span><br><span class="line">aList.sort(reverse=<span class="literal">True</span>) <span class="comment"># 降序</span></span><br><span class="line">print(aList)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">takeSecond</span><span class="params">(elem)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> elem[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">random = [(<span class="number">2</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定第二个元素排序</span></span><br><span class="line">random.sort(key=takeSecond)</span><br><span class="line">print(random)</span><br><span class="line"></span><br><span class="line"><span class="string">'''输出结果:</span></span><br><span class="line"><span class="string">[0, 2, 3, 4, 5, 7]</span></span><br><span class="line"><span class="string">['Taobao', 'Runoob', 'Google', 'Facebook', '123']</span></span><br><span class="line"><span class="string">[(4, 1), (2, 2), (1, 3), (3, 4)]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>使用<code>sorted()</code>函数排序时</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list4 = sorted(list3)</span><br><span class="line">print(list4)</span><br><span class="line"></span><br><span class="line"><span class="comment">#按绝对值大小排序</span></span><br><span class="line">list5 = [<span class="number">4</span>,<span class="number">-7</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">-3</span>]</span><br><span class="line"><span class="comment">#key接受函数来实现自定义排序规则</span></span><br><span class="line">list6 = sorted(list5, key=abs)</span><br><span class="line">print(list6)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将序排列</span></span><br><span class="line">print(sorted(list5, key=abs, reverse=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#函数可以自己写</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myLen</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> len(str)</span><br><span class="line"></span><br><span class="line">list7 = [<span class="string">'b333'</span>,<span class="string">'a1111111'</span>,<span class="string">'c22'</span>,<span class="string">'d5554'</span>]</span><br><span class="line">list8 = sorted(list7, key=myLen) <span class="comment"># 默认升序排序</span></span><br><span class="line">print(list8)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匿名函数</span></span><br><span class="line">list9 = sorted(list7, key=<span class="keyword">lambda</span> x: len(x), reverse=<span class="literal">True</span>)</span><br><span class="line">print(list9)</span><br><span class="line"></span><br><span class="line"><span class="string">'''输出结果:</span></span><br><span class="line"><span class="string">[0, 2, 3, 4, 5, 7]</span></span><br><span class="line"><span class="string">[2, -3, 4, 6, -7]</span></span><br><span class="line"><span class="string">[-7, 6, 4, -3, 2]</span></span><br><span class="line"><span class="string">['c22', 'b333', 'd5554', 'a1111111']</span></span><br><span class="line"><span class="string">['a1111111', 'd5554', 'b333', 'c22']</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<h3 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate"></a><code>enumerate</code></h3><ul>
<li>用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在<code>for</code>循环当中</li>
<li><code>Python 2.3</code>以上版本可用，<code>2.6</code>添加<code>start</code>参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">enumerate(sequence, [start=<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<h4 id="参数-返回值-4"><a href="#参数-返回值-4" class="headerlink" title="参数/返回值"></a>参数/返回值</h4><ul>
<li><code>sequence</code> – 一个序列、迭代器或其他支持迭代对象</li>
<li><code>start</code> – 下标起始位置</li>
<li>函数返回<code>enumerate</code>(枚举) 对象</li>
</ul>
<h4 id="使用示例-4"><a href="#使用示例-4" class="headerlink" title="使用示例"></a>使用示例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">seasons = [<span class="string">'Spring'</span>, <span class="string">'Summer'</span>, <span class="string">'Fall'</span>, <span class="string">'Winter'</span>]</span><br><span class="line">sea1 = enumerate(seasons)</span><br><span class="line">print(sea1)</span><br><span class="line">print(list(sea1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义起始索引</span></span><br><span class="line">sea2 = list(enumerate(seasons, start=<span class="number">1</span>))</span><br><span class="line">print(sea2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 普通的 for 循环</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> seasons:</span><br><span class="line">     print(i, seasons[i])</span><br><span class="line">     i +=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for 循环使用 enumerate</span></span><br><span class="line"><span class="keyword">for</span> i, ele <span class="keyword">in</span> enumerate(seasons):</span><br><span class="line">    print(i, ele)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''输出结果:</span></span><br><span class="line"><span class="string">&lt;enumerate object at 0x103a46438&gt;</span></span><br><span class="line"><span class="string">[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]</span></span><br><span class="line"><span class="string">[(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]</span></span><br><span class="line"><span class="string">0 Spring</span></span><br><span class="line"><span class="string">1 Summer</span></span><br><span class="line"><span class="string">2 Fall</span></span><br><span class="line"><span class="string">3 Winter</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0 Spring</span></span><br><span class="line"><span class="string">1 Summer</span></span><br><span class="line"><span class="string">2 Fall</span></span><br><span class="line"><span class="string">3 Winter</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a><code>zip</code></h3><ul>
<li>用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，这样做的好处是节约了不少的内存</li>
<li>如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同</li>
<li>函数有一个参数, 接受一个或多个序列</li>
<li>函数利用<code>*</code>号操作符，可以将元组解压为列表</li>
<li><code>zip</code>方法在<code>Python 2.x</code>中返回一个列表, 在<code>Python 3.x</code>中返回一个对象</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">zip([iterable, ...])</span><br></pre></td></tr></table></figure>

<h4 id="使用示例-5"><a href="#使用示例-5" class="headerlink" title="使用示例"></a>使用示例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">c = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">zip1 = zip(a, b)</span><br><span class="line">print(zip1)</span><br><span class="line">print(list(zip1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个列表不同元素个数, 元素个数与最短的列表一致</span></span><br><span class="line">zip2 = zip(a, c)</span><br><span class="line">print(list(zip2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># `*`号操作符，可以将元组解压为列表</span></span><br><span class="line">a1, c1 = zip(*zip(a, c))</span><br><span class="line">print(a1)</span><br><span class="line">print(c1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''输出结果:</span></span><br><span class="line"><span class="string">&lt;zip object at 0x103a41408&gt;</span></span><br><span class="line"><span class="string">[(1, 'a'), (2, 'b'), (3, 'c')]</span></span><br><span class="line"><span class="string">[(1, 4), (2, 5), (3, 6)]</span></span><br><span class="line"><span class="string">(1, 2, 3)</span></span><br><span class="line"><span class="string">(4, 5, 6)</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a><code>reverse</code></h3><ul>
<li><code>reverse()</code>函数用于将列表中的元素反向排列</li>
<li>该函数没有参数没有返回值</li>
<li>使用示例如下</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list31 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">list31.reverse()</span><br><span class="line">print(list31)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line">[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>高阶函数</tag>
        <tag>map</tag>
        <tag>reduce</tag>
        <tag>filter</tag>
      </tags>
  </entry>
  <entry>
    <title>git push error:src refspec master does not match any解决</title>
    <url>/posts/e0e25902/</url>
    <content><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>在使用git 添加本地已有的git文件夹到GitHub时, 使用GitHub提示的命令:</p>
<p>git remote add origin <a href="https://github.com/xxx/xxx.git" target="_blank" rel="noopener">https://github.com/xxx/xxx.git</a><br>git push -u origin master<br>第一步顺利执行, 第二步命令行报错:</p>
<p>error: src refspec master does not match any.<br>error: 无法推送一些引用到 ‘<a href="https://github.com/xxx/xxxxxx.git&#39;" target="_blank" rel="noopener">https://github.com/xxx/xxxxxx.git&#39;</a></p>
<a id="more"></a>



<h3 id="解决办法如下"><a href="#解决办法如下" class="headerlink" title="解决办法如下:"></a>解决办法如下:</h3><ul>
<li>注意检查git config配置：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;you@example.com&quot;</span><br><span class="line"></span><br><span class="line">git config --global user.name &quot;Your Name&quot;</span><br><span class="line"></span><br><span class="line">to set your account&apos;s default identity.</span><br><span class="line">Omit --global to set the identity only in this repository.</span><br></pre></td></tr></table></figure>

<ul>
<li>上述如果没有问题，接下来：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;your description&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<p>最后可以通过git status 查看文件夹的状态.</p>
<p>如果你和我一样出现如下提示:</p>
<blockquote>
<p>位于分支 master<br>无文件要提交，干净的工作区</p>
</blockquote>
<p>那么就成功解决了。</p>
<hr>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo next 配置 DaoVoice实现在线聊天</title>
    <url>/posts/68d038bb/</url>
    <content><![CDATA[<p>之前有访问过一些大佬的个人博客，里面有个在线联系功能，看着不错，所以也试着在自己的站点上接入了此功能。</p>
<h1 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h1><p>首先在<a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a>注册个账号，点击-&gt;<a href="http://dashboard.daovoice.io/get-started?invite_code=6b1cb9a7" target="_blank" rel="noopener">邀请码</a>是<code>6b1cb9a7</code>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/donxan/pics/20200327174211.png" alt></p>
<p>完成后，会得到一个<code>app_id</code>，后面会用到：<br><img src="https://s1.ax1x.com/2018/01/21/pW5yM8.png" alt="https://cdn.jsdelivr.net/gh/donxan/pics/typora-icon2.png"></p>
<h1 id="修改head-swig"><a href="#修改head-swig" class="headerlink" title="修改head.swig"></a>修改head.swig</h1><p>修改<code>/themes/next/layout/_partials/head.swig</code>文件，添加内容如下，注意’//widget.daovoice.io/widget/2e5d695d.js’ 中js文件名改成自己的id就行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.daovoice %&#125;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  (function(i,s,o,g,r,a,m)&#123;i[&quot;DaoVoiceObject&quot;]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=&quot;utf-8&quot;;m.parentNode.insertBefore(a,m)&#125;)(window,document,&quot;script&quot;,(&apos;https:&apos; == document.location.protocol ? &apos;https:&apos; : &apos;http:&apos;) + &quot;//widget.daovoice.io/widget/2e5d695d.js&quot;,&quot;daovoice&quot;)</span><br><span class="line">  daovoice(&apos;init&apos;, &#123;</span><br><span class="line">      app_id: &quot;&#123;&#123;theme.daovoice_app_id&#125;&#125;&quot;</span><br><span class="line">    &#125;);</span><br><span class="line">  daovoice(&apos;update&apos;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>位置贴图：<br><a href="https://imgchr.com/i/pWIwmF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/01/21/pWIwmF.md.png" alt="pWIwmF.md.png"></a></p>
<h1 id="主题配置文件"><a href="#主题配置文件" class="headerlink" title="主题配置文件"></a>主题配置文件</h1><p>在<code>_config.yml</code>文件中添加内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Online contact</span><br><span class="line">daovoice: true</span><br><span class="line">daovoice_app_id:   # 这里填你刚才获得的 app_id</span><br></pre></td></tr></table></figure>

<h1 id="聊天窗口配置"><a href="#聊天窗口配置" class="headerlink" title="聊天窗口配置"></a>聊天窗口配置</h1><p>附上我的聊天窗口的颜色、位置等设置信息：<br><a href="https://s1.ax1x.com/2018/01/21/pWonhR.png" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/01/21/pWonhR.png" alt="pWonhR.png"></a></p>
<p>至此，网页的在线联系功能已经完成，重新<code>hexo g</code>，<code>hexo d</code>上传GitHub后，页面上就能看到效果了。</p>
<p>就比如说你现在往右下角看看(～￣▽￣)～ ，欢迎撩我（滑稽）。</p>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>效率提升方法论</title>
    <url>/posts/14d4f061/</url>
    <content><![CDATA[<h1 id="效率提升方法论"><a href="#效率提升方法论" class="headerlink" title="效率提升方法论"></a>效率提升方法论</h1><p>在智力水平相当的前提下，常常会发现：有些人做事，事倍功半；有些人做事，事半功倍。</p>
<p>做任何事，如果有了清晰的思路，正确的指导方针，肯定是比毫无头绪要高效很多。所以，现实中，常常会看到这样一种现象，优秀的人，往往全面优秀，干什么都出彩；而平庸的人，做什么都出不了成绩。</p>
<p>大多数人不是天才，想要变得优秀，唯一的途径就是：按照正确的习惯（方式方法），坚持不懈的努力进步（自律）。</p>
<blockquote>
<p>我们日复一日做的事情，决定了我们是怎样的人。因此<strong>所谓卓越，并非指行为，而是习惯</strong>。</p>
<p>We are what we repeatedly do. Excellence, then, is not an act, but a habit.</p>
<p>——莎士比亚</p>
</blockquote>
<h2 id="5W2H"><a href="#5W2H" class="headerlink" title="5W2H"></a>5W2H</h2><p><strong>5W2H 分析法是一种思考问题的启发式思维方式</strong>。5W2H 分析法用五个以 <code>W</code> 开头的英语单词和两个以 <code>H</code> 开头的英语单词进行设问，得到关键性问题的答案，最后总结归纳出问题的目标、解决思路、处理方法等，这就叫做 5W2H 法。</p>
<p>5W2H 分析法又叫七问分析法，是二战中美国陆军兵器修理部首创。这种分析法广泛用于企业管理和技术活动，对于决策和执行性的活动措施也非常有帮助，也有助于弥补考虑问题的疏漏。</p>
<p>5W2H 分析法的意义在于：避免遇到一个问题后，不知从何入手。通过设问方式，由点成线，由线成面，把问题的关键点串联起来，整理出问题的解决思路。</p>
<p><img src="https://cdn.jsdelivr.net/gh/donxan/pics/20200329100309.png" alt></p>
<ul>
<li><strong>why</strong> - 为什么？为什么要这么做？理由何在？原因是什么？</li>
<li><strong>what</strong> - 是什么？目的是什么？作什么工作？</li>
<li><strong>where</strong> - 何处？在哪里做？从哪里入手？</li>
<li><strong>when</strong> - 何时？什么时间完成？什么时机最适宜？</li>
<li><strong>who</strong> - 谁？有谁来承担？谁来完成？谁负责？</li>
<li><strong>how</strong> - 怎么做？如何提高效率？如何实施？方法怎么样？</li>
<li><strong>how much</strong> - 多少？做到什么程度？数量如何？质量水平如何？费用产出如何？</li>
</ul>
<h2 id="四象限原则"><a href="#四象限原则" class="headerlink" title="四象限原则"></a>四象限原则</h2><p><strong>四象限原则是一种时间管理方式</strong>。</p>
<p>有首歌唱出了大多数职场人的心声：时间都去哪儿了？</p>
<p>事情、任务太多，时间太少，分身乏术。</p>
<p>时间管理四象限法则是美国的管理学家科维提出的一个时间管理的理论，按处理顺序划分为：紧急又重要、重要不紧急、紧急不重要、不紧急不重要。</p>
<p><img src="https://cdn.jsdelivr.net/gh/donxan/pics/20200329100231.png" alt></p>
<ul>
<li><strong>第一象限（重要而紧急</strong>）<ul>
<li>案例：应付难缠的客户、准时完成工作、住院开刀等等。</li>
<li>这是考验我们的经验、判断力的时刻，也是可以用心耕耘的园地。如果荒废了，我们很会可能变成行尸走肉。但我们也不能忘记，很多重要的事都是因为一拖再拖或事前准备不足，而变成迫在眉睫。</li>
<li>该象限的本质是缺乏有效的工作计划导致本处于“重要但不紧急”第二象限的事情转变过来的，这也是传统思维状态下的管理者的通常状况，就是“忙”。</li>
</ul>
</li>
<li><strong>第二象限（重要但不紧急）</strong><ul>
<li>案例：学习新技能、建立人际关系、保持身体健康、长期的规划、问题的发掘与预防、参加培训、向上级提出问题处理的建议等等事项。</li>
<li>荒废这个领域将使第一象限日益扩大，使我们陷入更大的压力，在危机中疲于应付。反之，多投入一些时间在这个领域有利于提高实践能力，缩小第一象限的范围。做好事先的规划、准备与预防措施，很多急事将无从产生。这个领域的事情不会对我们造成催促力量，所以必须主动去做，这是发挥个人领导力的领域。</li>
<li>这更是传统低效管理者与高效卓越管理者的重要区别标志，建议管理者要把 80%的精力投入到该象限的工作，以使第一象限的“急”事无限变少，不再瞎“忙”。</li>
</ul>
</li>
<li><strong>第三象限（紧急但不重要）</strong><ul>
<li>案例：电话、会议、突发的访客都属于这一类。</li>
<li>表面看似第一象限，因为迫切的呼声会让我们产生“这件事很重要”的错觉——实际上就算重要也是对别人而言。我们花很多时间在这个里面打转，自以为是在第一象限，其实不过是在满足别人的期望与标准。</li>
</ul>
</li>
<li><strong>第四象限（不紧急也不重要）</strong><ul>
<li>案例：阅读无聊小说、看毫无内容的电视节目、办公室聊天、刷微博、刷朋友圈等。</li>
<li>简而言之就是浪费生命，所以根本不值得花半点时间在这个象限。但我们往往在一、三象限来回奔走，忙得焦头烂额，不得不到第四象限去疗养一番再出发。这部分范围倒不见得都是休闲活动，因为真正有创造意义的休闲活动是很有价值的。然而像阅读令人上瘾的无聊小说、毫无内容的电视节目、办公室聊天等。这样的休息不但不是为了走更长的路，反而是对身心的毁损，刚开始时也许有滋有味，到后来你就会发现其实是很空虚的。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>效率</category>
      </categories>
      <tags>
        <tag>效率</tag>
        <tag>方法</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5学习笔记之基础标签</title>
    <url>/posts/7ab2d054/</url>
    <content><![CDATA[<p>HTML5学习笔记之基础标签</p>
<a id="more"></a>

<h2 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h2><h3 id="无序列表-unordered-list"><a href="#无序列表-unordered-list" class="headerlink" title="无序列表(unordered list)"></a>无序列表(unordered list)</h3><ul>
<li>无序 : 没有先后之分</li>
<li>给一堆内容添加无序列表语义(一个没有先后顺序整体), 列表中的条目是不分先后</li>
<li>ul应用场景:<ul>
<li>导航条</li>
<li>商品列表等</li>
<li>新闻列表</li>
</ul>
</li>
</ul>
<h4 id="格式"><a href="#格式" class="headerlink" title="格式:"></a>格式:</h4><ul>
<li>li 英文是 list item, 翻译为列表项</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">    &lt;h4&gt;中国城市列举(CN)&lt;/h4&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;北京&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;上海&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;广州&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;杭州&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/4122543-6170aa7da4bd362f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20170614_4.png"></p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h4><ul>
<li>ul是一个组标签, 一定是一坨一坨的出现, 也就是说li标签不能单独存在, 必须包裹在ul里面</li>
<li>由于ul和li是一个整体, 所以ul里面不推荐包裹其它标签, 永远记住ul里面最好只写li标签</li>
<li>虽然ul中推荐只能写li标签, 但是li标签是一个容器标签, li标签中可以添加任意标签, 甚至可以添加ul标签</li>
<li>其实ul还有一个type属性, 可以修改先导符号的样式, 取值有disc、square、circle几种</li>
</ul>
<table>
<thead>
<tr>
<th>取值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>disc</td>
<td>项目符号显示为实体圆心,默认值</td>
</tr>
<tr>
<td>square</td>
<td>项目符号显示为实体方心</td>
</tr>
<tr>
<td>circle</td>
<td>项目符号显示为空心圆</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>课程安排<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        上午</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>HTML5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        下午</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>OC<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>Swift<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/4122543-3e921651c9eb3c47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20170614_5.png"></p>
<h3 id="有序列表-ordered-list"><a href="#有序列表-ordered-list" class="headerlink" title="有序列表(ordered list)"></a>有序列表(ordered list)</h3><ul>
<li>作用: 给一堆内容添加有序列表语义(一个有顺序整体), 列表中的条目有先后之分</li>
<li>ol应用场景:<ul>
<li>xxx排行榜</li>
<li>其实ol应用场景并不多, 因为能用ol做的用ul都能做</li>
<li>ul的常见属性start、type属性, 可以修改先导符号的样式和序号</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>取值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>使用数字作为项目符号</td>
</tr>
<tr>
<td>A/a</td>
<td>使用大写/小写字母作为项目符号</td>
</tr>
<tr>
<td>I/i</td>
<td>使用大写/小写罗马数字作为项目符号</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>中国房价排行榜<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>杭州<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/4122543-13f9b32478195bac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20170614_6.png"></p>
<h3 id="定义列表-definition-list"><a href="#定义列表-definition-list" class="headerlink" title="定义列表(definition list)"></a>定义列表(definition list)</h3><ul>
<li>给一堆内容添加列表语义, 通过dt罗列出列表的条目, 然后再通过dd给每个条目进行相应的描述</li>
<li>dl应用场景:<ul>
<li>网站底部相关信息</li>
<li>但凡看到一堆内容都是用于描述某一个内容的时候就要想到dl</li>
</ul>
</li>
</ul>
<h4 id="格式-1"><a href="#格式-1" class="headerlink" title="格式:"></a>格式:</h4><ul>
<li>dt英文definition title, 翻译为定义标题</li>
<li>dd英文definition description, 翻译为定义描述信息</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">    &lt;dt&gt;北京&lt;/dt&gt;</span><br><span class="line">    &lt;dd&gt;国家的首都&lt;/dd&gt;</span><br><span class="line">    &lt;dt&gt;杭州&lt;/dt&gt;</span><br><span class="line">    &lt;dd&gt;坑爹,房价上涨最快的地方&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br><span class="line"></span><br><span class="line">![Snip20170614_7.png](http:<span class="comment">//upload-images.jianshu.io/upload_images/4122543-2d304b7b5f58b8c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span></span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/4122543-4429f20791990a71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20170614_9.png"></p>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项:"></a>注意事项:</h4><ul>
<li>dl是一个<code>组标签</code>, 一定是一坨一坨的出现, 也就是说<code>dt</code>和<code>dd</code>标签不能单独存在, 必须包裹在<code>dl</code>里面</li>
<li>由于<code>dl</code>和<code>dt</code>、<code>dd</code>是一个整体, 所以<code>dl</code>里面不推荐包裹其它标签</li>
<li><code>dd</code>和<code>dt</code>和<code>li</code>标签一样是容器标签, 里面可以添加任意标签</li>
<li>定义列表非常灵活, 可以给一个<code>dt</code>配置多个<code>dd</code>, 但是最好不要出现多个<code>dt</code>对应一个<code>dd</code>, <code>dd</code>的语义是描述离它最近的一个<code>dt</code>, 所以其它<code>dt</code>相当于没有描述, 而定义列表存在的意义就是既可以列出每一个条目又可以对每一个条目进行描述</li>
<li>定义列表非常灵活, 可以将多个<code>dt+dd</code>组合拆分为多个<code>dl</code></li>
</ul>
<h3 id="列表对比"><a href="#列表对比" class="headerlink" title="列表对比"></a>列表对比</h3><table>
<thead>
<tr>
<th>类型</th>
<th>说明</th>
<th>项目符号</th>
</tr>
</thead>
<tbody><tr>
<td>无序列表</td>
<td>以<code>&lt;ul&gt;</code>标签来实现, 以<code>&lt;li&gt;</code>标签表示列表项</td>
<td>通过type属性设置项目符号: disc（默认）、square和circle</td>
</tr>
<tr>
<td>有序列表</td>
<td>以<code>&lt;ol&gt;</code>标签来实现, 以<code>&lt;li&gt;</code>标签表示列表项</td>
<td>通过type属性设置项目顺序: 1(数字，默认)、A(大写字母)、a(小写字母)、I(大写罗马数字)和i(小写罗马数字)</td>
</tr>
<tr>
<td>定义列表</td>
<td>以<code>&lt;dl&gt;</code>标签是实现, 以<code>&lt;dt&gt;</code>标签定义列表项, 以<code>&lt;dd&gt;</code>标签定义内容</td>
<td>无项目符号和显示顺序</td>
</tr>
</tbody></table>
<h2 id="H-P-Hr-br标签"><a href="#H-P-Hr-br标签" class="headerlink" title="H/P/Hr/br标签"></a>H/P/Hr/br标签</h2><h3 id="H系列标签"><a href="#H系列标签" class="headerlink" title="H系列标签"></a>H系列标签</h3><ul>
<li>用于给文本添加标题语义(Header 1~Header 6)</li>
<li>格式: <code>&lt;h1&gt;xxxxxx&lt;/h1&gt;</code></li>
<li>注意点:<ul>
<li>H标签是用来给文本添加标题语义的, 而不是用来修改文本的样式的</li>
<li>H标签一共有6个, 从H1~H6, 最多就只能到6, 超过6则无效</li>
<li>被H系列标签包裹的内容会独占一行</li>
<li>在H系列的标签中, H1最大, H6最小</li>
<li>在企业开发中, 一定要慎用H系列的标签, 特别是H1标签. 在企业开发中一般情况下一个界面中只能出现一个H1标签(和SEO有关)</li>
</ul>
</li>
</ul>
<h3 id="P标签-Paragraph"><a href="#P标签-Paragraph" class="headerlink" title="P标签(Paragraph)"></a>P标签(Paragraph)</h3><ul>
<li>告诉浏览器哪些文字是一个段落</li>
<li>格式: <code>&lt;p&gt;xxxxxxxx&lt;/p&gt;</code></li>
<li>在浏览器中会单独占一行</li>
</ul>
<h3 id="Hr标签-Horizontal-Rule"><a href="#Hr标签-Horizontal-Rule" class="headerlink" title="Hr标签(Horizontal Rule)"></a>Hr标签(Horizontal Rule)</h3><ul>
<li>在浏览器上显示一条分割线</li>
<li>格式: <code>&lt;hr /&gt;</code></li>
<li>注意点:<ul>
<li>在浏览器中会单独占一行</li>
<li>通过我的观察发现HR标签可以写/也可以不写<ul>
<li>如果不写/那么就是按照HTML的规范来编写</li>
<li>如果写上/那么就是按照XHTML的规范来编写.</li>
</ul>
</li>
<li>由于hr标签是用来修改样式的, 所以不推荐使用. 今后开发中添加水平线一般都使用CSS盒子来做</li>
</ul>
</li>
</ul>
<h3 id="br标签-Break"><a href="#br标签-Break" class="headerlink" title="br标签(Break)"></a>br标签(Break)</h3><ul>
<li>作用: 让内容换行</li>
<li>格式: <code>&lt;br/&gt;</code></li>
<li>注意点:<ul>
<li>br的意思是不另起一个段落进行换行, 而网页中99.99%需要换行时都是因为另起了一个段落, 所以应该用p来做</li>
</ul>
</li>
</ul>
<h3 id="字体样式标签"><a href="#字体样式标签" class="headerlink" title="字体样式标签"></a>字体样式标签</h3><ul>
<li>加粗：<code>&lt;strong&gt;…&lt;/strong&gt;</code>、<code>&lt;b&gt;..&lt;/b&gt;</code></li>
<li>斜体：<code>&lt;em&gt;…&lt;/em&gt;</code>、<code>&lt;i&gt;&lt;/i&gt;</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>徐志摩人物简介<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">em</span>&gt;</span>1910<span class="tag">&lt;/<span class="name">em</span>&gt;</span>年入杭州学堂<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">em</span>&gt;</span>1918<span class="tag">&lt;/<span class="name">em</span>&gt;</span>年赴美国克拉大学学习银行学<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="注释和特殊符号"><a href="#注释和特殊符号" class="headerlink" title="注释和特殊符号"></a>注释和特殊符号</h3><table>
<thead>
<tr>
<th>特殊符号</th>
<th>字符实体</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>空格</td>
<td><code>&amp;nbsp;</code></td>
<td><code>&lt;a href=&quot;#&quot;&gt;百度&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a href=&quot;#&quot;&gt;新浪&lt;/a&gt;</code></td>
</tr>
<tr>
<td>大于号(&gt;)</td>
<td><code>&amp;gt;</code></td>
<td>如果时间<code>&amp;gt;</code>晚上6点，就坐车回家</td>
</tr>
<tr>
<td>小于号(&lt;)</td>
<td><code>&amp;lt;</code></td>
<td>如果时间<code>&amp;lt;</code>早上7点，就走路去上学</td>
</tr>
<tr>
<td>引号(“)</td>
<td><code>&amp;quot;</code></td>
<td>W3C规范中，HTML的属性值必须用成对的<code>&amp;quot;</code>引起来</td>
</tr>
<tr>
<td>版权符号©</td>
<td><code>&amp;copy;</code></td>
<td><code>&amp;copy;</code> 2003-2013</td>
</tr>
</tbody></table>
<h3 id="HTML注释-Annotation"><a href="#HTML注释-Annotation" class="headerlink" title="HTML注释(Annotation)"></a>HTML注释(Annotation)</h3><h4 id="什么是注释"><a href="#什么是注释" class="headerlink" title="什么是注释"></a>什么是注释</h4><ul>
<li>注释格式: <code>&lt;!--被注释的内容--&gt;</code></li>
<li>注意点:<ul>
<li>被注释的内容不会在浏览器中显示, 注释是写给我们自己看的<ul>
<li>注释不能嵌套使用</li>
</ul>
</li>
</ul>
</li>
<li>快捷键: <code>ctrl + /</code></li>
</ul>
<p><code>&lt;!--&lt;!--被注释的内容--&gt;--&gt;</code></p>
<h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;标题1&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;标题2&lt;/h2&gt;</span><br><span class="line">&lt;h3&gt;标题3&lt;/h3&gt;</span><br><span class="line">&lt;h4&gt;标题4&lt;/h4&gt;</span><br><span class="line">&lt;h5&gt;标题5&lt;/h5&gt;</span><br><span class="line">&lt;h6&gt;标题6&lt;/h6&gt;</span><br><span class="line">&lt;h7&gt;我是假的,标题7&lt;/h7&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--我是注释--&gt;</span><br><span class="line">&lt;hr /&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;告诉浏览器哪些文字是一个段落&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--下面是分割线--&gt;</span><br><span class="line">&lt;hr /&gt;</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/4122543-1ebb54835bf8f28b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20170614_10.png"></p>
<h2 id="img标签-image"><a href="#img标签-image" class="headerlink" title="img标签(image)"></a>img标签(image)</h2><ul>
<li>作用: 在网页上插入一张图片</li>
<li>格式: <code>![image](http://note.youdao.com/favicon.ico)</code></li>
<li>标签的属性<ul>
<li>写在标签中K=”V”这种格式的文本我们称之为标签属性</li>
</ul>
</li>
<li>常见的图像格式<ul>
<li>JPG: Internet上被广泛支持，采用的是有损压缩，会造成图像失真，压缩之后体积小，且比较清晰，适合在网页中应用</li>
<li>GIF: 网页中使用最广泛、最普遍的，不仅支持透明色还支持动画，因此在网页中使用非常广泛</li>
<li>PNG: 兼有GIF和JPG的优势，同时具备GIF文件不具备的特性，唯一遗憾的是,PNG是一种新兴的图像格式，存在部分旧版本浏览器不支持的问题</li>
<li>BMP: Windows操作系统中使用的比较多，不支持文件压缩，也不适用与web页面</li>
</ul>
</li>
</ul>
<h3 id="属性介绍"><a href="#属性介绍" class="headerlink" title="属性介绍"></a>属性介绍</h3><table>
<thead>
<tr>
<th>属性名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>src(source)</td>
<td>告诉浏览器需要插入的图片路径, 以便于浏览器到该路径下找到需要插入的图片</td>
</tr>
<tr>
<td>alt(alternate)</td>
<td>规定图像的替代文本, 只有在src指定的路径下找不到图片,才会显示alt指定的文本</td>
</tr>
<tr>
<td>title</td>
<td>悬停文本(介绍这张图片, 只有在鼠标移动到图片上时才会显示)</td>
</tr>
<tr>
<td>height</td>
<td>设置图片显示的高度</td>
</tr>
<tr>
<td>width</td>
<td>设置图片显示的宽度</td>
</tr>
</tbody></table>
<h3 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h3><p>img标签添加的图片默认不是占一整行空间<br>如果想让图片等比拉伸,只写高度或者宽度即可</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">&lt;!--图片标签--&gt;</span><br><span class="line">![](http:<span class="comment">//note.youdao.com/favicon.ico)</span></span><br><span class="line">![有道云笔记](http:<span class="comment">//note.youdao.com/favicon.ico)</span></span><br><span class="line">![有道云笔记](http:<span class="comment">//note.youdao.com/favicon.ico)</span></span><br><span class="line">![有道云笔记](http:<span class="comment">//note.youdao.com/favicon.ico)</span></span><br><span class="line">![有道云笔记](http:<span class="comment">//note.youdao.com/favicon.ico)</span></span><br><span class="line">![有道云笔记](http:<span class="comment">//note.youdao.com/favicon.ico)</span></span><br><span class="line">&lt;img src=<span class="string">""</span> alt=<span class="string">"找不到图片"</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="http://upload-images.jianshu.io/upload_images/4122543-9ff009b644bc64cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20170614_12.png"></p>
<h2 id="a标签-anchor"><a href="#a标签-anchor" class="headerlink" title="a标签(anchor)"></a>a标签(anchor)</h2><ul>
<li>页面间链接<ul>
<li>从一个页面链接到另外一个页面</li>
</ul>
</li>
<li>锚链接<ul>
<li>从A页面的甲位置跳转到A页面的乙位置</li>
<li>从A页面的甲位置跳转到B页面的乙位置</li>
<li>在目标标签中设置id属性=值，链接处href=”[路径]#值”</li>
<li>设置<a name="”值”">目标处</a>，在链接处链接处href=”[路径]#值”</li>
</ul>
</li>
<li>注意事项:<ul>
<li>在a标签之间一定要写上文字, 如果没有, 那么在页面上找不到这个标签<br>a标签也叫做超级链接或超链接</li>
</ul>
</li>
<li>格式: </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;目标窗口位置&quot;&gt;链接文本或图像&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<h3 id="a标签的属性"><a href="#a标签的属性" class="headerlink" title="a标签的属性"></a>a标签的属性</h3><table>
<thead>
<tr>
<th>属性名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>href(hypertext reference)</td>
<td>指定跳转的目标地址</td>
</tr>
<tr>
<td>target</td>
<td>告诉浏览器是否保留原始界面, _blank保留, _self不保留</td>
</tr>
<tr>
<td>title</td>
<td>悬停文本(介绍这个链接, 只有在鼠标移动到超链接上时才会显示)</td>
</tr>
</tbody></table>
<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--a标签--&gt;</span><br><span class="line">&lt;a href="http://www.jianshu.com/u/5bd5e9ed569e"&gt;我的简书&lt;/a&gt;</span><br><span class="line">&lt;a href="http://www.jianshu.com/u/5bd5e9ed569e" title="我的简书"&gt;我的简书&lt;/a&gt;</span><br><span class="line">&lt;a href="http://www.jianshu.com/u/5bd5e9ed569e" title="我的简书" target="_blank"&gt;我的简书&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/4122543-b60bbd6bcf56af2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20170614_13.png"></p>
<h3 id="base标签和a标签结合使用"><a href="#base标签和a标签结合使用" class="headerlink" title="base标签和a标签结合使用"></a>base标签和a标签结合使用</h3><ul>
<li>如果每个a标签都想在新页面中打开,那么逐个设置a标签的<code>target</code>属性比较麻烦, 这时我们可以使用base和a标签结合的方式,一次性设置有a标签都在新页面中打开<ul>
<li>格式: <code>&lt;base target=&quot;_blank&quot; /&gt;</code></li>
</ul>
</li>
<li>注意事项:<ul>
<li><code>base</code>必须嵌套在<code>head</code>标签里面</li>
<li>如果标签上指定了<code>target</code>,<code>base</code>中也指定了<code>target</code>,那么会按照标签上指定的来执行</li>
</ul>
</li>
</ul>
<h3 id="a标签其它用法"><a href="#a标签其它用法" class="headerlink" title="a标签其它用法"></a>a标签其它用法</h3><ul>
<li>假链接(本质是跳转到当前页面)<ul>
<li>格式<code>&lt;a href=&quot;#&quot;&gt;我的简书&lt;/a&gt;</code></li>
<li>格式<code>&lt;a href=&quot;javascript:&quot;&gt;我的简书&lt;/a&gt;</code><ul>
<li>跳转到当前页面指定位置(锚点链接)</li>
<li>1.格式<code>&lt;a href=&quot;#location&quot;&gt;</code>跳转到指定位置<code>&lt;/a&gt;</code></li>
<li>2.在页面的指定位置给任意标签添加一个id属性<ul>
<li>例如 <code>&lt;p id=&quot;location&quot;&gt;</code>这个是目标<code>&lt;/p&gt;</code></li>
</ul>
</li>
</ul>
</li>
<li>跳转到指定页面的指定位置<ul>
<li>格式: <code>&lt;a href=&quot;01-锚点链接.html#location&quot;&gt;跳转到指定位置&lt;/a&gt;</code></li>
<li>只需要在01-锚点链接.html页面添加一个id位置即可</li>
</ul>
</li>
<li>下载(极力不推荐使用)<ul>
<li>例如<code>&lt;a href=&quot;girl.zip&quot;&gt;</code>下载福利资源<code>&lt;a/&gt;</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>对HTML5语言有兴趣的同学,给大家极力推荐:江哥的视频<a href="http://study.163.com/course/introduction.htm?courseId=1003864040" target="_blank" rel="noopener">HTML5 + 跨平台开发</a>,只是不知道会不会继续更新</p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>HTML5标签</tag>
        <tag>CSS</tag>
        <tag>WebStorm</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5学习笔记之表单标签</title>
    <url>/posts/8930c83/</url>
    <content><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/647982-9f6f2cfcfdf04c42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<a id="more"></a>


<ul>
<li>作用: 用于收集用户信息, 让用户填写、选择相关信息</li>
<li>注意事项:<ul>
<li>所有的表单内容，都要写在form标签里面<br>form标签中有两个比较重要的属性action和method</li>
</ul>
</li>
<li>格式:</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">    所有的表单内容，都要写在form标签里面</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h2 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a>input标签</h2><blockquote>
<p>如果说td是表格最核心的标签, 那么input就是表单最核心的标签. nput标签有一个type属性, 这个属性有很多类型的取值, 取值的不同就决定了input标签的功能和外观不同</p>
</blockquote>
<h3 id="明文输入框"><a href="#明文输入框" class="headerlink" title="明文输入框"></a>明文输入框</h3><ul>
<li>作用: 用户可以在输入框内输入内容</li>
<li>账号: <code>&lt;input type=&quot;text&quot;/&gt;</code><ul>
<li>暗文输入框</li>
</ul>
</li>
<li>作用: 用户可以在输入框内输入内容</li>
<li>密码: <code>&lt;input type=&quot;password&quot;/&gt;</code><ul>
<li>给输入框设置默认值</li>
</ul>
</li>
<li>账号: <code>&lt;input type=&quot;text&quot;  value=&quot;tqj&quot;/&gt;</code></li>
<li>密码: <code>&lt;input type=&quot;password&quot; value=&quot;0929&quot;/&gt;</code><ul>
<li>规定输入字段中的字符的最大长度</li>
</ul>
</li>
<li>账号: <code>&lt;input type=&quot;text&quot; name=&quot;fullname&quot; maxlength=&quot;8&quot; /&gt;</code></li>
</ul>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--明文输入框--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>账号: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--暗文输入框--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--p标签换行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>账号: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"tqj"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"0929"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>最大长度: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">maxlength</span>=<span class="string">"5"</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/4122543-39cbc042f6cfbdb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20170615_22.png"></p>
<h3 id="选框"><a href="#选框" class="headerlink" title="选框"></a>选框</h3><ul>
<li>单选框(radio)<ul>
<li>作用: 用户只能从众多选项中选择其中一个</li>
<li>单选按钮，天生是不互斥的，如果想互斥，必须要有相同的name属性</li>
</ul>
</li>
<li>多选框(checkbox)<ul>
<li>作用: 用户只能从众多选项中选择多个</li>
<li>复选框，最好也是有相同的name（虽然他不需要互斥，但是也要有相同的name）</li>
</ul>
</li>
<li>label标签<ul>
<li>作用: label标签不会向用户呈现任何特殊效果。不过，它为鼠标用户改进了可用性</li>
<li>注意事项: 表单元素要有一个id，然后label标签就有一个for属性，for属性和id相同就表示绑定了</li>
<li>所有表单元素都可以通过label绑定</li>
</ul>
</li>
<li>示例代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--单选框--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--checked属性,为默认值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"sex"</span>&gt;</span>性别: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">checked</span> /&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"sex"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> /&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"sex"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> /&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"sex"</span>&gt;</span>妖<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--多选框--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"课程"</span>&gt;</span>课程: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"课程"</span> <span class="attr">checked</span> /&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"课程"</span>&gt;</span>HTML5 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"课程"</span> <span class="attr">checked</span> /&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"课程"</span>&gt;</span>Swift <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"课程"</span> /&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"课程"</span>&gt;</span>OC <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"课程"</span> /&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"课程"</span>&gt;</span>CSS <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/4122543-141c73672aca00ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20170615_1.png"></p>
<h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><h4 id="普通按钮"><a href="#普通按钮" class="headerlink" title="普通按钮"></a>普通按钮</h4><p> 作用: 定义可点击按钮（多数情况下，用于通过 JavaScript 启动脚本）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;button&quot; value=&quot;点我丫&quot; /&gt;</span><br></pre></td></tr></table></figure>

<h4 id="图片按钮"><a href="#图片按钮" class="headerlink" title="图片按钮"></a>图片按钮</h4><p> 作用:定义图像形式的提交按钮</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;image&quot; src=&quot;1.png&quot; /&gt;</span><br></pre></td></tr></table></figure>

<h4 id="还原按钮"><a href="#还原按钮" class="headerlink" title="还原按钮"></a>还原按钮</h4><p> 作用: 定义还原按钮。还原按钮会清除表单中的所有数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;reset&quot; /&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意事项:<br>这个按钮不需要写value自动就有“还原”文字<br>reset只对form表单中表单项有效果</p>
</blockquote>
<h4 id="提交按钮"><a href="#提交按钮" class="headerlink" title="提交按钮"></a>提交按钮</h4><p> 作用:定义提交按钮。提交按钮会把表单数据发送到action属性指定的页面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;submit&quot; /&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意事项:<ul>
<li>这个按钮不需要写value自动就有“提交”文字</li>
<li>要想通过submit提交数据到服务器, 被提交的表单项都必须设置name属性</li>
<li>默认明文传输(GET)不安全, 可以将method属性设置为POST改为非明文传输(学到Ajax再理解)</li>
</ul>
</li>
</ul>
<h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--按钮--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--普通按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点我有奖"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--图片按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"image"</span> <span class="attr">src</span>=<span class="string">"http://note.youdao.com/favicon.ico"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--还原按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--提交按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/4122543-df3952d22685cb6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20170615_3.png"></p>
<h3 id="隐藏域"><a href="#隐藏域" class="headerlink" title="隐藏域"></a>隐藏域</h3><ul>
<li>作用: 定义隐藏的输入字段</li>
<li>暂时不用掌握, 在Ajax中对数据的CRUD操作有非常大的作用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;hidden&quot;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="取色器和日期选择器"><a href="#取色器和日期选择器" class="headerlink" title="取色器和日期选择器"></a>取色器和日期选择器</h3><ul>
<li>取色器: <code>&lt;input type=&quot;color&quot;&gt;</code></li>
<li>日期选色器: <code>&lt;input type=&quot;date&quot;&gt;</code></li>
<li>HTML5中input类型增加了很多type类型, 例如color、date但是都不兼容, 后面讲到浏览器兼容时会重点讲解</li>
<li>亲测,在Mac电脑的Safari浏览器不兼容,只能用谷歌浏览器</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--取色器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>颜色: <span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"color"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--换行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--日期选色器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>时间: <span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/4122543-af39ca426f317aec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20170615_5.png"></p>
<h3 id="数据列表"><a href="#数据列表" class="headerlink" title="数据列表"></a>数据列表</h3><ul>
<li>作用: 给输入框绑定待选项</li>
<li>格式:</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">datalist&gt;</span><br><span class="line">  &lt;option&gt;待选项内容&lt;/option&gt;</span><br><span class="line">&lt;/datalist&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>如何给输入框绑定待选列表<ul>
<li>搞一个输入框</li>
<li>搞一个datalist列表</li>
<li>给datalist列表标签添加一个id</li>
<li>给输入框添加一个list属性,将datalist的id对应的值赋值给list属性即可</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--数据列表--&gt;</span></span><br><span class="line">请选择车型: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">list</span>=<span class="string">"cars"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"cars"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>奔驰<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>宝马<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>奥迪<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>别克<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>奔腾<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>奔跑<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/4122543-5e9e1c3b75a16426.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20170615_6.png"></p>
<p> 当输入某一个字符时,会自动根据datalist列表查询,并显示对应的列表,如图:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4122543-4973010e14b7d6c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20170615_7.png"></p>
<h2 id="多行文本框-文本域"><a href="#多行文本框-文本域" class="headerlink" title="多行文本框(文本域)"></a>多行文本框(文本域)</h2><ul>
<li><p>作用: textarea标签用于在表单中定义多行的文本输入控件</p>
<ul>
<li>cols属性表示columns“列”, 规定文本区内的可见宽度</li>
<li>rows属性表示rows“行”, 规定文本区内的可见高度</li>
</ul>
</li>
<li><p>格式:<br><code>&lt;textarea cols=&quot;30&quot; rows=&quot;10&quot;&gt;</code>默认<code>&lt;/textarea&gt;</code></p>
</li>
<li><p>注意点:</p>
<ul>
<li>可以通过cols和rows来指定输入框的宽度和高度</li>
<li>默认情况下输入框是可以手动拉伸的</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--禁止手动拉伸--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">  textarea&#123;</span><br><span class="line">      resize: none;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="下拉列表"><a href="#下拉列表" class="headerlink" title="下拉列表"></a>下拉列表</h2><ul>
<li>作用: select标签和ul、ol、dl一样，都是组标签. 用于创建表单中的待选列表<ul>
<li>和radio、checkbox一样select也可以设置默认值, 通过selected属性设置(本身默认是第一个选项)</li>
</ul>
</li>
<li>给下拉列表添加分组</li>
<li>示例代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--给下拉表添加分组--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">"杭州市"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>江干区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>西湖区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>滨江区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>下城区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">"烟台市"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>莱山区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>芝罘区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>&gt;</span>北京市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/4122543-c9638bcbcf8e60f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20170615_8.png"></p>
<blockquote>
<p>对HTML5语言有兴趣的同学,给大家极力推荐:江哥的视频<a href="http://study.163.com/course/introduction.htm?courseId=1003864040" target="_blank" rel="noopener">HTML5 + 跨平台开发</a>,只是不知道会不会继续更新</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>HTML5标签</tag>
        <tag>CSS</tag>
        <tag>WebStorm</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac环境下Redis的安装和基本命令的使用</title>
    <url>/posts/52249095/</url>
    <content><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/4122543-e831aa18c01dab69.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Redis"></p>
<a id="more"></a>




<ul>
<li>上文中介绍了<code>NoSQL</code>和<code>MongoDB</code>的相关知识: <a href="https://www.titanjun.top/2018/07/23/MongoDB%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E5%92%8Cpymongo%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">MongoDB的安装及基本命令和pymongo的使用</a></li>
<li>这里主要介绍<code>key-value</code>存储星数据库–<code>Redis</code></li>
</ul>
<h2 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a><code>Redis</code>简介</h2><ul>
<li><code>Redis</code>是完全开源免费的，遵守<code>BSD</code>协议，是一个高性能的<code>key-value</code>数据库</li>
<li><code>Redis</code>与其他<code>key - value</code>缓存产品有以下三个特点：<ul>
<li><code>Redis</code>支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用</li>
<li><code>Redis</code>不仅仅支持简单的<code>key-value</code>类型的数据，同时还提供<code>list</code>，<code>set</code>，<code>zset</code>，<code>hash</code>等数据结构的存储。</li>
<li><code>Redis</code>支持数据的备份，即<code>master-slave</code>模式的数据备份</li>
</ul>
</li>
</ul>
<h3 id="Redis的优势"><a href="#Redis的优势" class="headerlink" title="Redis的优势"></a><code>Redis</code>的优势</h3><ul>
<li>性能极高 –<code>Redis</code>能读的速度是110000次/s,写的速度是81000次/s 。</li>
<li>丰富的数据类型 – <code>Redis</code>支持二进制案例的<code>Strings</code>, <code>Lists</code>, <code>Hashes</code>, <code>Sets</code>及 <code>Ordered Sets</code>数据类型操作。</li>
<li>原子 – <code>Redis</code>的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来</li>
<li>丰富的特性 – <code>Redis</code>还支持<code>publish/subscribe</code>, 通知, <code>key</code>过期等等特性</li>
</ul>
<h3 id="Redis与其他key-value存储有什么不同？"><a href="#Redis与其他key-value存储有什么不同？" class="headerlink" title="Redis与其他key-value存储有什么不同？"></a><code>Redis</code>与其他<code>key-value</code>存储有什么不同？</h3><ul>
<li><code>Redis</code>有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径</li>
<li><code>Redis</code>的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象</li>
<li><code>Redis</code>运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存</li>
<li>在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样<code>Redis</code>可以做很多内部复杂性很强的事情。同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问</li>
</ul>
<h3 id="Redis的安装"><a href="#Redis的安装" class="headerlink" title="Redis的安装"></a><code>Redis</code>的安装</h3><ul>
<li>至于安装, 我这里就不在班门弄斧了, 这里给大家推荐一篇博客: <a href="https://www.cnblogs.com/feijl/p/6879929.html" target="_blank" rel="noopener">mac系统安装redis</a></li>
<li>文章写得非常详细, 建议参考安装</li>
</ul>
<h2 id="Redis命令操作"><a href="#Redis命令操作" class="headerlink" title="Redis命令操作"></a><code>Redis</code>命令操作</h2><ul>
<li><code>Redis</code>命令十分丰富，包括的命令组有<code>Cluster</code>、<code>Connection</code>、<code>Geo</code>、<code>Hashes</code>、<code>HyperLogLog</code>、<code>Keys</code>、<code>Lists</code>、<code>Pub/Sub</code>、<code>Scripting</code>、<code>Server</code>、<code>Sets</code>、<code>Sorted Sets</code>、<code>Strings</code>、<code>Transactions</code>一共14个<code>redis</code>命令组两百多个<code>redis</code>命令</li>
<li><a href="http://redis.cn/commands.html" target="_blank" rel="noopener">Redis中文命令大全</a>, 可以通过检索功能快速查找命令</li>
<li><a href="http://redis.cn/map.html" target="_blank" rel="noopener">查看网站结构图</a>,它以节点图的形式展示了所有redis命令</li>
</ul>
<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul>
<li><code>String</code>是<code>redis</code>最基本的类型，最大能存储512MB的数据</li>
<li><code>String</code>类型是二进制安全的，即可以存储任何数据、比如数字、图片、序列化对象等</li>
</ul>
<h4 id="设置值"><a href="#设置值" class="headerlink" title="设置值"></a>设置值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a、设置键值</span></span><br><span class="line">    set key value</span><br><span class="line">    set titan titan</span><br><span class="line"><span class="comment"># b、设置键值及过期时间，以秒为单位</span></span><br><span class="line">    setex key seconds value</span><br><span class="line">    setex c <span class="number">10</span> good</span><br><span class="line"><span class="comment"># c、设置多个键值</span></span><br><span class="line">    mset key value [key value ……]</span><br><span class="line">    mset d good e nice f bad</span><br></pre></td></tr></table></figure>

<h4 id="获取值"><a href="#获取值" class="headerlink" title="获取值"></a>获取值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a、根据键获取值，如果键不存在则返回None(null 0 nil)</span></span><br><span class="line">    get key</span><br><span class="line">    get d</span><br><span class="line"><span class="comment"># b、根据多个键获取多个值</span></span><br><span class="line">    mget key [key ……]</span><br><span class="line">    mget d f a</span><br></pre></td></tr></table></figure>

<h4 id="运算命令"><a href="#运算命令" class="headerlink" title="运算命令"></a>运算命令</h4><p>前提条件是：值是字符串类型的数字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a、将key对应的值加1</span></span><br><span class="line">    incr key</span><br><span class="line">    incr g</span><br><span class="line"><span class="comment"># b、将key对应的值减1</span></span><br><span class="line">    decr key</span><br><span class="line">    decr h</span><br><span class="line"><span class="comment"># c、将key对应的值加整数</span></span><br><span class="line">    incrby key intnum</span><br><span class="line">    incrby g <span class="number">12</span></span><br><span class="line"><span class="comment"># d、将key对应的值加整数</span></span><br><span class="line">    decrby key intnum</span><br><span class="line">    decrby g <span class="number">11</span></span><br></pre></td></tr></table></figure>

<h4 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a、追加值</span></span><br><span class="line">    append key value</span><br><span class="line">    append d lucky</span><br><span class="line"><span class="comment"># b、获取值长度</span></span><br><span class="line">    strlen key</span><br><span class="line">    strlen d</span><br></pre></td></tr></table></figure>

<h3 id="Keys"><a href="#Keys" class="headerlink" title="Keys"></a>Keys</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、查找键，参数支持正则</span></span><br><span class="line">    keys pattern</span><br><span class="line"><span class="comment"># 2、判断键是否存在，如果存在返回1，不存在返回0</span></span><br><span class="line">    exists key</span><br><span class="line"><span class="comment"># 3、查看键对应的value类型</span></span><br><span class="line">    type key</span><br><span class="line"><span class="comment"># 4、删除键及对应的值</span></span><br><span class="line">    <span class="keyword">del</span> key [key ……]</span><br><span class="line"><span class="comment"># 5、设置过期时间，以秒为单位</span></span><br><span class="line">    expire key seconds</span><br><span class="line"><span class="comment"># 6、查看有效时间，以秒为单位</span></span><br><span class="line">    ttl key</span><br></pre></td></tr></table></figure>

<h3 id="Hashes"><a href="#Hashes" class="headerlink" title="Hashes"></a>Hashes</h3><ul>
<li><code>hash</code>是一个<code>string</code>类型的<code>field</code>和<code>value</code>的映射表，<code>hash</code>特别适合用于存储对象</li>
<li><code>Redis</code>中每个<code>hash</code>可以存储 232 - 1 键值对（40多亿）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、设置</span></span><br><span class="line">    <span class="comment"># a、设置单个值</span></span><br><span class="line">        hset key field value</span><br><span class="line">        hset a1 field a1</span><br><span class="line">    <span class="comment"># b、设置多个值</span></span><br><span class="line">        hmset key field value [field value ……]</span><br><span class="line">        hmset a3 field1 a3 field2 a4</span><br><span class="line"><span class="comment"># 2、获取</span></span><br><span class="line">    <span class="comment"># a、获取一个属性的值</span></span><br><span class="line">        hget key field</span><br><span class="line">        hget a3 field1</span><br><span class="line">    <span class="comment"># b、获取多个属性的值</span></span><br><span class="line">        hmget key filed [filed ……]</span><br><span class="line">        hmget a3 field1 field2</span><br><span class="line">    <span class="comment"># c、获取所有属性和值</span></span><br><span class="line">        hgetall key</span><br><span class="line">        hgetall a3</span><br><span class="line">    <span class="comment"># d、获取所有属性</span></span><br><span class="line">        hkeys key</span><br><span class="line">        hkeys a3</span><br><span class="line">    <span class="comment"># e、获取所有值</span></span><br><span class="line">        hvals key</span><br><span class="line">        hvals a3</span><br><span class="line">    <span class="comment"># f、返回包含数据的个数</span></span><br><span class="line">        hlen key</span><br><span class="line">        hlen a3</span><br><span class="line"><span class="comment"># 3、其它</span></span><br><span class="line">    <span class="comment"># a、判断属性是否存在，存在返回1，不存在返回0</span></span><br><span class="line">        hexists key field</span><br><span class="line">        hexists a3 field3</span><br><span class="line">        hexists a3 field1</span><br><span class="line">    <span class="comment"># b、删除属性及值, 成功返回1, 失败返回0</span></span><br><span class="line">        hdel key field [field ……]</span><br><span class="line">        hdel a2 field</span><br><span class="line">    <span class="comment"># c、返回值的字符串长度</span></span><br><span class="line">        hstrlen key field</span><br><span class="line">        hstrlen a3 field1</span><br></pre></td></tr></table></figure>

<h3 id="列表-List"><a href="#列表-List" class="headerlink" title="列表(List)"></a>列表(List)</h3><ul>
<li><code>Redis</code>列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</li>
<li>一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、设置</span></span><br><span class="line">    <span class="comment"># a、在头部插入</span></span><br><span class="line">        lpush key value [vlaue ……]</span><br><span class="line">        lpush list <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line">    <span class="comment"># b、在尾部插入</span></span><br><span class="line">        rpush key value [vlaue ……]</span><br><span class="line">        rpush list <span class="number">9</span> <span class="number">8</span> <span class="number">7</span> <span class="number">6</span></span><br><span class="line">    <span class="comment"># c、在一个元素的前|后插入新元素</span></span><br><span class="line">        linsert key before|after pivot value</span><br><span class="line">        linsert list before <span class="number">4</span> <span class="number">10</span></span><br><span class="line">        linsert list after <span class="number">3</span> <span class="number">5</span></span><br><span class="line">    <span class="comment"># d、设置指定索引的元素值</span></span><br><span class="line">        lset key index value</span><br><span class="line">        lset list <span class="number">3</span> <span class="number">11</span></span><br><span class="line">        lset list <span class="number">-2</span> <span class="number">21</span></span><br><span class="line">        <span class="comment"># 注意：index从0开始</span></span><br><span class="line">        <span class="comment"># 注意：索引值可以是负数，表示偏移量是从list的尾部开始，如-1表示最后一个元素</span></span><br><span class="line"><span class="comment"># 2、获取</span></span><br><span class="line">    <span class="comment"># a、移除并返回key对应的list的第一个元素</span></span><br><span class="line">        lpop key</span><br><span class="line">        lpop list</span><br><span class="line">    <span class="comment"># b、移除并返回key对应的list的最后一个元素</span></span><br><span class="line">        rpop key</span><br><span class="line">        lpop list </span><br><span class="line">    <span class="comment"># c、返回存储在key的列表中的指定范围的元素</span></span><br><span class="line">        lrange key start end</span><br><span class="line">        lrange list <span class="number">2</span> <span class="number">4</span></span><br><span class="line">        <span class="comment"># 注意：start end都是从0开始</span></span><br><span class="line">        <span class="comment"># 注意：偏移量可以是负数</span></span><br><span class="line"><span class="comment"># 3、其它</span></span><br><span class="line">    <span class="comment"># a、裁剪列表，改为原集合的一个子集</span></span><br><span class="line">        ltrim key start end</span><br><span class="line">        ltrim list <span class="number">0</span> <span class="number">2</span></span><br><span class="line">        <span class="comment"># 注意：start end都是从0开始</span></span><br><span class="line">        <span class="comment"># 注意：偏移量可以是负数</span></span><br><span class="line">    <span class="comment"># b、返回存储在key里的list的长度</span></span><br><span class="line">        llen key</span><br><span class="line">        llen list</span><br><span class="line">    <span class="comment"># c、返回列表中索引对应的值</span></span><br><span class="line">        lindex key index</span><br><span class="line">        lindex list <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="集合-Set"><a href="#集合-Set" class="headerlink" title="集合(Set)"></a>集合(Set)</h3><ul>
<li><code>Redis</code>的<code>Set</code>是<code>String</code>类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</li>
<li>`Redis中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</li>
<li>集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、设置</span></span><br><span class="line">    <span class="comment"># a、添加元素</span></span><br><span class="line">        sadd key member [member ……]</span><br><span class="line">        sadd set1 <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line">        sadd set2 <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span></span><br><span class="line"><span class="comment"># 2、获取</span></span><br><span class="line">    <span class="comment"># a、返回key集合中所有元素</span></span><br><span class="line">        smembers key</span><br><span class="line">        smembers set1</span><br><span class="line">    <span class="comment"># b、返回集合元素个数</span></span><br><span class="line">        scard key</span><br><span class="line">        scard set1</span><br><span class="line"><span class="comment"># 3、</span></span><br><span class="line">    <span class="comment"># a、求多个集合的交集</span></span><br><span class="line">        sinter key [key ……]</span><br><span class="line">        sinter set1 set2</span><br><span class="line">    <span class="comment"># b、求多个集合的差集</span></span><br><span class="line">        sdiff key [key ……]</span><br><span class="line">        sdiff set1 set2</span><br><span class="line">        <span class="comment"># 输出: 1 2 3 </span></span><br><span class="line">        sdiff set2 set1</span><br><span class="line">        <span class="comment"># 输出: 6 7 8</span></span><br><span class="line">        <span class="comment"># 注意: 两个结合前后位置变化输出的结果是不一样的</span></span><br><span class="line">    <span class="comment"># c、求多个集合的合集</span></span><br><span class="line">        sunion key [key ……]</span><br><span class="line">        sunion set1 set2</span><br><span class="line">    <span class="comment"># d、判断元素是否在集合中，存在返回1，不存在返回0</span></span><br><span class="line">        sismember key member</span><br><span class="line">        sismember set1 <span class="number">4</span></span><br><span class="line">        sismember set1 <span class="number">7</span></span><br></pre></td></tr></table></figure>

<h3 id="有序集合-sorted-set"><a href="#有序集合-sorted-set" class="headerlink" title="有序集合(sorted set)"></a>有序集合(sorted set)</h3><ul>
<li>有序集合，元素类型为<code>Sting</code>，元素具有唯一性，不能重复</li>
<li>每个元素都会关联一个<code>double</code>类型的<code>score</code>(表示权重),通过权重的大小排序，元素的<code>score</code>可以相同</li>
<li>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)</li>
<li>集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、设置</span></span><br><span class="line">    <span class="comment"># a、添加</span></span><br><span class="line">        zadd key score member [score member ……]</span><br><span class="line">        zadd slist <span class="number">1</span> a <span class="number">5</span> b <span class="number">3</span> c <span class="number">2</span> d <span class="number">4</span> e</span><br><span class="line"><span class="comment"># 2、获取</span></span><br><span class="line">    <span class="comment"># a、返回指定范围的元素</span></span><br><span class="line">        zrange key start end</span><br><span class="line">        zrange slist <span class="number">0</span> <span class="number">2</span></span><br><span class="line">    <span class="comment"># b、返回元素个数</span></span><br><span class="line">        zcard key</span><br><span class="line">        zcard slist</span><br><span class="line">    <span class="comment"># c、返回有序集合key中，score在min和max之间的元素的个数</span></span><br><span class="line">        zcount key min max</span><br><span class="line">        zcount slist <span class="number">1</span> <span class="number">3</span></span><br><span class="line">    <span class="comment"># d、返回有序集合key中，成员member的score值</span></span><br><span class="line">        zscore key member</span><br><span class="line">        zscore slist e</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>数据库基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Redis</tag>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>NexT主题如何提高文章颜值</title>
    <url>/posts/5a30761b/</url>
    <content><![CDATA[<ul>
<li>博客搭建和主题配置教程: <a href="https://blog.iuops.com/categories/Hexo%E5%8D%9A%E5%AE%A2/">Hexo博客相关分类</a></li>
<li>博客主题配置好了, 也算穿上了华丽的外衣, 但是真正高质量的文章不但要有好的内容更要有美丽的外表结构</li>
<li>所以在提高外在美的同时, 我们也要提高文章的内在美</li>
<li>这里我们就介绍一些在NexT主题下提高文章颜值的方法</li>
</ul>
<a id="more"></a>

<h2 id="文章的模版文件（必读）"><a href="#文章的模版文件（必读）" class="headerlink" title="文章的模版文件（必读）"></a>文章的模版文件（必读）</h2><ul>
<li>Hexo博客新建文章的两种方式:<ul>
<li>直接在~/blog/source/_posts/下新建.md结尾的文件来写新的文章</li>
<li>站点文件夹根目录, 终端输入<code>hexo new post &lt;title&gt;</code>新建的文章</li>
</ul>
</li>
<li>关于文件最上方的参数, <a href="https://hexo.io/zh-cn/docs/variables.html#%E9%A1%B5%E9%9D%A2%E5%8F%98%E9%87%8F" target="_blank" rel="noopener">Hexo变量</a></li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* ！！！！！！！！！！</span></span><br><span class="line"><span class="comment">** 每一项的 : 后面均有一个空格</span></span><br><span class="line"><span class="comment">** 且 : 为英文符号</span></span><br><span class="line"><span class="comment">** ！！！！！！！！！！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">title:</span><br><span class="line"><span class="comment">/* 文章标题，可以为中文 */</span></span><br><span class="line"></span><br><span class="line">date:</span><br><span class="line"><span class="comment">/* 建立日期，如果自己手动添加，请按固定格式</span></span><br><span class="line"><span class="comment">** 就算不写，页面每篇文章顶部的发表于……也能显示</span></span><br><span class="line"><span class="comment">** 只要在主题配置文件中，配置了 created_at 就行</span></span><br><span class="line"><span class="comment">** 那为什么还要自己加上？</span></span><br><span class="line"><span class="comment">** 自定义文章发布的时间</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">updated:</span><br><span class="line"><span class="comment">/* 更新日期，其它与上面的建立日期类似</span></span><br><span class="line"><span class="comment">** 不过在页面每篇文章顶部，是更新于……</span></span><br><span class="line"><span class="comment">** 在主题配置文件中，是 updated_at</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">permalink:</span><br><span class="line"><span class="comment">/* 若站点配置文件下的 permalink 配置了 title</span></span><br><span class="line"><span class="comment">** 则可以替换文章 URL 里面的 title（文章标题）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">categories:</span><br><span class="line"><span class="comment">/* 分类，支持多级，比如：</span></span><br><span class="line"><span class="comment">- technology</span></span><br><span class="line"><span class="comment">- computer</span></span><br><span class="line"><span class="comment">- computer-aided-art</span></span><br><span class="line"><span class="comment">则为technology/computer/computer-aided-art</span></span><br><span class="line"><span class="comment">（不适用于 layout: page）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">tags:</span><br><span class="line"><span class="comment">/* 标签</span></span><br><span class="line"><span class="comment">** 多个可以这样写[标签1,标签2,标签3]</span></span><br><span class="line"><span class="comment">** （不适用于 layout: page）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">description:</span><br><span class="line"><span class="comment">/* 文章的描述，在每篇文章标题下方显示</span></span><br><span class="line"><span class="comment">** 并且作为网页的 description 元数据</span></span><br><span class="line"><span class="comment">** 如果不写，则自动取 &lt;!-- more --&gt;</span></span><br><span class="line"><span class="comment">** 之前的文字作为网页的 description 元数据</span></span><br><span class="line"><span class="comment">** 建议每篇文章都务必加上！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">keywords:</span><br><span class="line"><span class="comment">/* 关键字，并且作为网页的 keywords 元数据</span></span><br><span class="line"><span class="comment">** 如果不写，则自动取 tags 里的项</span></span><br><span class="line"><span class="comment">** 作为网页的 keywords 元数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">comments:</span><br><span class="line"><span class="comment">/* 是否开启评论</span></span><br><span class="line"><span class="comment">** 默认值是 true</span></span><br><span class="line"><span class="comment">** 要关闭写 false</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">layout:</span><br><span class="line"><span class="comment">/* 页面布局，默认值是 post，默认值可以在</span></span><br><span class="line"><span class="comment">** 站点配置文件中修改 default_layout</span></span><br><span class="line"><span class="comment">** 另：404 页面可能用到，将其值改为 false</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">type:</span><br><span class="line"><span class="comment">/* categories，目录页面</span></span><br><span class="line"><span class="comment">** tags，标签页面</span></span><br><span class="line"><span class="comment">** picture，用来生成 group-pictures</span></span><br><span class="line"><span class="comment">** quote？</span></span><br><span class="line"><span class="comment">** https://reuixiy.github.io/uncategorized/2010/01/01/test.html</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">photos:</span><br><span class="line"><span class="comment">/* Gallery support，用来支持画廊 / 相册，用法如下：</span></span><br><span class="line"><span class="comment">- photo_url_1</span></span><br><span class="line"><span class="comment">- photo_url_2</span></span><br><span class="line"><span class="comment">- photo_url_3</span></span><br><span class="line"><span class="comment">https://reuixiy.github.io/uncategorized/2010/01/01/test.html</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">link:</span><br><span class="line"><span class="comment">/* 文章的外部链接</span></span><br><span class="line"><span class="comment">** https://reuixiy.github.io/uncategorized/2010/01/01/test.html</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">image:</span><br><span class="line"><span class="comment">/* 自定义的文章摘要图片，只在页面展示，文章内消失</span></span><br><span class="line"><span class="comment">** 此项只有参考本文 5.14 节配置好，否则请勿添加！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">sticky:</span><br><span class="line"><span class="comment">/* 文章置顶</span></span><br><span class="line"><span class="comment">** 此项只有参考本文 5.15 节配置好，否则请勿添加！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">password:</span><br><span class="line"><span class="comment">/* 文章密码，此项只有参考教程：</span></span><br><span class="line"><span class="comment">** http://shenzekun.cn/hexo的next主题个性化配置教程.html</span></span><br><span class="line"><span class="comment">** 第 24 节，配置好，否则请勿添加！</span></span><br><span class="line"><span class="comment">** 发现还是有 bug 的，就是右键在新标签中打开</span></span><br><span class="line"><span class="comment">** 然后无论是否输入密码，都能看到内容</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="Markdown语法总结"><a href="#Markdown语法总结" class="headerlink" title="Markdown语法总结"></a><code>Markdown</code>语法总结</h2><ul>
<li><code>Markdown</code>的使用优点和基本语法这里就不在介绍了</li>
<li>下面给大家推荐几款<code>Markdown</code>编辑软件<ul>
<li><a href="http://www.sdifen.com/mweb229.html" target="_blank" rel="noopener">MWeb Mac中文破解版</a></li>
<li><a href="http://markeditor.com/app/markeditor" target="_blank" rel="noopener">MarkEditor正版</a></li>
<li><a href="http://www.pc6.com/mac/133223.html" target="_blank" rel="noopener">Markdown for mac</a></li>
<li><a href="http://www.pc6.com/mac/141060.html" target="_blank" rel="noopener">Markdown plus Mac版</a></li>
</ul>
</li>
<li>如果有些用 <code>Markdwon</code> 的语法却达不到预期效果（甚至产生奇怪的 <code>bugs</code>），或者用 <code>Markdwon</code> 的语法无法实现，这时就可以考虑用 <code>HTML</code> 和 <code>CSS</code></li>
</ul>
<h3 id="分隔线和空行"><a href="#分隔线和空行" class="headerlink" title="分隔线和空行"></a>分隔线和空行</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 分隔线 */</span></span><br><span class="line">&lt;hr /&gt;</span><br><span class="line"><span class="comment">/* 注意事项 [6]：在XHTML 中，&lt;hr&gt; 必须被正确地关闭，比如 &lt;hr /&gt; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 空行 */</span></span><br><span class="line">&lt;br /&gt;</span><br><span class="line"><span class="comment">/* 注意事项同上 */</span></span><br></pre></td></tr></table></figure>

<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;blockquote&gt;引用内容&lt;/blockquote&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 如果前后间隙很小，可以像下面这样写 */</span></span><br><span class="line">&lt;p&gt;&lt;blockquote&gt;引用内容&lt;/blockquote&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<h3 id="居中和右对齐"><a href="#居中和右对齐" class="headerlink" title="居中和右对齐"></a>居中和右对齐</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 居中 */</span></span><br><span class="line">&lt;center&gt;内容&lt;/center&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 右对齐 */</span></span><br><span class="line">&lt;div style="text-align:right"&gt;内容&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="字体大小和颜色"><a href="#字体大小和颜色" class="headerlink" title="字体大小和颜色"></a>字体大小和颜色</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">&lt;font color="#xxxxxx" size="number"&gt;内容&lt;/font&gt;</span><br><span class="line"><span class="comment">/* 详细请查看 http://www.w3school.com.cn/tags/tag_font.asp */</span></span><br></pre></td></tr></table></figure>

<h3 id="Todo-list"><a href="#Todo-list" class="headerlink" title="Todo list"></a>Todo list</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;&lt;i class="fa fa-check-square"&gt;&lt;/i&gt; 已完成&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;i class="fa fa-square"&gt;&lt;/i&gt; 未完成&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<h2 id="好玩写作样式"><a href="#好玩写作样式" class="headerlink" title="好玩写作样式"></a>好玩写作样式</h2><ul>
<li>添加一些特殊的样式，可以增加文章的可读性</li>
<li>可以从样式中选几个自己觉得比较好的、经常会用的使用, 太多反而会适得其反</li>
</ul>
<h3 id="主题自带样式"><a href="#主题自带样式" class="headerlink" title="主题自带样式"></a>主题自带样式</h3><p>先看一段效果图</p>
<ol>
<li><i class="fa fa-pencil"></i> 支持 Markdown<br><i>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</i></li>
<li><i class="fa fa-cloud-upload"></i> 一件部署<br><i>只需一条指令即可部署到 Github Pages，或其他网站。</i></li>
<li><i class="fa fa-cog"></i> 丰富的插件<br><i>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade，CoffeeScript。</i></li>
</ol>
<p>这是上述的源码:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">1. &lt;i class="fa fa-pencil"&gt;&lt;/i&gt; 支持 Markdown</span><br><span class="line">&lt;i&gt;Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。&lt;/i&gt;</span><br><span class="line">2. &lt;i class="fa fa-cloud-upload"&gt;&lt;/i&gt; 一件部署</span><br><span class="line">&lt;i&gt;只需一条指令即可部署到 Github Pages，或其他网站。&lt;/i&gt;</span><br><span class="line">3. &lt;i class="fa fa-cog"&gt;&lt;/i&gt; 丰富的插件</span><br><span class="line">&lt;i&gt;Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade，CoffeeScript。&lt;/i&gt;</span><br></pre></td></tr></table></figure>

<p>采用的是 <a href="https://fontawesome.com/icons?from=io" target="_blank" rel="noopener">Font Awesome</a> 的图标，下面给出一些简单的使用例子，更多请查看官网的 <a href="https://fontawesome.com/how-to-use/svg-with-js" target="_blank" rel="noopener">使用示例</a></p>
<p>效果:</p>
<ul>
<li><i class="fa fa-pencil"></i> 铅笔</li>
<li><i class="fa fa-cloud-upload"></i> 上传</li>
<li><i class="fa fa-download"></i> 下载</li>
</ul>
<p>源码:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">- &lt;i class="fa fa-pencil"&gt;&lt;/i&gt; 铅笔</span><br><span class="line">- &lt;i class="fa fa-cloud-upload"&gt;&lt;/i&gt; 上传</span><br><span class="line">- &lt;i class="fa fa-download"&gt;&lt;/i&gt; 下载</span><br></pre></td></tr></table></figure>

<p>放大图效果:</p>
<ul>
<li><i class="fa fa-download"></i> 下载</li>
<li><i class="fa fa-download fa-lg"></i> 下载变大 33%</li>
<li><i class="fa fa-download fa-2x"></i> 下载两倍大</li>
</ul>
<p>源码:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">- &lt;i class="fa fa-download"&gt;&lt;/i&gt; 下载</span><br><span class="line">- &lt;i class="fa fa-download fa-lg"&gt;&lt;/i&gt; 下载变大 33%</span><br><span class="line">- &lt;i class="fa fa-download fa-2x"&gt;&lt;/i&gt; 下载两倍大</span><br></pre></td></tr></table></figure>

<h3 id="代码块高亮"><a href="#代码块高亮" class="headerlink" title="代码块高亮"></a>代码块高亮</h3><p>主题自带样式 代码块高亮</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">​```[language] [title] [url] [link-text]</span><br><span class="line"></span><br><span class="line">`代码`</span><br></pre></td></tr></table></figure>

<ul>
<li>[language] 是代码语言的名称，用来设置代码块颜色高亮，非必须；</li>
<li>[title] 是顶部左边的说明，非必须；</li>
<li>[url] 是顶部右边的超链接地址，非必须；</li>
<li>[link text] 如它的字面意思，超链接的名称，非必须。</li>
</ul>
<p>亲测这 4 项应该是根据空格来分隔，而不是[]，故请不要加[]。除非如果你想写后面两个，但不想写前面两个，那么就必须加[]了，要这样写：[] [] [url] [link text]。</p>
<p>首先关于代码块颜色高亮，高亮的模式可以在主题配置文件中设置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Code Highlight theme</span></span><br><span class="line"><span class="comment"># Available value:</span></span><br><span class="line"><span class="comment">#    normal | night | night eighties | night blue | night bright</span></span><br><span class="line"><span class="comment"># https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line"></span><br><span class="line">highlight_theme: normal</span><br></pre></td></tr></table></figure>

<p>要颜色正确高亮，代码语言的名称肯定要写对，各种支持语言的名称可以查看<a href="https://almostover.ru/2016-07/hexo-highlight-code-styles/" target="_blank" rel="noopener">这篇文章</a>。当然，如果你和我一样懒，可以在站点配置文件_config.yml中设置自动高亮：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line"># 代码自动高亮</span><br><span class="line"><span class="deletion">-  auto_detect: false</span></span><br><span class="line"><span class="addition">+  auto_detect: true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>红色-和绿色+的样式也是一种语言，叫diff，所以你只需在 [language] 这写diff，然后在相应代码前面加上-和+就行了</li>
<li>不过默认的-是绿色，+是红色，与 GitHub 上相反</li>
</ul>
<h3 id="文本居中引用"><a href="#文本居中引用" class="headerlink" title="文本居中引用"></a>文本居中引用</h3><p>效果:</p>
<blockquote class="blockquote-center"><p>我还年轻，<br>我渴望上路。<br>带着最初的激情，<br>追寻着最初的梦想，<br>感受着最初的体验，<br>我们上路吧!</p>
</blockquote>

<p>源码:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125;</span><br><span class="line">我还年轻，</span><br><span class="line">我渴望上路。</span><br><span class="line">带着最初的激情，</span><br><span class="line">追寻着最初的梦想，</span><br><span class="line">感受着最初的体验，</span><br><span class="line">我们上路吧!</span><br><span class="line">&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>

<p>更多 NexT 主题自带的标签样式，请点击：<a href="http://theme-next.iissnan.com/tag-plugins.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/tag-plugins.html</a></p>
<h3 id="主题自带样式-note-标签"><a href="#主题自带样式-note-标签" class="headerlink" title="主题自带样式 note 标签"></a>主题自带样式 note 标签</h3><p>在主题配置文件<code>_config.yml</code>里有一个关于这个的配置，但官方文档没有提供 <code>HTML</code> 的使用方式，个人认为这种方式更简单，也不会产生一些奇怪的显示 <code>bugs</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"># Note tag (bs-callout).</span><br><span class="line">note:</span><br><span class="line">  # 风格</span><br><span class="line">  style: flat</span><br><span class="line">  # 要不要图标</span><br><span class="line">  icons: <span class="literal">true</span></span><br><span class="line">  # 圆角矩形</span><br><span class="line">  border_radius: <span class="number">3</span></span><br><span class="line">  light_bg_offset: <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>效果如下:</p>
<div class="note default"><p>default</p></div>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;div class="note default"&gt;&lt;p&gt;default&lt;/p&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<div class="note primary"><p>primary</p></div>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;div class="note primary"&gt;&lt;p&gt;primary&lt;/p&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<div class="note success"><p>success</p></div>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;div class="note success"&gt;&lt;p&gt;success&lt;/p&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<div class="note info"><p>info</p></div>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;div class="note info"&gt;&lt;p&gt;info&lt;/p&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<div class="note warning"><p>warning</p></div>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;div class="note warning"&gt;&lt;p&gt;warning&lt;/p&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<div class="note danger"><p>danger</p></div>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;div class="note danger"&gt;&lt;p&gt;danger&lt;/p&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<div class="note danger no-icon"><p>danger no-icon</p></div>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;div class="note danger no-icon"&gt;&lt;p&gt;danger no-icon&lt;/p&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>里面的三种风格长啥样？开启图标长啥样？可以查看 <a href="https://github.com/iissnan/hexo-theme-next/pull/1697" target="_blank" rel="noopener">这个页面</a> ，更多的介绍也在这个页面，请自行查看</p>
<h3 id="主题自带样式-label-标签"><a href="#主题自带样式-label-标签" class="headerlink" title="主题自带样式 label 标签"></a>主题自带样式 label 标签</h3><p><code>label</code>标签不建议加载段首, 首先可以在主题配置文件中有配置，需要配置下</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"># Label tag.</span><br><span class="line">label: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>然后效果如下（@ 前面的是<code>label</code>的名字，后面的是要显示的文字）</p>
<span class="label default">default</span>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">&#123;% label <span class="keyword">default</span>@default %&#125;</span><br></pre></td></tr></table></figure>

<span class="label primary">primary</span>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">&#123;% label primary@primary %&#125;</span><br></pre></td></tr></table></figure>

<span class="label success">success</span>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">&#123;% label success@success %&#125;</span><br></pre></td></tr></table></figure>

<span class="label info">info</span>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">&#123;% label info@info %&#125;</span><br></pre></td></tr></table></figure>

<span class="label warning">warning</span>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">&#123;% label warning@warning %&#125;</span><br></pre></td></tr></table></figure>

<span class="label danger">danger</span>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">&#123;% label danger@danger %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="主题自带样式-tabs-标签"><a href="#主题自带样式-tabs-标签" class="headerlink" title="主题自带样式 tabs 标签"></a>主题自带样式 tabs 标签</h3><p>首先可以在主题配置文件中有配置，需要配置下</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"># Tabs tag.</span><br><span class="line">tabs:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  transition:</span><br><span class="line">    tabs: <span class="literal">true</span></span><br><span class="line">    labels: <span class="literal">true</span></span><br><span class="line">  border_radius: <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<div class="tabs" id="选项卡"><ul class="nav-tabs"><li class="tab"><a href="#选项卡-1">选项卡 1</a></li><li class="tab active"><a href="#选项卡-2">选项卡 2</a></li><li class="tab"><a href="#选项卡-3">选项卡 3</a></li></ul><div class="tab-content"><div class="tab-pane" id="选项卡-1"><p><strong>这是选项卡 1</strong> 呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈……</p>
</div><div class="tab-pane active" id="选项卡-2"><p><strong>这是选项卡 2</strong></p>
</div><div class="tab-pane" id="选项卡-3"><p><strong>这是选项卡 3</strong> 哇，你找到我了！φ(≧ω≦*)♪～</p>
</div></div></div>

<p>源码:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">&#123;% tabs 选项卡, <span class="number">2</span> %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**这是选项卡 <span class="number">1</span>** 呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈……</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**这是选项卡 <span class="number">2</span>**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**这是选项卡 <span class="number">3</span>** 哇，你找到我了！φ(≧ω≦*)♪～</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<p>然后上面源码中, 2表示一开始在第二个选项卡，非必须，若数值为-1则隐藏选项卡内容</p>
<h3 id="主题自带样式-按钮"><a href="#主题自带样式-按钮" class="headerlink" title="主题自带样式 按钮"></a>主题自带样式 按钮</h3><p>效果: <a class="btn" href="https://www.titanjun.top" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>点击下载百度</a></p>
<p>源码:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">&#123;% btn https:<span class="comment">//www.baidu.com, 点击下载百度, download fa-lg fa-fw %&#125;</span></span><br></pre></td></tr></table></figure>

<p>关于按钮的更多使用可以前往 <a href="https://almostover.ru/2016-01/hexo-theme-next-test/#Button-tag-test" target="_blank" rel="noopener">这个页面</a> 查看。</p>
<h3 id="自定义样式-引用"><a href="#自定义样式-引用" class="headerlink" title="自定义样式 引用"></a>自定义样式 引用</h3><p>首先由于是自定义的样式，故要自己将 CSS 代码加到custom.styl中</p>
<p>需加入<code>custom.styl</code>的代码：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义的引用样式</span></span><br><span class="line">blockquote.question &#123;</span><br><span class="line">    color: #<span class="number">555</span>;</span><br><span class="line">    border-left: <span class="number">4</span>px solid rgb(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>);</span><br><span class="line">    background-color: rgb(<span class="number">227</span>, <span class="number">242</span>, <span class="number">253</span>);</span><br><span class="line">    border-top-right-radius: <span class="number">3</span>px;</span><br><span class="line">    border-bottom-right-radius: <span class="number">3</span>px;</span><br><span class="line">    margin-bottom: <span class="number">20</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>文字颜色改<code>color</code>的值</li>
<li>背景色改<code>background-color</code>的值</li>
<li>边框颜色和粗细改<code>border-left</code>的值</li>
</ul>
<p>使用:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;blockquote class="question"&gt;内容&lt;/blockquote&gt;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><ul>
<li>文章中所有内容均摘自大佬的文章, 想看原文的朋友可参考</li>
<li><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>自定义样式</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js搭建Web服务器</title>
    <url>/posts/51f133d4/</url>
    <content><![CDATA[<p><img src="https://titanjun.oss-cn-hangzhou.aliyuncs.com/javascript/nodejs.png?x-oss-process=style/titanjun" alt="Node.js"></p>
<a id="more"></a>


<h2 id="Node-js介绍"><a href="#Node-js介绍" class="headerlink" title="Node.js介绍"></a>Node.js介绍</h2><ul>
<li><a href="https://github.com/CoderTitan/NodejsDemo" target="_blank" rel="noopener">Demo地址</a></li>
<li><code>Node.js</code>发布于2009年5月，由Ryan Dahl(瑞恩·达尔)在<code>GitHub</code>上发布了最初版本的部分<code>Node.js</code>包，随后几个月里，有人开始使用Node.js开发应用</li>
<li><code>Node.js</code>是一个基于<code>Chrome JavaScript</code>运行时建立的平台， 是一个<code>Javascript</code>运行环境</li>
<li>Node 是一个服务器程序, 用Javascript这个语言开发服务器</li>
<li><code>Node.js</code>的实质是对<code>Chrome V8</code>引擎进行了封装</li>
<li><code>V8 JavaScript</code> 引擎是 <code>Google</code> 用于其 <code>Chrome</code> 浏览器的底层 JavaScript 引擎</li>
<li>传统意义上的<code>JavaScript</code>运行在浏览器上，这是因为浏览器内核实际上分为两个部分:渲染引擎和 <code>JavaScript</code> 引擎。前者负责渲染<code>HTML + CSS</code>，后者则负责运行<code>JavaScript</code>。Chrome 使用的<code>JavaScript</code> 引擎是 V8，它的速度非常快</li>
<li>参考<a href="https://www.ibm.com/developerworks/cn/opensource/os-nodejs/" target="_blank" rel="noopener">Node.js 究竟是什么？</a>和<a href="https://nodejs.org/dist/latest-v7.x/docs/api/" target="_blank" rel="noopener">Node.js的SDK文档</a></li>
</ul>
<h3 id="不需要搭建Apache等服务器"><a href="#不需要搭建Apache等服务器" class="headerlink" title="不需要搭建Apache等服务器"></a>不需要搭建<code>Apache</code>等服务器</h3><p>为什么Node.js这个服务器语言不需要搭建<code>Apache</code>等服务器</p>
<ul>
<li>因为<code>Node.js</code>是基于V8去封装，所以在下载<code>Node.js</code>的时候，就会自带V8，因此不需要在另外搭建。</li>
<li><code>Node.js</code>和<code>PHP</code>类似都是语言，是需要内核才需要跑起来的，<code>Node.js</code>依赖V8，PHP依赖<code>Apache</code>才能运行</li>
<li>比如OC就需要依赖<code>iPhone</code>手机内核才能跑起来</li>
</ul>
<h3 id="Node-js的优缺点"><a href="#Node-js的优缺点" class="headerlink" title="Node.js的优缺点"></a>Node.js的优缺点</h3><ul>
<li>Node.js优点：<ul>
<li>采用事件驱动、异步编程，为网络服务而设计。其实<code>Javascript</code>的匿名函数和闭包特性非常适合事件驱动、异步编程。而且<code>JavaScript</code>也简单易学，很多前端设计人员可以很快上手做后端设计。</li>
<li><code>Node.js</code>非阻塞模式的IO处理给<code>Node.js</code>带来在相对低系统资源耗用下的高性能与出众的负载能力，非常适合用作依赖其它IO资源的中间层服务。</li>
<li><code>Node.js</code>轻量高效，可以认为是数据密集型分布式部署环境下的实时应用系统的完美解决方案。Node非常适合如下情况：在响应客户端之前，您预计可能有很高的流量，但所需的服务器端逻辑和处理不一定很多。</li>
</ul>
</li>
<li>Node.js缺点：<ul>
<li>可靠性低</li>
<li>单进程，单线程，只支持单核CPU，不能充分的利用多核CPU服务器。</li>
<li>一旦这个进程崩掉，那么整个web服务就崩掉了。</li>
</ul>
</li>
</ul>
<h3 id="Node-js工作原理"><a href="#Node-js工作原理" class="headerlink" title="Node.js工作原理"></a>Node.js工作原理</h3><ul>
<li>传统Web服务器原理(T):传统的网络服务技术，是每个新增一个连接（请求）便生成一个新的线程，这个新的线程会占用系统内存，最终会占掉所有的可用内存。</li>
<li><code>Node.js</code>工作原理(T)：只运行在一个单线程中，使用非阻塞的异步 I/O 调用，所有连接都由该线程处理，也就是一个新的连接，不会开启新的线程，仅仅一个线程去处理多个请求</li>
<li>那么问题来了: 既然<code>Node.js</code>是单线程的, 那么单线程怎么开启异步?怎么工作的？</li>
<li>这里我们将会引入一个事件驱动的概念:<ul>
<li>传统的<code>web server</code>多为基于线程模型: 你启动<code>Apache</code>或者什么<code>server</code>，它开始等待接受连接, 当收到一个连接，<code>server</code>保持连接直到事务请求完成,如果他需要花几微妙时间去读取磁盘或者访问数据库，<code>web server</code>就阻塞了IO操作（这也被称之为阻塞式IO),想提高这样的<code>web server</code>的性能就只有启动更多的线程。</li>
<li><code>Node.Js</code>使用事件驱动模型，类似iOS的<code>Runloop</code>,把事件存放到一个循环中，然后取出来处理，当<code>web server</code>接收到请求，放入事件队列，然后去服务下一个web请求。当这个请求完成，从事件队列中取出来执行处理，将结果返回给用户。因为<code>webserver</code>一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）</li>
</ul>
</li>
</ul>
<h3 id="Node-js使用介绍"><a href="#Node-js使用介绍" class="headerlink" title="Node.js使用介绍"></a>Node.js使用介绍</h3><ul>
<li><code>Node.js</code>使用Module模块去划分不同的功能，以简化App开发，Module就是模块，跟组件化差不多，一个功能一个模块。</li>
<li><code>Node.js</code>内建了一个HTTP服务器，可以轻而易举的实现一个网站和服务器的组合，不像PHP那样，在使用PHP的时候，必须先搭建一个Apache之类的HTTP服务器，然后通过HTTP服务器的模块加载CGI调用，才能将PHP脚本的执行结果呈现给用户</li>
<li><code>require()</code> 函数，用于在当前模块中加载和使用其他模块；</li>
</ul>
<h2 id="Express模块-框架"><a href="#Express模块-框架" class="headerlink" title="Express模块(框架)"></a>Express模块(框架)</h2><ul>
<li>Express是Node.JS第三方库</li>
<li>Express可以处理各种HTTP请求</li>
<li>Express是目前最流行的基于Node.js的Web开发框架，</li>
<li>Express框架建立在node.js内置的http模块上，可以快速地搭建一个Web服务器</li>
</ul>
<h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><ul>
<li>打开终端，输入node -v，先查看是否已经安装</li>
<li>如果没有安装，就需要安装node软件</li>
<li>参考<a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">Node.js 安装配置</a></li>
</ul>
<h3 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h3><ul>
<li>npm是随同<code>NodeJS</code>一起安装的包管理工具，用于下载<code>NodeJS</code>第三方库。</li>
<li>类似iOS开发中<code>cocoapods</code>，用于安装第三方框架</li>
<li>新版的<code>NodeJS</code>已经集成了npm，所以只要安装好Node.JS就好<h3 id="下载第三方模块Express"><a href="#下载第三方模块Express" class="headerlink" title="下载第三方模块Express"></a>下载第三方模块<code>Express</code></h3></li>
<li>首先先创建项目<ul>
<li>新建一个文件夹, 打开终端</li>
<li>cd到当前文件夹, 创建一个js文件, 如: <code>touch app.js</code></li>
</ul>
</li>
<li>安装<code>package.json</code>文件, 类似于CocoaPods中的<code>Podfile</code>   - cd到当前文件夹<ul>
<li>终端输入: <code>npm init</code></li>
</ul>
</li>
<li>最后安装express库 <ul>
<li>终端输入: <code>npm install express --save</code></li>
</ul>
</li>
</ul>
<h2 id="搭建简单的Http服务器"><a href="#搭建简单的Http服务器" class="headerlink" title="搭建简单的Http服务器"></a>搭建简单的Http服务器</h2><h3 id="服务器种类"><a href="#服务器种类" class="headerlink" title="服务器种类"></a>服务器种类</h3><ul>
<li>Web服务器: 处理<code>HTTP</code>请求的服务器</li>
<li><code>Socket</code>服务器(即时通讯): 通过<code>socket</code>传输<ul>
<li>即时通讯(IM): 允许两人或多人使用网路即时的传递文字讯息、档案、语音与视频交流</li>
</ul>
</li>
<li>流媒体服务器: 音视频处理程序, 接受流媒体格式文件,<code>flv/ts</code>等</li>
</ul>
<p>简单效果图</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4122543-be8bdfac135d99e8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="请求返回结果.jpg"></p>
<h3 id="开始搭建Http服务器"><a href="#开始搭建Http服务器" class="headerlink" title="开始搭建Http服务器"></a>开始搭建Http服务器</h3><ul>
<li>require加载模块</li>
<li>监听端口号和网址, 端口号不能使用已经占用的端口比如（80），每个服务器相当于一个app，都需要端口，才能找到入口</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建HTTP服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 加载http模块</span></span><br><span class="line">var http = require(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 创建http服务器</span></span><br><span class="line"><span class="comment">// 参数: 请求的回调, 当有人访问服务器的时候,就会自动调用回调函数</span></span><br><span class="line">var server = http.createServer(function (request, response) &#123;</span><br><span class="line">    console.log(<span class="string">'有人访问了服务器'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回调数据</span></span><br><span class="line">    response.write(<span class="string">'Hello, My Love'</span>)</span><br><span class="line">    response.end()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 绑定端口</span></span><br><span class="line">server.listen(<span class="number">3030</span>, <span class="string">'192.168.2.11'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 执行</span></span><br><span class="line">console.log(<span class="string">'执行了3030'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="开始运行服务器"><a href="#开始运行服务器" class="headerlink" title="开始运行服务器"></a>开始运行服务器</h3><ul>
<li>那么还是要打开终端</li>
<li>输入: <code>node app.js</code><ul>
<li><code>app.ja</code>为文件名</li>
</ul>
</li>
</ul>
<h2 id="express搭建服务器"><a href="#express搭建服务器" class="headerlink" title="express搭建服务器"></a>express搭建服务器</h2><h3 id="express框架的使用"><a href="#express框架的使用" class="headerlink" title="express框架的使用"></a>express框架的使用</h3><ul>
<li>引入express模块</li>
<li>创建express服务器</li>
<li>get, post请求中: <ul>
<li>参数一: 请求根路径,若传<code>&#39;/&#39;</code>, 则url为: <code>http://192.168.0.0:3030</code></li>
<li>若传<code>&#39;/home&#39;</code>, 则url为: <code>http://192.168.0.0:3030/home</code></li>
<li>参数二: 请求数据的回调函数</li>
</ul>
</li>
<li>监听端口: 默认url为当前电脑的IP地址</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* express的服务器 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 导入express</span></span><br><span class="line">var express = require(<span class="string">'express'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 创建express服务器</span></span><br><span class="line">var server = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 访问服务器(get或者post)</span></span><br><span class="line"><span class="comment">//参数一: 请求根路径</span></span><br><span class="line"><span class="comment">//3.1 get请求</span></span><br><span class="line">server.get(<span class="string">'/'</span>, function (request, response) &#123;</span><br><span class="line">    <span class="comment">// console.log(request)</span></span><br><span class="line">    response.send(<span class="string">'get请求成功'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.2 post请求</span></span><br><span class="line">server.post(<span class="string">'/'</span>, function (request, response) &#123;</span><br><span class="line">    response.send(<span class="string">'post请求成功'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 绑定端口</span></span><br><span class="line">server.listen(<span class="number">4040</span>)</span><br><span class="line">console.log(<span class="string">'启动4040'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><ul>
<li>路由:针对不同的URL有不同的处理方式，比如以后会有首页，发现模块，每个模块处理不一样。</li>
<li>添加url路径,根据不同路径，显示不同内容</li>
<li>路由句柄(索引):执行完一个函数，在执行下一个 ,因为有时候处理一个请求，需要做很多其他事情，写在一起业务逻辑不好分开,所以多弄几个行数</li>
<li>函数一定要添加next参数，一定要调用next(),才会进行下面操作，代码使一行一行执行，解释性语言</li>
<li></li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* express的路由 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 导入express</span></span><br><span class="line">var express = require(<span class="string">'express'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 创建express服务器</span></span><br><span class="line">var server = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 访问服务器(get或者post)</span></span><br><span class="line"><span class="comment">//参数一: 请求根路径</span></span><br><span class="line"><span class="comment">//3.1 get请求</span></span><br><span class="line"><span class="comment">// next: 路由句柄</span></span><br><span class="line">server.get(<span class="string">'/home'</span>, function (request, response, next) &#123;</span><br><span class="line"></span><br><span class="line">    console.log(<span class="string">'从据库获取数据'</span>)</span><br><span class="line">    next()</span><br><span class="line"></span><br><span class="line">&#125;, function (request, response) &#123;</span><br><span class="line"></span><br><span class="line">    response.send(<span class="string">'这是请求返回的数据'</span>)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 绑定端口</span></span><br><span class="line">server.listen(<span class="number">4040</span>)</span><br><span class="line">console.log(<span class="string">'启动4040'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><ul>
<li>优化代码，使代码清晰可读</li>
<li>原理，发送一个请求给服务器的时候，会被中间件拦截，先由中间件处理，每个中间件都有一个回调函数作为参数,拦截到参数，就会自动执行回调函数。</li>
<li>注意：有中间件use，会先执行中间件的回调函数，然后才会调用get或者<code>post</code>的回调函数，也就是当监听到请求，先执行中间件，才会到get,post请求。</li>
<li>use是<code>express</code>注册中间件的方法</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* express的中间件 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 导入express</span></span><br><span class="line">var express = require(<span class="string">'express'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 创建express服务器</span></span><br><span class="line">var server = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 创建中间件:use</span></span><br><span class="line"><span class="comment">//截取请求, 拦截回调</span></span><br><span class="line">server.use(<span class="string">'/'</span>, function (request, response, next) &#123;</span><br><span class="line">    console.log(<span class="string">'执行中间件'</span>)</span><br><span class="line">    <span class="comment">// console.log('获取数据库数据')</span></span><br><span class="line">    console.log(request.query.page)</span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 访问服务器(get或者post)</span></span><br><span class="line"><span class="comment">//参数一: 请求根路径</span></span><br><span class="line"><span class="comment">//4.1 get请求</span></span><br><span class="line">server.get(<span class="string">'/home'</span>, function (request, response) &#123;</span><br><span class="line">    <span class="comment">// console.log(request)</span></span><br><span class="line">    response.send(<span class="string">'get参数请求成功'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//5. 绑定端口</span></span><br><span class="line">server.listen(<span class="number">4040</span>)</span><br><span class="line">console.log(<span class="string">'启动4040'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="get请求参数"><a href="#get请求参数" class="headerlink" title="get请求参数"></a>get请求参数</h3><ul>
<li>request.query会把请求参数包装成字典对象，直接通过点就能获取参数</li>
<li>这里的请求地址为: <code>http://192.168.2.11:4040/home?page=12</code></li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* express的中间件 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 导入express</span></span><br><span class="line">var express = require(<span class="string">'express'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 创建express服务器</span></span><br><span class="line">var server = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 访问服务器(get或者post)</span></span><br><span class="line"><span class="comment">//参数一: 请求根路径</span></span><br><span class="line"><span class="comment">//4.1 get请求</span></span><br><span class="line">server.get(<span class="string">'/home'</span>, function (request, response) &#123;</span><br><span class="line">    <span class="comment">// console.log(request)</span></span><br><span class="line">    console.log(request.query.page)</span><br><span class="line">    response.send(<span class="string">'get参数请求成功'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//5. 绑定端口</span></span><br><span class="line">server.listen(<span class="number">4040</span>)</span><br><span class="line">console.log(<span class="string">'启动4040'</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>输出结果</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">启动4040</span><br><span class="line">12</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="post请求参数"><a href="#post请求参数" class="headerlink" title="post请求参数"></a>post请求参数</h3><ul>
<li>这里先让我们看一下request的部分参数</li>
<li></li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">headers: </span><br><span class="line">   &#123; </span><br><span class="line">   <span class="comment">//请求头</span></span><br><span class="line">     host: <span class="string">'192.168.2.11:4040/home'</span>,</span><br><span class="line">     <span class="comment">//保持长连接</span></span><br><span class="line">     connection: <span class="string">'keep-alive'</span>,</span><br><span class="line">     <span class="string">'cache-control'</span>: <span class="string">'max-age=0'</span>,</span><br><span class="line">     <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36'</span>,</span><br><span class="line">     <span class="string">'upgrade-insecure-requests'</span>: <span class="string">'1'</span>,</span><br><span class="line">     <span class="comment">//可接受的数据解析方式</span></span><br><span class="line">     accept: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8'</span>,</span><br><span class="line">     <span class="string">'accept-encoding'</span>: <span class="string">'gzip, deflate'</span>,</span><br><span class="line">     <span class="string">'accept-language'</span>: <span class="string">'zh-CN,zh;q=0.9'</span>,</span><br><span class="line">     <span class="string">'if-none-match'</span>: <span class="string">'W/"15-H7HlVCzzVfmRL56LAnLfNUaMM+8"'</span> </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用http发送请求，需要设置<code>content-type</code>字段</li>
<li><code>content-type</code>字段<ul>
<li><code>application/x-www-form-urlencoded</code>(普通请求，默认一般使用这种)</li>
<li><code>application/json</code>(带有json格式的参数，需要使用这个，比如参数是字典或者数组)</li>
<li><code>multipart/form-data</code>(传输文件，文件上传使用这个)</li>
</ul>
</li>
<li>AFN框架中<code>AFHTTPRequestSerializer</code>使用的是<code>application/x-www-form-urlencoded</code>，<code>AFJSONRequestSerializer</code>使用的是<code>application/json</code></li>
<li><code>Node.JS</code>需要使用<code>body-parser</code>模块,解析post请求参数</li>
<li>可以采用中间件的方式解析post请求参数<ul>
<li>注意<code>bodyParser.urlencoded</code>参数是一个字典，需要添加`{}``包装</li>
<li>extends必传参数，是否展开</li>
</ul>
</li>
<li>完整代码示例</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建Post请求</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 导入express</span></span><br><span class="line">var express = require(<span class="string">'express'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 加载模块</span></span><br><span class="line">var bodyParse = require(<span class="string">'body-parser'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 创建服务器</span></span><br><span class="line">var server = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 生成解析器</span></span><br><span class="line"><span class="comment">// application/x-www-form-urlencoded</span></span><br><span class="line">var urlencoded = bodyParse.urlencoded(&#123; extends:<span class="literal">true</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// application/json</span></span><br><span class="line">var jsonParser = bodyParse.json()</span><br><span class="line"></span><br><span class="line"><span class="comment">//5. 中间件: 把请求体参数 存放到request.body</span></span><br><span class="line">server.use(<span class="string">'./home'</span>, jsonParser)</span><br><span class="line"></span><br><span class="line"><span class="comment">//6. 请求数据</span></span><br><span class="line"><span class="comment">// request:request请求头,请求体</span></span><br><span class="line">server.post(<span class="string">'./home'</span>, function (request, response) &#123;</span><br><span class="line">    <span class="comment">//解析post请求参数</span></span><br><span class="line">    console.log(request.body)</span><br><span class="line">    response.send(request.body)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//7. 绑定端口</span></span><br><span class="line">server.listen(<span class="number">5050</span>)</span><br></pre></td></tr></table></figure>

<div class="note info"><p>[Demo地址](https://github.com/CoderTitan/WebServer)</p></div>

<hr>
<blockquote>
<p>参考文章:</p>
<ol>
<li><a href="http://blog.csdn.net/kaosini/article/details/8089597" target="_blank" rel="noopener">Node.js优缺点</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/opensource/os-nodejs/" target="_blank" rel="noopener">Node.js 究竟是什么？</a></li>
<li><a href="http://www.expressjs.com.cn/4x/api.html" target="_blank" rel="noopener">Express 4.x API 中文手册</a></li>
<li><a href="https://msdn.microsoft.com/zh-cn/library/aa155110.aspx" target="_blank" rel="noopener">JavaScript语言参考</a></li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>Node.js笔记</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Web</tag>
        <tag>Express</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中模块的使用</title>
    <url>/posts/fe2495d8/</url>
    <content><![CDATA[<ul>
<li>做过开发工作的童鞋应该都知道, 在一个完整的项目中, 会有大量的代码, 而且慢慢代码量会越来越多, 代码也就越来越难以维护;</li>
<li>随着你的程序变得越来越长，你可能想要将它分割成几个更易于维护的文件。</li>
<li>你也可能想在不同的程序中使用顺手的函数，而不是把代码在它们之间中拷来拷去</li>
<li>为了解决类似问题, 我们把很多功能相似的函数分组, 分别放到不同的文件中,这样每个文件中的代码相对较少, 且函数功能相似;</li>
<li><a href="https://github.com/CoderTitan/PythonDemo" target="_blank" rel="noopener">GitHub代码示例目地址</a></li>
</ul>
<a id="more"></a>

<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="模块简述"><a href="#模块简述" class="headerlink" title="模块简述"></a>模块简述</h3><ul>
<li>在<code>Python</code>中提供了一个方法可以从文件中获取定义，在脚本或者解释器的一个交互式实例中使用, 这样的文件被称为模块；</li>
<li>模块中的定义可以导入到另一个模块或主模块中（在脚本执行时可以调用的变量集位于最高级，并且处于计算器模式）</li>
<li>模块是包括 Python 定义和声明的文件。文件名就是模块名加上 .py 后缀。</li>
<li>模块的模块名（做为一个字符串）可以由全局变量 <code>__name__</code> 得到</li>
<li>模块主要分为内置模块, 三方模块和自定义模块</li>
</ul>
<h3 id="模块优点"><a href="#模块优点" class="headerlink" title="模块优点"></a>模块优点</h3><ul>
<li>提高了代码的可维护性</li>
<li>提高了代码的服用度, 当一个模块完毕, 可以被多个地方引用</li>
<li>可避免函数名和变量名的冲突</li>
</ul>
<h3 id="标准库模块"><a href="#标准库模块" class="headerlink" title="标准库模块"></a>标准库模块</h3><p>下面是一个使用<code>python</code>标准库中模块的例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">print(<span class="string">'命令行参数如下:'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sys.argv:</span><br><span class="line">   print(i)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\n\nPython 路径为：'</span>, sys.path, <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果如下</span></span><br><span class="line">命令行参数如下:</span><br><span class="line">../GitHub/PythonDemo/PythonStudy/<span class="number">7</span>-模块/<span class="number">1</span>-模块概述.py</span><br><span class="line"></span><br><span class="line">Python 路径为： [<span class="string">'/Users/../GitHub/PythonDemo/PythonStudy/7-模块'</span>, <span class="string">'/Users/../GitHub/PythonDemo/PythonStudy'</span>, <span class="string">'/Library/Frameworks/Python.framework/Versions/3.6/lib/python36.zip'</span>, <span class="string">'/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6'</span>, <span class="string">'/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/lib-dynload'</span>, <span class="string">'/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages'</span>, <span class="string">'/Applications/PyCharm.app/Contents/helpers/pycharm_matplotlib_backend'</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li><code>argv</code>: 获取命令行参数的列表</li>
<li><code>import sys</code> 引入<code>python</code>标准库中的<code>sys.py</code>模块</li>
<li><code>import</code>: 这是引入一个模块的方法(后面会提到)</li>
<li><code>sys.path</code>: 包含了一个<code>Python</code>解释器自动查找所需模块的路径的列表</li>
</ul>
<h2 id="自定义模块"><a href="#自定义模块" class="headerlink" title="自定义模块"></a>自定义模块</h2><ul>
<li><code>Python</code>中不但可以使用第三方模块和系统模块, 同时我们还可以使用自定义模块, </li>
<li>在<code>Python</code>中一个<code>.py</code>文件就是一个模块</li>
<li>下面是我自定义的一个<code>Titan.py</code>模块, 代码如下</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'这是Titan模块'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义变量</span></span><br><span class="line">age = <span class="number">20</span></span><br><span class="line">name = <span class="string">'titan'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayGood</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'good'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayNice</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'nice'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayBad</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'bad'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><h3 id="import方式"><a href="#import方式" class="headerlink" title="import方式"></a><code>import</code>方式</h3><p>在<code>Python</code>中导入另一个文件或者模块, 受用的语法是<code>import</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入单个或多个模块</span></span><br><span class="line"><span class="keyword">import</span> module1[, module2[,... moduleN]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># 一次导入多个模块</span></span><br><span class="line"><span class="keyword">import</span> time, random, os</span><br><span class="line"><span class="comment"># 一次导入一个模块</span></span><br><span class="line"><span class="keyword">import</span> calendar</span><br></pre></td></tr></table></figure>

<div class="note warning"><p>需要注意的是: </p></div>

<ul>
<li>一个模块只会被导入一次，不管你执行了多少次<code>import</code>, 可以防止模块被重复引用</li>
<li>引入任何模块时(包括自定义模块), 不用加<code>.py</code>后缀</li>
<li>当我们使用<code>import</code>语句的时候，<code>Python</code>解释器是怎样找到对应的文件的呢？<ul>
<li>这就涉及到<code>Python</code>的搜索路径，搜索路径是由一系列目录名组成的，<code>Python</code>解释器就依次从这些目录中去寻找所引入的模块。</li>
<li>这看起来很像环境变量，事实上，也可以通过定义环境变量的方式来确定搜索路径。</li>
<li>搜索路径是在<code>Python</code>编译或安装的时候确定的，安装新的库应该也会修改。搜索路径被存储在<code>sys</code>模块中的<code>path</code>变量</li>
</ul>
</li>
</ul>
<div class="note info"><p>使用示例</p></div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Titan</span><br><span class="line"></span><br><span class="line">Titan.sayBad()</span><br><span class="line">Titan.sayGood()</span><br><span class="line">print(Titan.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果:</span></span><br><span class="line">bad</span><br><span class="line">good</span><br><span class="line">titan</span><br></pre></td></tr></table></figure>

<h3 id="from…import方式"><a href="#from…import方式" class="headerlink" title="from…import方式"></a><code>from…import</code>方式</h3><p>从模块中导入一个指定的部分到当前的命名空间, 同样也可以导入一个模块中的多个部分(或者导入多个方法或变量), 格式如下:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">from modname import name1[, name2[, ... nameN]]</span><br></pre></td></tr></table></figure>

<div class="note info"><p>使用示例</p></div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Titan <span class="keyword">import</span> sayGood, sayBad, age</span><br><span class="line"></span><br><span class="line">sayBad()</span><br><span class="line">sayGood()</span><br><span class="line">print(age)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果:</span></span><br><span class="line">bad</span><br><span class="line">good</span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure>

<div class="note warning"><p>需要注意的是:</p></div>

<p>这种方式, 可能会导致和本文件中定义的方法或者变量重名, 这里需要注意</p>
<h3 id="from…import-方式"><a href="#from…import-方式" class="headerlink" title="from…import*方式"></a><code>from…import*</code>方式</h3><p>把一个模块中所有的内容, 全部倒入当前命名空间, 但是最好不要过多地使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式:</span></span><br><span class="line"><span class="keyword">from</span> modname <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用:</span></span><br><span class="line"><span class="keyword">from</span> Titan <span class="keyword">import</span> *</span><br><span class="line">sayGood()</span><br><span class="line">print(age)</span><br></pre></td></tr></table></figure>

<h2 id="模块内置属性和函数"><a href="#模块内置属性和函数" class="headerlink" title="模块内置属性和函数"></a>模块内置属性和函数</h2><h3 id="name-属性"><a href="#name-属性" class="headerlink" title="__name__属性"></a><code>__name__</code>属性</h3><ul>
<li>除了包含函数定义外，模块也可以包含可执行语句, 这些语句一般用来初始化模块, 他们仅在第一次被导入的地方执行一次</li>
<li>模块就是一个可执行的<code>.py</code>文件, 一个模块呗另一个程序引用, 模块中的一些可执行语句便会执行</li>
<li>如果我们不想让模块中的某些代码执行, 可以用<code>__name__</code>属性来使程序仅调用模块中的一部分</li>
<li>现在我们将模块中的代码修改如下:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'这是Titan模块'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayGood</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'good'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayNice</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'nice'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayBad</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'bad'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    age = <span class="number">20</span></span><br><span class="line">    name = <span class="string">'titan'</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>name</code>和<code>main</code>前后都是双下划线</li>
<li>每一个模块中都有一个<code>__name__</code>属性, 当其值等于<code>__main__</code>时, 表明该模块自身在执行, 否则被引入了其他文件</li>
<li>当前文件如果为程序的入口文件, 则<code>__name__</code>属性的值为<code>__main__</code></li>
</ul>
<h3 id="dir-函数"><a href="#dir-函数" class="headerlink" title="dir()函数"></a><code>dir()</code>函数</h3><ul>
<li>内置的函数<code>dir()</code> 可以找到模块内定义的所有名称, 以一个字符串列表的形式返回</li>
<li>如果没有给定参数，那么<code>dir()</code>函数会罗列出当前定义的所有名称</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Titan</span><br><span class="line"></span><br><span class="line">print(dir(Titan))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果:</span></span><br><span class="line">[<span class="string">'__builtins__'</span>, <span class="string">'__cached__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__file__'</span>, <span class="string">'__loader__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__spec__'</span>, <span class="string">'age'</span>, <span class="string">'name'</span>, <span class="string">'sayBad'</span>, <span class="string">'sayGood'</span>, <span class="string">'sayNice'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(dir())</span><br><span class="line"><span class="comment"># 输出结果:</span></span><br><span class="line">[<span class="string">'Titan'</span>, <span class="string">'__annotations__'</span>, <span class="string">'__builtins__'</span>, <span class="string">'__cached__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__file__'</span>, <span class="string">'__loader__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__spec__'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里定义一个新的变量</span></span><br><span class="line">sum = <span class="number">30</span></span><br><span class="line">print(dir())</span><br><span class="line"><span class="comment"># 输出结果:</span></span><br><span class="line">[<span class="string">'Titan'</span>, <span class="string">'__annotations__'</span>, <span class="string">'__builtins__'</span>, <span class="string">'__cached__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__file__'</span>, <span class="string">'__loader__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__spec__'</span>, <span class="string">'sum'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把定义的变量删除后</span></span><br><span class="line"><span class="keyword">del</span> sum</span><br><span class="line">print(dir())</span><br><span class="line"><span class="comment"># 输出结果:</span></span><br><span class="line">[<span class="string">'Titan'</span>, <span class="string">'__annotations__'</span>, <span class="string">'__builtins__'</span>, <span class="string">'__cached__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__file__'</span>, <span class="string">'__loader__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__spec__'</span>]</span><br></pre></td></tr></table></figure>

<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>这里我们先思考这样一个问题: 在同一个项目中有两个或两个以上的开发者分别定义了相同名字的模块(当然狮子啊不同的目录中, 同一个目录下不可能创建出相同名字的文件), 那么模块该如何调用</p>
<div class="note success"><p>解决</p></div>

<ul>
<li>为了解决上述模块命名的冲突, 引入了按照目录来组织模块的方法, 成为包</li>
<li>包是一种管理<code>Python</code>模块命名空间的形式，采用”点模块名称”</li>
<li>引入包以后, 只要顶层的包不与其他人的发生冲突, 那么模块就都不会与别人的发生冲突</li>
<li>所谓顶层的包指的是上一层的文件目录</li>
<li>同一个包可以包含多个模块</li>
<li>例如: 名为<code>A.B</code>的模块表示了名为<code>A</code>的包中名为<code>B</code>的子模块</li>
</ul>
<div class="note warning"><p>需要注意的是:</p></div>

<p>在每一个包内(模块的同级目录下)必须要创建一个名为<code>__init__.py</code>的文件, 主要是为了避免一些滥竽充数的名字, 目前该文件内可以什么都不用写, 如图所示:</p>
<p><img src="http://p7hfnfk6u.bkt.clouddn.com/Snip20180531_1.png" alt="包.png"></p>
<div class="note success"><p>调用方法</p></div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> a.Titan</span><br><span class="line"><span class="keyword">import</span> b.Titan</span><br><span class="line"><span class="keyword">import</span> b.coder</span><br><span class="line"></span><br><span class="line">a.Titan.sayGood()</span><br><span class="line">b.Titan.sayGood()</span><br><span class="line">b.coder.sayGood()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果:</span></span><br><span class="line">good--a</span><br><span class="line">good--b</span><br><span class="line">good--coder</span><br></pre></td></tr></table></figure>

<h2 id="安装使用第三方模块"><a href="#安装使用第三方模块" class="headerlink" title="安装使用第三方模块"></a>安装使用第三方模块</h2><h3 id="pip简介"><a href="#pip简介" class="headerlink" title="pip简介"></a><code>pip</code>简介</h3><ul>
<li>在<code>Python</code>中第三方库是通过<code>pip</code>安装和管理的, <code>pip</code>就像<code>iOS</code>中的<code>pod</code>一样, 负责安装和管理第三方库</li>
<li>在<code>Mac</code>和<code>Linux</code>系统中<code>pip</code>是默认安装过的, 一般无需重新安装, 如有问题, 请自行百度解决</li>
<li>在<code>Mac</code>系统中会有一个默认的<code>Python2.7</code>版本的, 我自己安装了一个3.6的版本, 自然默认也安装了<code>pip</code></li>
<li>下面是一些<code>Python3.6</code>中<code>pip</code>的命令, 这里需要以<code>pip3</code>为命令头执行</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前pip版本</span></span><br><span class="line">pip3 -V</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装第三方库</span></span><br><span class="line">pip3 install ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对pip进行升级</span></span><br><span class="line">pip3 install --upgrade pip3</span><br></pre></td></tr></table></figure>

<h3 id="安装第三方库"><a href="#安装第三方库" class="headerlink" title="安装第三方库"></a>安装第三方库</h3><ul>
<li><code>Mac</code>系统安装第三方库, 直接打开终端执行安装命令即可</li>
<li><code>Pillow</code>已经是<code>Python</code>平台事实上的图像处理标准库了</li>
<li><code>PIL</code>功能非常强大，但<code>API</code>却非常简单易用</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">pip3 install Pillow</span><br></pre></td></tr></table></figure>

<h3 id="第三方模块的使用"><a href="#第三方模块的使用" class="headerlink" title="第三方模块的使用"></a>第三方模块的使用</h3><h4 id="操作图像"><a href="#操作图像" class="headerlink" title="操作图像"></a>操作图像</h4><p>下面是最常见的图像缩放操作示例代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开一个jpg图像文件，注意是当前路径:</span></span><br><span class="line">im = Image.open(<span class="string">'titan.jpg'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得图像尺寸</span></span><br><span class="line">w, h = im.size</span><br><span class="line">print(<span class="string">'image size: %sx%s'</span> % (w, h))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 缩放到50%:</span></span><br><span class="line">im.thumbnail((w//<span class="number">2</span>, h//<span class="number">2</span>))</span><br><span class="line">print(<span class="string">'image to: %sx%s'</span> % (w//<span class="number">2</span>, h//<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把缩放后的图像用jpeg格式保存:</span></span><br><span class="line">im.save(<span class="string">'jun.jpg'</span>, <span class="string">'jpeg'</span>)</span><br></pre></td></tr></table></figure>

<p>其他功能如切片、旋转、滤镜、输出文字、调色板等一应俱全, 代码如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageFilter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开一个jpg图像文件，注意是当前路径:</span></span><br><span class="line">im = Image.open(<span class="string">'jun.jpg'</span>)</span><br><span class="line"><span class="comment"># 应用模糊滤镜:</span></span><br><span class="line">im2 = im.filter(ImageFilter.BLUR)</span><br><span class="line">im2.save(<span class="string">'jun1.jpg'</span>, <span class="string">'jpeg'</span>)</span><br></pre></td></tr></table></figure>

<div class="note warning"><p>相关参考</p></div>

<ul>
<li><a href="https://github.com/CoderTitan/PythonDemo" target="_blank" rel="noopener">GitHub代码示例目地址</a></li>
<li><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014320027235877860c87af5544f25a8deeb55141d60c5000" target="_blank" rel="noopener">Pillow简单实用</a></li>
</ul>
<hr>
]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pillow</tag>
        <tag>pip3</tag>
      </tags>
  </entry>
  <entry>
    <title>Python之错误异常和文件处理</title>
    <url>/posts/64abe4fe/</url>
    <content><![CDATA[<ul>
<li>之前的文章介绍的都是<code>Python</code>的一些语法和使用方法, 详情可参考<a href="https://www.titanjun.top/categories/Python%E5%9F%BA%E7%A1%80/" target="_blank" rel="noopener">Python基础知识</a> </li>
<li>然而这里我们要说的是编程中我们最不想见到的, 但是却也是不得不面对的<code>Bug</code></li>
<li>除此之外, 这里还会介绍一下<code>Python</code>中的文件读取</li>
</ul>
<a id="more"></a>

<h2 id="错误和异常"><a href="#错误和异常" class="headerlink" title="错误和异常"></a>错误和异常</h2><p><code>Python</code> 中（至少）有两种错误：语法错误和异常（<code>syntax errors</code> 和 <code>exceptions</code> ）</p>
<h3 id="语法错误"><a href="#语法错误" class="headerlink" title="语法错误"></a>语法错误</h3><p>语法错误，也被称作解析错误, 使我们在学习<code>Python</code>过程中最常遇到的错误, 来看看下面两个错误示例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span></span><br><span class="line">    print(<span class="string">'titan'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误信息:</span></span><br><span class="line">File <span class="string">"../5-读文件.py"</span>, line <span class="number">19</span></span><br><span class="line">    <span class="keyword">if</span> <span class="literal">True</span></span><br><span class="line">          ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure>

<ul>
<li>语法分析器指出错误出现的文件(<code>File</code>)和错误行(<code>line 19</code>)</li>
<li>在检测到错误的位置前面显示一个小“箭头”</li>
<li>错误是由箭头前面的标记引起的（或者至少是这么检测的）</li>
<li>此处错误是因为<code>Print</code>函数的前面, <code>if</code>语句后面少了一个冒号(<code>:</code>)</li>
</ul>
<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><ul>
<li>在没有语法错误的情况下, 当我们执行当前程序的时候也可能会引发错误</li>
<li>运行期检测到的错误称为 异常，并且程序不会无条件的崩溃</li>
<li>异常能够编译通过, 但是不能运行成功; 而语法错误不能编译成功</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="number">1</span> / <span class="number">0</span>)</span><br><span class="line"><span class="comment"># 错误信息:</span></span><br><span class="line">File <span class="string">"../5-读文件.py"</span>, line <span class="number">22</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(<span class="number">1</span> / <span class="number">0</span>)</span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="number">1</span> + <span class="string">"12"</span>)</span><br><span class="line"><span class="comment"># 错误信息:</span></span><br><span class="line">File <span class="string">"../5-读文件.py"</span>, line <span class="number">22</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(<span class="number">1</span> + <span class="string">"12"</span>)</span><br><span class="line">TypeError: unsupported operand type(s) <span class="keyword">for</span> +: <span class="string">'int'</span> <span class="keyword">and</span> <span class="string">'str'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="number">1</span> + ad * <span class="number">2</span>)</span><br><span class="line"><span class="comment"># 错误信息:</span></span><br><span class="line">File <span class="string">"../5-读文件.py"</span>, line <span class="number">22</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(<span class="number">1</span> + ad * <span class="number">2</span>)</span><br><span class="line">NameError: name <span class="string">'ad'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure>

<ul>
<li>错误信息的第一行, 指出了异常出现的文件和错误行</li>
<li>第二行, 提示了是哪一条语句出现了错误</li>
<li>第三行, 指出了是哪一种异常信息;异常也有不同的类型，异常类型做为错误信息的一部分显示出来</li>
<li>以上三种异常分别为: 零除错误(<code>ZeroDivisionError</code>), 类型错误(<code>TypeError</code>) 和 命名错误(<code>NameError</code>)</li>
<li>相关异常信息<a href="https://docs.python.org/3/library/exceptions.html" target="_blank" rel="noopener">官方文档</a></li>
</ul>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><ul>
<li>我们都知道, 正常情况下, 程序执行过程中遇到错误或者异常, 程序便会中断执行, 这也就以为着后面的程序将无法执行</li>
<li>但是在<code>Python</code>中, 我们可以针对异常做出一些处理, 使之在遇到异常错误时, 继续执行后面的代码</li>
<li>异常类其实是<code>class</code>类, 所有的错误都是继承自<code>BaseException</code></li>
</ul>
<p>注意: 还有一些错误是无法跳过的, 比如内存错误</p>
<div class="note info"><p>错误处理的语句 </p></div>

<h4 id="第一种格式"><a href="#第一种格式" class="headerlink" title="第一种格式"></a>第一种格式</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    语句t</span><br><span class="line"><span class="keyword">except</span> 错误码 <span class="keyword">as</span> e:</span><br><span class="line">    语句<span class="number">1</span></span><br><span class="line"><span class="keyword">except</span> 错误码 <span class="keyword">as</span> e:</span><br><span class="line">    语句<span class="number">2</span></span><br><span class="line"><span class="keyword">except</span> 错误码 <span class="keyword">as</span> e:</span><br><span class="line">    语句<span class="number">3</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">except</span> 错误码 <span class="keyword">as</span> e:</span><br><span class="line">    语句n</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    语句e</span><br></pre></td></tr></table></figure>

<div class="note warning"><p>需要注意的是: </p></div>

<ul>
<li>语句中的<code>else</code>是可有可无的</li>
<li><code>except</code>语句中的<code>as e</code>也可以不加</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 错误处理的语句(else可有可无)</span></span><br><span class="line"><span class="keyword">try</span>.......<span class="keyword">except</span>....<span class="keyword">else</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    语句t</span><br><span class="line"><span class="keyword">except</span> 错误码<span class="number">1</span>:</span><br><span class="line">    语句<span class="number">1</span></span><br><span class="line"><span class="keyword">except</span> 错误码<span class="number">2</span>:</span><br><span class="line">    语句<span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    语句<span class="number">3</span></span><br></pre></td></tr></table></figure>

<h4 id="第二种格式"><a href="#第二种格式" class="headerlink" title="第二种格式"></a>第二种格式</h4><p>一个 <code>except</code> 子句可以在括号中列出多个异常的名字, 对于指定的一些异常做统一处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">7</span> / <span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> (ZeroDivisionError, NameError):</span><br><span class="line">    print(<span class="string">'程序异常'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="第三种格式"><a href="#第三种格式" class="headerlink" title="第三种格式"></a>第三种格式</h4><p>无论遇到的是哪一种异常, 均做统一处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">7</span> / <span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> :</span><br><span class="line">    print(<span class="string">'程序异常'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="try-语句工作方式"><a href="#try-语句工作方式" class="headerlink" title="try 语句工作方式"></a><code>try</code> 语句工作方式</h4><ul>
<li>首先，执行 <code>try</code> 子句 （在 <code>try</code> 和 <code>except</code> 关键字之间的部分）</li>
<li>如果没有异常发生， <code>except</code> 子句 在 <code>try</code> 语句执行完毕后就被忽略了</li>
<li>如果在 <code>try</code> 子句执行过程中发生了异常，那么该子句其余的部分就会被忽略</li>
<li>如果异常匹配于 <code>except</code> 关键字后面指定的异常类型，就执行对应的<code>except</code>子句。然后继续执行 <code>try</code> 语句之后的代码</li>
<li>如果发生了一个异常，在 <code>except</code> 子句中没有与之匹配的分支，它就会传递到上一级 <code>try</code> 语句中</li>
<li>如果最终仍找不到对应的处理语句，它就成为一个 未处理异常，终止程序运行，显示提示信息</li>
</ul>
<h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例:"></a>使用示例:</h4><p>一个 <code>try</code> 语句可能包含多个 <code>except</code> 子句，分别指定处理不同的异常。至多只会有一个分支被执行。异常处理程序只会处理对应的 <code>try</code> 子句中发生的异常，在同一个 <code>try</code> 语句中，其他子句中发生的异常则不作处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">7</span> / <span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">'除数为0'</span>)</span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    print(<span class="string">'没有改变量'</span>)</span><br><span class="line"><span class="keyword">except</span> SyntaxError:</span><br><span class="line">    print(<span class="string">'不知道'</span>)</span><br></pre></td></tr></table></figure>

<p>一个 <code>except</code> 子句可以在括号中列出多个异常的名字</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    print(<span class="number">7</span> / <span class="number">0</span>)</span><br><span class="line">except (ZeroDivisionError, NameError):</span><br><span class="line">    print(<span class="string">'程序异常'</span>)</span><br></pre></td></tr></table></figure>

<p>最后一个 <code>except</code> 子句可以省略异常名称，以作为通配符使用。你需要慎用此法，因为它会轻易隐藏一个实际的程序错误！可以使用这种方法打印一条错误信息，然后重新抛出异常（允许调用者处理这个异常):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'myfile.txt'</span>)</span><br><span class="line">    s = f.readline()</span><br><span class="line">    i = int(s.strip())</span><br><span class="line"><span class="keyword">except</span> OSError <span class="keyword">as</span> err:</span><br><span class="line">    print(<span class="string">"OS error: &#123;0&#125;"</span>.format(err))</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">"Could not convert data to an integer."</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"Unexpected error:"</span>, sys.exc_info()[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">raise</span></span><br></pre></td></tr></table></figure>

<p><code>try … except</code> 语句可以带有一个 else子句，该子句只能出现在所有 except 子句之后。当 try 语句没有抛出异常时，需要执行一些代码，可以使用这个子句。例如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">7</span> / <span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">'除数为0'</span>)</span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    print(<span class="string">'没有改变量'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'代码OK'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h3><p><code>raise</code>语句允许程序员强制抛出一个指定的异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">raise</span> NameError(<span class="string">'TitanJun'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 异常信息:</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"../1-异常处理.py"</span>, line <span class="number">95</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">raise</span> NameError(<span class="string">'TitanJun'</span>)</span><br><span class="line">NameError: TitanJun</span><br></pre></td></tr></table></figure>

<p>如果你需要明确一个异常是否抛出，但不想处理它，<code>raise</code> 语句可以让你很简单的重新抛出该异常:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> NameError(<span class="string">'TitanJun'</span>)</span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    print(<span class="string">'NameError错误'</span>)</span><br><span class="line">    <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误信息:</span></span><br><span class="line">NameError错误</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"../1-异常处理.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">raise</span> NameError(<span class="string">'TitanJun'</span>)</span><br><span class="line">NameError: TitanJun</span><br></pre></td></tr></table></figure>

<h3 id="定义清理行为"><a href="#定义清理行为" class="headerlink" title="定义清理行为"></a>定义清理行为</h3><ul>
<li><code>try</code> 语句还有另一个可选的子句: <code>try--except--finally</code>，目的在于定义在任何情况下都一定要执行的功能</li>
<li>不管有没有发生异常，<code>finally</code>子句 在程序离开 <code>try</code> 后都一定会被执行</li>
<li>当 <code>try</code> 语句中发生了未被 <code>except</code> 捕获的异常（或者它发生在 <code>except</code> 或 <code>else</code> 子句中），在 <code>finally</code> 子句执行完后它会被重新抛出。 - <code>try</code>语句经由 <code>break</code>，<code>continue</code> 或 <code>return</code> 语句退 出也一样会执行 <code>finally</code> 子句</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">7</span> / <span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">'除数为0'</span>)</span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    print(<span class="string">'没有改变量'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">'我一定要执行'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line">除数为<span class="number">0</span></span><br><span class="line">我一定要执行</span><br></pre></td></tr></table></figure>

<h3 id="预定义清理行为"><a href="#预定义清理行为" class="headerlink" title="预定义清理行为"></a>预定义清理行为</h3><p>有些对象定义了标准的清理行为，无论对象操作是否成功，不再需要该对象的时候就会起作用。以下示例尝试打开文件并把内容打印到屏幕上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> open(<span class="string">"myfile.txt"</span>):</span><br><span class="line">    print(line)</span><br></pre></td></tr></table></figure>

<p>这段代码的问题在于在代码执行完后没有立即关闭打开的文件。这在简单的脚本里没什么，但是大型应用程序就会出问题。<code>with</code> 语句使得文件之类的对象可以 确保总能及时准确地进行清理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"myfile.txt"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure>

<p>语句执行后，文件 <code>f</code> 总会被关闭，即使是在处理文件中的数据时出错也一样。其它对象是否提供了预定义的清理行为要查看它们的文档</p>
<h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><ul>
<li>在<code>Python</code>中文件的读写, 通常以文本打开，这意味着，你从文件读出和向文件写入的字符串会被特定的编码方式（默认是UTF-8）编码。</li>
<li>模式后面的 <code>&#39;b&#39;</code> 以 二进制模式 打开文件：数据会以字节对象的形式读出和写入。</li>
<li>这种模式应该用于所有不包含文本的文件</li>
</ul>
<h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><p>函数 <code>open()</code> 返回文件对象，通常的用法需要两个参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(file, mode=<span class="string">'r'</span>, buffering=None, encoding=None, errors=None, newline=None, closefd=True)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># 使用</span></span><br><span class="line">path = r'/Users/xxx/text.txt'</span><br><span class="line">file = open(path, <span class="string">'r'</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>参数一: 一个含有文件名的字符串</li>
<li>参数二: 描述如何使用该文件的字符串, 默认为 <code>&#39;r&#39;</code><ul>
<li><code>&#39;r&#39;</code>: 时表示只是读取文件</li>
<li><code>&#39;rb&#39;</code>: 以二进制形式打开一个文件用于只读, 文件描述放在文件的开头</li>
<li><code>&#39;w&#39;</code>: 表示只是写入文件（已经存在的同名文件将被删掉)</li>
<li><code>&#39;wb&#39;</code>: 打开一个文件用于写入二进制, 如果该文件已经存在会覆盖, 如果不存在则创建新文件</li>
<li><code>&#39;w+&#39;</code>: 打开一个文件用于读写</li>
<li><code>&#39;a&#39;</code>: 表示打开文件进行追加，写入到文件中的任何数据将自动添加到末尾</li>
<li><code>&#39;r+&#39;</code>: 表示打开文件进行读取和写入</li>
<li><code>&#39;b&#39;</code>: 以 二进制模式 打开文件</li>
</ul>
</li>
</ul>
<h3 id="文件对象方法"><a href="#文件对象方法" class="headerlink" title="文件对象方法"></a>文件对象方法</h3><h4 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h4><ul>
<li>要读取文件内容，需要调用 <code>file.read(size)</code>，该方法读取若干数量的数据并以字符串形式返回其内容</li>
<li><code>size</code> 是可选的数值，指定字符串长度, 如果没有指定 <code>size</code> 或者指定为负数，就会读取并返回整个文件。</li>
<li>当文件大小为当前机器内存两倍时，就会产生问题。反之，会尽可能按比较大的 <code>size</code> 读取和返回数据。</li>
<li>如果到了文件末尾，<code>file.read()</code>会返回一个空字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取文件</span></span><br><span class="line">str = file.read()</span><br><span class="line">print(str)</span><br></pre></td></tr></table></figure>

<h4 id="readline"><a href="#readline" class="headerlink" title="readline()"></a>readline()</h4><ul>
<li><code>file.readline()</code> 从文件中读取单独一行，字符串结尾会自动加上一个换行符（<code>\n</code>），只有当文件最后一行没有以换行符结尾时，这一操作才会被忽略。</li>
<li>这样返回值就不会有混淆，如果 <code>file.readline()</code> 返回一个空字符串，那就表示到达了文件末尾，如果是一个空行，就会描述为 <code>&#39;\n&#39;</code>，一个只包含换行符的字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file.readline()</span><br></pre></td></tr></table></figure>

<h4 id="遍历文件对象"><a href="#遍历文件对象" class="headerlink" title="遍历文件对象"></a>遍历文件对象</h4><p>可以循环遍历文件对象来读取文件中的每一行。这是一种内存高效、快速，并且代码简介的方式</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">    print(line)</span><br></pre></td></tr></table></figure>

<div class="note primary"><p>如果你想把文件中的所有行读到一个列表中，你也可以使用 `list(file)` 或者 `file.readlines()`</p></div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把文件读到列表中</span></span><br><span class="line">print(list(file))</span><br><span class="line">print(file.readlines())</span><br></pre></td></tr></table></figure>

<h4 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h4><ul>
<li><code>write</code>: 将 <code>string</code> 的内容写入文件，并返回写入字符的长度</li>
<li><code>writelines</code>: 用于向文件中写入一序列的字符串, 没有返回值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 写入文件</span></span><br><span class="line">leng = file.write(<span class="string">'我是一只小鸭子'</span>)</span><br><span class="line">print(leng)</span><br><span class="line"><span class="comment"># 输出: 7</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入一个序列</span></span><br><span class="line">file.writelines([<span class="string">'hello'</span>, <span class="string">'Python'</span>])</span><br></pre></td></tr></table></figure>

<div class="note warning"><p>想要写入其他非字符串内容，首先要将它转换为字符串</p></div>


<h4 id="tell-seek"><a href="#tell-seek" class="headerlink" title="tell/seek"></a>tell/seek</h4><ul>
<li><code>tell</code>: 返回一个整数，代表文件对象在文件中的指针位置，该数值计量了自文件开头到指针处的比特数。</li>
<li>需要改变文件对象指针话话，使用 <code>file.seek(offset,from_what)</code>。</li>
<li>指针在该操作中从指定的引用位置移动 <code>offset</code> 比特，引用位置由 <code>from_what</code> 参数指定。 </li>
<li><code>from_what</code> 值为 0 表示自文件起始处开始，1 表示自当前文件指针位置开始，2 表示自文件末尾开始。</li>
<li><code>from_what</code> 可以忽略，其默认值为零，此时从文件头开始</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = file.readline()</span><br><span class="line">print(l)</span><br><span class="line"></span><br><span class="line">pos = file.tell()</span><br><span class="line">print(pos)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="string">b'https://www.titanjun.top/\n'</span></span><br><span class="line"><span class="number">26</span></span><br></pre></td></tr></table></figure>

<p>重新设置文件读取指针到开头</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file.seek(<span class="number">5</span>, <span class="number">0</span>)</span><br><span class="line">print(file.readline())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="string">b'https://www.titanjun.top/\n'</span></span><br><span class="line"><span class="string">b'://www.titanjun.top/\n'</span></span><br></pre></td></tr></table></figure>

<h4 id="close"><a href="#close" class="headerlink" title="close"></a>close</h4><ul>
<li>当你使用完一个文件时，调用 <code>file.close()</code> 方法就可以关闭它并释放其占用的所有系统资源。 </li>
<li>在调用 <code>file.close()</code> 方法后，试图再次使用文件对象将会自动失败</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file.close()</span><br><span class="line"></span><br><span class="line">file.read()</span><br><span class="line"></span><br><span class="line">File <span class="string">"../5-读文件.py"</span>, line <span class="number">64</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    file.read()</span><br><span class="line">ValueError: read of closed file</span><br></pre></td></tr></table></figure>

<h4 id="关键字with"><a href="#关键字with" class="headerlink" title="关键字with"></a>关键字<code>with</code></h4><ul>
<li>用关键字 <code>with</code> 处理文件对象是个好习惯。</li>
<li>它的先进之处在于文件用完后会自动关闭，就算发生异常也没关系。</li>
<li>它是 <code>try-finally</code> 块的简写</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(path, <span class="string">'rb+'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    str = file.read()</span><br><span class="line">    print(str)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>错误异常</tag>
        <tag>文件</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据类型详解01</title>
    <url>/posts/8d410658/</url>
    <content><![CDATA[<ul>
<li><code>Python</code>（英语发音：<code>/ˈpaɪθən/</code>）, 是一种面向对象、解释型计算机程序设计语言，由<code>Guido van Rossum</code>于1989年发明，第一个公开发行版发行于1991年。</li>
<li><code>Python</code>是纯粹的自由软件， 源代码和解释器<code>CPython</code>遵循 <code>GPL(GNU General Public License)</code>协议 。</li>
<li>Python语法简洁清晰，特色之一是强制用空白符(white space)作为语句缩进<ul>
<li><code>Python</code> 是一种解释型语言： 这意味着开发过程中没有了编译这个环节。类似于PHP和Perl语言</li>
<li><code>Python</code> 是交互式语言： 这意味着，您可以在一个<code>Python</code>提示符，直接互动执行写你的程序</li>
<li><code>Python</code> 是面向对象语言: 这意味着<code>Python</code>支持面向对象的风格或代码封装在对象的编程技术</li>
<li><code>Python</code>是初学者的语言：<code>Python</code> 对初级程序员而言，是一种伟大的语言，它支持广泛的应用程序开发，从简单的文字处理到 WWW 浏览器再到游戏</li>
</ul>
</li>
</ul>
<a id="more"></a>

<h2 id="Mac系统下搭建Python环境"><a href="#Mac系统下搭建Python环境" class="headerlink" title="Mac系统下搭建Python环境"></a>Mac系统下搭建<code>Python</code>环境</h2><ul>
<li>首先到<a href="https://www.python.org/download" target="_blank" rel="noopener">Python官网</a> 下载安装最新版本的<code>Python</code>, 安装比较无脑,一路按下去就OK<ul>
<li>具体可参考<a href="https://www.cnblogs.com/code-juggler/p/6344646.html" target="_blank" rel="noopener">在Mac OS上搭建Python的开发环境</a></li>
</ul>
</li>
<li>安装<code>Python</code>开发软件, 推荐两款开发软件<code>Pycharm</code>和<code>Sublime Text</code>, 这里只介绍<code>Pycharm</code>的安装和破解方法<ul>
<li>首先到<a href="http://www.pc6.com/mac/500474.html" target="_blank" rel="noopener">这里下载</a><code>Pycharm</code>软件</li>
<li>然后<a href="https://blog.csdn.net/u014044812/article/details/78727496" target="_blank" rel="noopener">到这里</a>找软件的相关破解方法</li>
</ul>
</li>
<li><code>Python</code>的开发环境和开发软件都搞定之后,下面我们就来看看<code>Python</code>的基本语法吧</li>
<li>测试代码详见 <a href="https://github.com/CoderTitan/PythonDemo" target="_blank" rel="noopener">GitHub地址</a></li>
</ul>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p><code>Python</code>的输出语法和<code>Swift</code>的输出一样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出</span></span><br><span class="line">print(<span class="string">"Hello Python"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul>
<li><code>python</code>中单行注释采用 # 开头。</li>
<li><code>python</code> 中多行注释使用三个单引号 <code>&#39;&#39;&#39;</code> 或三个双引号 <code>&quot;&quot;&quot;</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 这里是单行注释</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">这是多行注释，使用单引号。</span></span><br><span class="line"><span class="string">这是多行注释，使用单引号。</span></span><br><span class="line"><span class="string">这是多行注释，使用单引号。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">这是多行注释，使用双引号。</span></span><br><span class="line"><span class="string">这是多行注释，使用双引号。</span></span><br><span class="line"><span class="string">这是多行注释，使用双引号。</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p><code>Python</code>中的变量不需要声明，变量的赋值操作既是变量声明和定义的过程。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">counter = <span class="number">100</span> <span class="comment"># 赋值整型变量</span></span><br><span class="line">miles = <span class="number">1000.0</span> <span class="comment"># 浮点型</span></span><br><span class="line">name = <span class="string">"John"</span> <span class="comment"># 字符串</span></span><br></pre></td></tr></table></figure>

<p>Python允许你同时为多个变量赋值, 也可以为多个对象指定多个变量。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = b = c = <span class="number">1</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 多变量赋值</span></span><br><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">"jun"</span></span><br></pre></td></tr></table></figure>

<h2 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h2><ul>
<li><code>Python</code>有五个标准的数据类型：<ul>
<li><code>Numbers</code>（数字）</li>
<li><code>String</code>（字符串）</li>
<li><code>List</code>（列表）</li>
<li><code>Tuple</code>（元组）</li>
<li><code>Dictionary</code>（字典）</li>
</ul>
</li>
</ul>
<h3 id="Numbers（数字）"><a href="#Numbers（数字）" class="headerlink" title="Numbers（数字）"></a><code>Numbers</code>（数字）</h3><ul>
<li><code>Number</code>是不可被改变的数据类型, 当你指定一个值时，<code>Number</code>对象就会被创建</li>
<li><code>Python</code>支持四种不同的数值类型：<ul>
<li><code>int</code>（有符号整型）</li>
<li><code>long</code>（长整型[也可以代表八进制和十六进制]）</li>
<li><code>float</code>（浮点型）</li>
<li><code>complex</code>（复数）</li>
</ul>
</li>
<li>复数: 和数学中的复数含义一样, 复数由实数部分和虚数部分构成，可以用<code>a + bj</code>, 或者<code>complex(a, b)</code>表示， 复数的实部a和虚部b都是浮点型</li>
</ul>
<table>
<thead>
<tr>
<th>int</th>
<th>long</th>
<th>float</th>
<th>complex</th>
</tr>
</thead>
<tbody><tr>
<td>10</td>
<td>51924361L</td>
<td>0.0</td>
<td>3.14j</td>
</tr>
<tr>
<td>100</td>
<td>-0x19323L</td>
<td>15.20</td>
<td>45.j</td>
</tr>
<tr>
<td>-786</td>
<td>0122L</td>
<td>-21.9</td>
<td>9.322e-36j</td>
</tr>
<tr>
<td>080</td>
<td>0xDEFABCECBDAECBFBAEl</td>
<td>32.3+e18</td>
<td>.876j</td>
</tr>
<tr>
<td>-0490</td>
<td>535633629843L</td>
<td>-90.</td>
<td>-.6545+0J</td>
</tr>
<tr>
<td>-0x260</td>
<td>-052318172735L</td>
<td>-32.54e100</td>
<td>3e+26J</td>
</tr>
<tr>
<td>0x69</td>
<td>-4721885298529L</td>
<td>70.2-E12</td>
<td>4.53e-7j</td>
</tr>
</tbody></table>
<h3 id="Python字符串"><a href="#Python字符串" class="headerlink" title="Python字符串"></a><code>Python</code>字符串</h3><ul>
<li>字符串或串(String)是由数字、字母、下划线组成的一串字符</li>
<li>和<code>Swift</code>中的字符串一样, 每一个字符都有一个与之对应的索引</li>
<li><code>python</code>的字串列表有2种取值顺序:<ul>
<li>从左到右索引默认0开始的，最大范围是字符串长度少1</li>
<li>从右到左索引默认-1开始的，最大范围是字符串开头</li>
<li>获取某一部分字符串的格式: [头下标:尾下标]</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字符串</span></span><br><span class="line">str = <span class="string">'Hello Python'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 输出完整字符串</span></span><br><span class="line">print(<span class="string">"完整字符串--"</span> + str)</span><br><span class="line"><span class="comment"># 结果输出:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 输出第一个字符</span></span><br><span class="line">print(<span class="string">"第一个字符--"</span> + str[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 输出第三到七个字符</span></span><br><span class="line">print(<span class="string">"第3-7个字符--"</span> + str[<span class="number">2</span>:<span class="number">6</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 输出低2个字符开始的所有字符</span></span><br><span class="line">print(<span class="string">"第2个开始的所有字符--"</span> + str[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 拼接字符串</span></span><br><span class="line"><span class="comment"># 像上面一样, 字符串用 `+`拼接</span></span><br><span class="line">print(<span class="string">"拼接--"</span> + str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 输出3次</span></span><br><span class="line"><span class="comment"># `*` 表示重复操作, 需要重复操作几次, 后面跟上次数即可</span></span><br><span class="line">print(str * <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 输出最后一个字符</span></span><br><span class="line">print(<span class="string">"最后一个字符--"</span> + str[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8. 输出倒数第二个字符</span></span><br><span class="line">print(<span class="string">"倒数第二个字符--"</span> + str[<span class="number">-2</span>])</span><br></pre></td></tr></table></figure>

<p>下面是以上语法的输出结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">完整字符串--Hello Python</span><br><span class="line">第一个字符--H</span><br><span class="line">第<span class="number">3</span><span class="number">-7</span>个字符--llo </span><br><span class="line">第<span class="number">2</span>个开始的所有字符--ello Python</span><br><span class="line">拼接--Hello Python</span><br><span class="line">Hello PythonHello PythonHello Python</span><br><span class="line">最后一个字符--n</span><br><span class="line">倒数第二个字符--o</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<h3 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h3><ul>
<li><code>List</code>（列表） 是 <code>Python</code> 中使用最频繁的数据类型, 和<code>C</code>语言中的数组一样, 语法操作和上述字符串类似</li>
<li>列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（所谓嵌套）。</li>
<li>列表用<code>[ ]</code>标识。是<code>python</code>最通用的复合数据类型</li>
<li>列表中的值得分割也可以用到变量[头下标:尾下标]，就可以截取相应的列表<ul>
<li>从左到右索引默认0开始的</li>
<li>从右到左索引默认-1开始</li>
<li>下标可以为空表示取到头或尾。</li>
</ul>
</li>
<li>加号（+）是列表连接运算符，星号（*）是重复操作</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># List 列表</span></span><br><span class="line">list1 = [<span class="number">12</span>, <span class="number">34</span>, <span class="number">3.14</span>, <span class="number">5.3</span>, <span class="string">'titan'</span>]</span><br><span class="line">list2 = [<span class="number">10</span>, <span class="string">'jun'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.完整列表</span></span><br><span class="line">print(list1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.列表第一个元素</span></span><br><span class="line">print(list1[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.获取第2-3个元素</span></span><br><span class="line">print(list1[<span class="number">1</span>:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.获取第三个到最后的所有元素</span></span><br><span class="line">print(list1[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.获取最后一个元素</span></span><br><span class="line">print(list1[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.获取倒数第二个元素</span></span><br><span class="line">print(list1[<span class="number">-2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.获取最后三个元素</span></span><br><span class="line">print(list1[<span class="number">-3</span>:<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.合并列表</span></span><br><span class="line">print(list1 + list2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.重复操作两次</span></span><br><span class="line">print(list2 * <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>上述语句输出结果如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">12</span>, <span class="number">34</span>, <span class="number">3.14</span>, <span class="number">5.3</span>, <span class="string">'titan'</span>]</span><br><span class="line"><span class="number">12</span></span><br><span class="line">[<span class="number">34</span>]</span><br><span class="line">[<span class="number">3.14</span>, <span class="number">5.3</span>, <span class="string">'titan'</span>]</span><br><span class="line">titan</span><br><span class="line"><span class="number">5.3</span></span><br><span class="line">[<span class="number">3.14</span>, <span class="number">5.3</span>]</span><br><span class="line">[<span class="number">12</span>, <span class="number">34</span>, <span class="number">3.14</span>, <span class="number">5.3</span>, <span class="string">'titan'</span>, <span class="number">10</span>, <span class="string">'jun'</span>]</span><br><span class="line">[<span class="number">10</span>, <span class="string">'jun'</span>, <span class="number">10</span>, <span class="string">'jun'</span>]</span><br></pre></td></tr></table></figure>

<h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><ul>
<li>元组是另一个数据类型(<code>Python</code>中的元组和<code>Swift</code>中的元组类似)</li>
<li>元组用”()”标识。内部元素用逗号隔开</li>
<li>元素不能二次赋值，相当于只读列表</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 元组</span></span><br><span class="line">tuple1 = (<span class="number">12</span>, <span class="number">34</span>, <span class="number">3.14</span>, <span class="number">5.3</span>, <span class="string">'titan'</span>)</span><br><span class="line">tuple2 = (<span class="number">10</span>, <span class="string">'jun'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.完整元组</span></span><br><span class="line">print(tuple1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.元组一个元素</span></span><br><span class="line">print(tuple1[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.获取第2-3个元素</span></span><br><span class="line">print(tuple1[<span class="number">2</span>:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.获取第三个到最后的所有元素</span></span><br><span class="line">print(tuple1[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.获取最后一个元素</span></span><br><span class="line">print(tuple1[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.获取倒数第二个元素</span></span><br><span class="line">print(tuple1[<span class="number">-2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.获取最后三个元素</span></span><br><span class="line">print(tuple1[<span class="number">-3</span>:<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.合并元组</span></span><br><span class="line">print(tuple1 + tuple2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.重复操作两次</span></span><br><span class="line">print(tuple2 * <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">12</span>, <span class="number">34</span>, <span class="number">3.14</span>, <span class="number">5.3</span>, <span class="string">'titan'</span>)</span><br><span class="line"><span class="number">12</span></span><br><span class="line">(<span class="number">3.14</span>,)</span><br><span class="line">(<span class="number">3.14</span>, <span class="number">5.3</span>, <span class="string">'titan'</span>)</span><br><span class="line">titan</span><br><span class="line"><span class="number">5.3</span></span><br><span class="line">(<span class="number">3.14</span>, <span class="number">5.3</span>)</span><br><span class="line">(<span class="number">12</span>, <span class="number">34</span>, <span class="number">3.14</span>, <span class="number">5.3</span>, <span class="string">'titan'</span>, <span class="number">10</span>, <span class="string">'jun'</span>)</span><br><span class="line">(<span class="number">10</span>, <span class="string">'jun'</span>, <span class="number">10</span>, <span class="string">'jun'</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里注意下, 当截取某一范围的数据时, 类似[2:3], [-3:-1], 实际的取值范围是含左不含右, 等同于数学中的半开半闭区间(左闭右开)–[2, 3)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 因元组的元素是只读的, 不能二次赋值, 所以请注意, 以下写法是错误的</span></span><br><span class="line"><span class="comment"># 运行会报错: TypeError: 'tuple' object does not support item assignment</span></span><br><span class="line">tuple2[<span class="number">0</span>] = <span class="number">20</span></span><br><span class="line">tuple2[<span class="number">1</span>] = <span class="string">"titan"</span></span><br></pre></td></tr></table></figure>

<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><ul>
<li>字典(<code>dictionary</code>)是除列表以外<code>python</code>之中最灵活的内置数据结构类型。</li>
<li>列表是有序的对象集合，字典是无序的对象集合。</li>
<li>两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过索引存取。</li>
<li>字典用”{ }”标识。字典由索引(key)和它对应的值value组成</li>
<li>这里的字典的key值, 不仅仅可以用字符串, 还可以用<code>Number</code>类型</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字典</span></span><br><span class="line">dict1 = &#123;<span class="string">'name'</span>: <span class="string">'jun'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'score'</span>: <span class="number">90.98</span>&#125;</span><br><span class="line">dict2 = &#123;<span class="string">'name'</span>: <span class="string">'titan'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 完整字典</span></span><br><span class="line">print(dict2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.修改或添加字典元素</span></span><br><span class="line">dict2[<span class="string">'name'</span>] = <span class="string">'brother'</span></span><br><span class="line">dict2[<span class="string">'age'</span>] = <span class="number">20</span></span><br><span class="line">dict2[<span class="number">3</span>] = <span class="string">'完美'</span></span><br><span class="line">dict2[<span class="number">0.9</span>] = <span class="number">0.9</span></span><br><span class="line">print(dict2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.根据键值获取value</span></span><br><span class="line">print(dict1[<span class="string">'score'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.获取所有的键值</span></span><br><span class="line">print(dict1.keys())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.获取所有的value值</span></span><br><span class="line">print(dict1.values())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.删除字典元素</span></span><br><span class="line"><span class="keyword">del</span> dict1[<span class="string">'name'</span>]</span><br><span class="line">print(dict1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.清空字典所有条目</span></span><br><span class="line">dict1.clear()</span><br><span class="line">print(dict1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.删除字典</span></span><br><span class="line">dict3 = &#123;<span class="number">2</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">del</span> dict3</span><br><span class="line"><span class="comment"># 当该数组呗删除之后, 在调用会报错</span></span><br><span class="line"><span class="comment"># print(dict3)</span></span><br></pre></td></tr></table></figure>

<p>上述语句的输出结果如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'titan'</span>&#125;</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'brother'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="number">3</span>: <span class="string">'完美'</span>, <span class="number">0.9</span>: <span class="number">0.9</span>&#125;</span><br><span class="line"><span class="number">90.98</span></span><br><span class="line">dict_keys([<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'score'</span>])</span><br><span class="line">dict_values([<span class="string">'jun'</span>, <span class="number">18</span>, <span class="number">90.98</span>])</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'score'</span>: <span class="number">90.98</span>&#125;</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><ul>
<li>集合对象是由一组无序排列的值组成的序列，集合成员可以做字典中的键</li>
<li>集合<code>sets</code>有两种不同的类型：可变集合<code>set</code>和不可变集合<code>frozenset</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 集合</span></span><br><span class="line">s = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 输出</span></span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 用set转化已存在的类型, 可以去重</span></span><br><span class="line"><span class="comment"># 集合不会存在相同的元素</span></span><br><span class="line">myList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>]</span><br><span class="line">mySet = set(myList)</span><br><span class="line">print(mySet)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 添加元素(已经存在的元素, 无法添加)</span></span><br><span class="line">mySet.add(<span class="number">2</span>)</span><br><span class="line">print(mySet)</span><br><span class="line">mySet.add(<span class="number">6</span>)</span><br><span class="line">print(mySet)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.删除元素</span></span><br><span class="line">mySet.remove(<span class="number">2</span>)</span><br><span class="line">print(mySet)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.方法difference</span></span><br><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"><span class="comment"># 用set1和set2做difference</span></span><br><span class="line">diff = set1.difference(set2)</span><br><span class="line">print(diff)</span><br><span class="line"><span class="comment"># 输出: &#123;4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用set2和set1做difference</span></span><br><span class="line">diff2 = set2.difference(set1)</span><br><span class="line">print(diff2)</span><br><span class="line"><span class="comment"># 输出: &#123;5, 6&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 返回相同的元素</span></span><br><span class="line">inter = set1.intersection(set2)</span><br><span class="line">print(inter)</span><br><span class="line"><span class="comment"># 输出: &#123;1, 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.合并集合</span></span><br><span class="line">union1 = set1.union(set2)</span><br><span class="line">print(union1)</span><br><span class="line"><span class="comment"># 输出: &#123;1, 2, 4, 5, 6&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><ul>
<li>有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。</li>
<li>以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值</li>
</ul>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>int(x)</td>
<td>将x转换为一个整数</td>
</tr>
<tr>
<td>long(x)</td>
<td>将x转换为一个长整数</td>
</tr>
<tr>
<td>float(x)</td>
<td>将x转换到一个浮点数</td>
</tr>
<tr>
<td>complex(real [,imag])</td>
<td>创建一个复数</td>
</tr>
<tr>
<td>str(x)</td>
<td>将对象 x 转换为字符串</td>
</tr>
<tr>
<td>repr(x)</td>
<td>将对象 x 转换为表达式字符串</td>
</tr>
<tr>
<td>eval(str)</td>
<td>用来计算在字符串中的有效Python表达式,并返回一个对象</td>
</tr>
<tr>
<td>tuple(s)</td>
<td>将序列 s 转换为一个元组</td>
</tr>
<tr>
<td>list(s)</td>
<td>将序列 s 转换为一个列表</td>
</tr>
<tr>
<td>set(s)</td>
<td>转换为可变集合</td>
</tr>
<tr>
<td>dict(d)</td>
<td>创建一个字典。d 必须是一个序列 (key,value)元组。</td>
</tr>
<tr>
<td>frozenset(s)</td>
<td>转换为不可变集合</td>
</tr>
<tr>
<td>chr(x)</td>
<td>将一个整数转换为一个字符</td>
</tr>
<tr>
<td>unichr(x)</td>
<td>将一个整数转换为Unicode字符</td>
</tr>
<tr>
<td>ord(x)</td>
<td>将一个字符转换为它的整数值</td>
</tr>
<tr>
<td>hex(x)</td>
<td>将一个整数转换为一个十六进制字符串</td>
</tr>
<tr>
<td>oct(x)</td>
<td>将一个整数转换为一个八进制字符串</td>
</tr>
</tbody></table>
<p>使用示例如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据类型转换</span></span><br><span class="line">dic = &#123;<span class="string">'name'</span>: <span class="string">'jun'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="comment"># 1.将x转换为一个整数</span></span><br><span class="line">print(int(<span class="number">9.89</span>))</span><br><span class="line">print(int(<span class="string">'9'</span>))</span><br><span class="line"><span class="comment"># print(int('8.89')) # 这样的写法会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.创建一个复数</span></span><br><span class="line">print(complex(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">print(complex(<span class="string">'3'</span>))</span><br><span class="line">print(complex(<span class="number">-2</span>, <span class="number">-4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.转换为一个浮点型</span></span><br><span class="line">print(float(<span class="number">9</span>))</span><br><span class="line">print(float(<span class="string">'12.45'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.转换为字符串</span></span><br><span class="line">print(str(<span class="number">9</span>))</span><br><span class="line">print(str(<span class="number">9.09</span>))</span><br><span class="line">print(str(<span class="string">'89'</span>))</span><br><span class="line">print(str(dic))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.转换为表达式字符串</span></span><br><span class="line">print(repr(<span class="number">9.09</span>))</span><br><span class="line">print(repr(<span class="number">9</span> + <span class="number">10</span>))</span><br><span class="line">print(repr(dic))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.用来计算在字符串中的有效Python表达式,并返回一个对象</span></span><br><span class="line">print(eval(<span class="string">'3*9'</span>))</span><br><span class="line">print(eval(<span class="string">"dic['age']*2"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.将序列转换为一个元组</span></span><br><span class="line">list7 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(tuple(list7))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.将序列转换为一个列表</span></span><br><span class="line">tuple8 = (<span class="string">'a'</span>, <span class="string">'s'</span>, <span class="string">'d'</span>)</span><br><span class="line">print(list(tuple8))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.转换为可变集合</span></span><br><span class="line">print(set(list7))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.创建一个字典</span></span><br><span class="line">dic10 = dict([(<span class="string">'name'</span>, <span class="string">'titan'</span>), (<span class="string">'age'</span>, <span class="number">17</span>)])</span><br><span class="line">print(dic10)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 11.转换为不可变集合</span></span><br><span class="line">print(frozenset(&#123;<span class="number">1</span>, <span class="number">2</span>&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 12.将一个整数转换为一个字符</span></span><br><span class="line"><span class="comment"># 48对应字符'0'(参照ASCII码表)</span></span><br><span class="line">print(chr(<span class="number">122</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 13.将一个字符转换为它的整数值</span></span><br><span class="line">print(ord(<span class="string">'0'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 14.将一个整数转换为一个十六进制字符串</span></span><br><span class="line">print(hex(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 15.将一个整数转换为一个八进制字符串</span></span><br><span class="line">print(oct(<span class="number">10</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>对于<code>Python</code>语言, 我也是小白, 正在努力学习中, 文中如有不足之处, 还望多多指教</li>
<li>测试代码详见 <a href="https://github.com/CoderTitan/PythonDemo" target="_blank" rel="noopener">GitHub地址</a></li>
<li>后期会持续更新相关文章</li>
</ul>
]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据类型</tag>
        <tag>MacOS</tag>
      </tags>
  </entry>
  <entry>
    <title>wsl基于基于Hexo和GitHub 来搭建属于自己的个人博客</title>
    <url>/posts/68d038bb/</url>
    <content><![CDATA[<h3 id="Hexo-博客搭建环境"><a href="#Hexo-博客搭建环境" class="headerlink" title="Hexo 博客搭建环境"></a>Hexo 博客搭建环境</h3><ul>
<li>Windows 10 WSL<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                       ./+o+-     root@aiker</span><br><span class="line">                 yyyyy- -yyyyyy+     OS: Ubuntu 18.04 LTS (Bionic Beaver)(on the Windows Subsystem for Linux)</span><br><span class="line">              ://+//////-yyyyyyo      Kernel: x86_64 Linux 4.4.0-18362-Microsoft</span><br><span class="line">          .++ .:/++++++/-.+sss/`       Uptime: 6d 6h 29m</span><br><span class="line">        .:++o:  /++++++++/:--:/-        Packages: 2573</span><br><span class="line">       o:+o+:++.`..```.-/oo+++++/        Shell: zsh 5.4.2</span><br><span class="line">      .:+o:+o/.          `+sssoo+/    WM:</span><br><span class="line"> .++/+:+oo+o:`             /sssooo.    GTK Theme: Adwaita [GTK3]</span><br><span class="line">/+++//+:`oo+o               /::--:.   CPU: Intel Core i7-7700K @ 8x 4.2GHz</span><br><span class="line">\+/+o+++`o++o               ++////.   RAM: 37837MiB / 65396MiB</span><br><span class="line"> .++.o+++oo+:`             /dddhhh.</span><br><span class="line">      .+.o+oo:.          `oddhhhh+</span><br><span class="line">       \+.++o+o``-````.:ohdhhhhh+</span><br><span class="line">        `:o+++ `ohhhhhhhhyo++os:</span><br><span class="line">          .o:`.syhhhhhhh/.oo++o`</span><br><span class="line">              /osyyyyyyo++ooo+++/</span><br><span class="line">                  ````` +oo+++o\:</span><br><span class="line">                         `oo++.</span><br></pre></td></tr></table></figure>

</li>
</ul>
<a id="more"></a>

<h3 id="安装-Node-js-Git"><a href="#安装-Node-js-Git" class="headerlink" title="安装 Node.js Git"></a>安装 Node.js Git</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nodejs npm git</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># node -v</span><br><span class="line">v8.10.0</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># git --version</span><br><span class="line">git version 2.17.1</span><br></pre></td></tr></table></figure>

<ul>
<li>配置SSH key到你的github账户<br>提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd ~/. ssh #检查本机已存在的ssh密钥</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>如果提示：No such file or directory 说明你是第一次使用git。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot;</span><br></pre></td></tr></table></figure>

<p>打开用户目录，找到<code>.ssh\id_rsa.pub</code>文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ssh -T git@github.com</span><br><span class="line">Hi ! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line">看到这个信息说明SSH已配置成功</span><br></pre></td></tr></table></figure>

<ul>
<li>此时你还需要配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;donxan&quot;</span><br><span class="line">git config --global user.email &quot;donxan@gmail.com&quot;</span><br></pre></td></tr></table></figure>

<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>什么是 Hexo？<br>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<p>Hexo官方网站：<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a></p>
<blockquote>
<p>由于国内的 npm 访问外网下载速度较慢，我们可以将 npm 源更换为淘宝的镜像（当然如果你觉得你的下载速度较快的话，也可以选择不进行更换），在 Git Bash 中输入以下指令</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>安装命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo  #-g表示全局安装</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm WARN optional Skipping failed optional dependency /chokidar/fsevents:</span><br><span class="line">npm WARN notsup Not compatible with your operating system or architecture: fsevents@2.1.2</span><br><span class="line">INFO  Start blogging with Hexo!</span><br><span class="line"></span><br><span class="line">上面的警告可以忽略，原因是当前系统不是macOS所以有警告。</span><br></pre></td></tr></table></figure>

<h4 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mkdir hexo</span><br><span class="line"># cd hexo</span><br><span class="line"># hexo init # 创建一个hexo框架</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># npm install  # 安装依赖包</span><br><span class="line"></span><br><span class="line">loadDep:fsevents → 304    ▐ ╢██████████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░╟ WARN engine fsevents@2.1.2: wanted: &#123;&quot;node&quot;:&quot;^8.16.0 || ^10.6.0 || &gt;=11.0.0&quot;&#125; (cunpm WARN optional Skipping failed optional dependency /chokidar/fsevents:</span><br><span class="line">npm WARN notsup Not compatible with your operating system or architecture: fsevents@2.1.2 #忽略警告</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># hexo -v</span><br><span class="line">hexo: 4.2.0</span><br><span class="line">hexo-cli: 3.1.0</span><br><span class="line">os: Linux 4.4.0-18362-Microsoft linux x64</span><br><span class="line">http_parser: 2.7.1</span><br><span class="line">node: 8.10.0</span><br><span class="line">v8: 6.2.414.50</span><br><span class="line">uv: 1.18.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">ares: 1.14.0</span><br><span class="line">modules: 57</span><br><span class="line">nghttp2: 1.30.0</span><br><span class="line">openssl: 1.0.2n</span><br><span class="line">icu: 60.2</span><br><span class="line">unicode: 10.0</span><br><span class="line">cldr: 32.0.1</span><br><span class="line">tz: 2017c</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># pwd</span><br><span class="line">/mnt/e/hexo</span><br><span class="line"># ls</span><br><span class="line">_config.yml  node_modules  public     source</span><br><span class="line">db.json      package.json  scaffolds  themes</span><br></pre></td></tr></table></figure>

<ul>
<li>新建的框架目录如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|—— _config.yml             // 网站的配置信息</span><br><span class="line">|—— package.json            // 项目包信息</span><br><span class="line">|—— scaffolds               // 模板文件夹，Hexo根据scaffold中的模板来新建文件</span><br><span class="line">|—— source                  // 存放用户资源的地方</span><br><span class="line">|   |—— _drafts             // 存放草稿</span><br><span class="line">|   |—— _posts              // 存放文章</span><br><span class="line">|—— themes                  // 主题文件夹</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># hexo g #生成静态文件（结果文件）</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded in 155 ms</span><br><span class="line">INFO  Generated: index.html</span><br><span class="line">INFO  Generated: archives/index.html</span><br><span class="line">INFO  Generated: fancybox/fancybox_loading.gif</span><br><span class="line">INFO  Generated: fancybox/jquery.fancybox.css</span><br><span class="line">INFO  Generated: fancybox/jquery.fancybox.js</span><br><span class="line">INFO  Generated: fancybox/fancybox_loading@2x.gif</span><br><span class="line">INFO  Generated: fancybox/fancybox_overlay.png</span><br><span class="line">INFO  Generated: fancybox/blank.gif</span><br><span class="line">INFO  Generated: fancybox/fancybox_sprite.png</span><br><span class="line">INFO  Generated: fancybox/fancybox_sprite@2x.png</span><br><span class="line">INFO  Generated: fancybox/jquery.fancybox.pack.js</span><br><span class="line">INFO  Generated: archives/2020/03/index.html</span><br><span class="line">INFO  Generated: archives/2020/index.html</span><br><span class="line">INFO  Generated: fancybox/helpers/fancybox_buttons.png</span><br><span class="line">INFO  Generated: fancybox/helpers/jquery.fancybox-buttons.css</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.eot</span><br><span class="line">INFO  Generated: fancybox/helpers/jquery.fancybox-buttons.js</span><br><span class="line">INFO  Generated: css/fonts/FontAwesome.otf</span><br><span class="line">INFO  Generated: fancybox/helpers/jquery.fancybox-media.js</span><br><span class="line">INFO  Generated: js/script.js</span><br><span class="line">INFO  Generated: css/style.css</span><br><span class="line">INFO  Generated: fancybox/helpers/jquery.fancybox-thumbs.css</span><br><span class="line">INFO  Generated: fancybox/helpers/jquery.fancybox-thumbs.js</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.woff</span><br><span class="line">INFO  Generated: css/images/banner.jpg</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.ttf</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.svg</span><br><span class="line">INFO  Generated: 2020/03/23/hello-world/index.html</span><br><span class="line">INFO  28 files generated in 948 ms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># hexo s  #启动本地服务，可以通过http://localhost:4000/ 访问</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/0puu7Og.png" alt></p>
<ul>
<li>常用到以下几个命令：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo generate  // 简写：hexo g，生成静态文件，会在当前目录下生成一个public文件夹</span><br><span class="line">$ hexo server       // 简写：hexo s，启动本地服务，用于博客的预览</span><br><span class="line">$ hexo deploy       // 简写：hexo d，部署到远程（如GitHub，可以在_config.yml中配置）</span><br><span class="line">$ hexo new post-name // 简写：hexo n post-name， 新建文章</span><br><span class="line">$ hexo new page page-name   //简写：hexo n page page-name，新建页面</span><br></pre></td></tr></table></figure>

<ul>
<li>还有常用的组合命令：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo d -g                 // 生成和部署</span><br><span class="line">$ hexo s -g                 // 生成和预览</span><br></pre></td></tr></table></figure>

<ul>
<li>草稿命令：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new draft &lt;title&gt;        // 新建草稿，存放在source/_drafts</span><br><span class="line">$ hexo publish post &lt;title&gt;     // 发布草稿为文章，文章转移到source/_posts</span><br><span class="line">$ hexo s -g --drafts            // 显示草稿</span><br></pre></td></tr></table></figure>

<h3 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h3><p>从上面预览的主题图片来看不怎么美观，那么我们先换个主题</p>
<p>如果出现一些莫名其妙的问题，可以先执行<code>hexo clean</code>来清理一下public的内容，然后再来重新生成和发布</p>
<h3 id="安装-hexo-deployer-git"><a href="#安装-hexo-deployer-git" class="headerlink" title="安装[hexo-deployer-git"></a>安装[hexo-deployer-git</h3><p>部署之前需要安装git部署插件，否则会提示Deployer not found错误。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt; #https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span><br><span class="line">  branch: [branch]</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
<th align="left">默认</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>repo</code></td>
<td align="left">库（Repository）地址</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>branch</code></td>
<td align="left">分支名称</td>
<td align="left"><code>gh-pages</code> (GitHub) <code>coding-pages</code> (Coding.net) <code>master</code> (others)</td>
</tr>
<tr>
<td align="left"><code>message</code></td>
<td align="left">自定义提交信息</td>
<td align="left"><code>Site updated: \{\{ now\(&#39;YYYY-MM-DD HH:mm:ss&#39;\)\}\}</code></td>
</tr>
<tr>
<td align="left">- 我这里同时使用了github和coding来搭建博客</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim _config.yml</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">    github: git@github.com:donxan/donxan.github.io.git,master</span><br><span class="line">    coding: git@e.coding.net:gitcto/blogs.git,master</span><br></pre></td></tr></table></figure></td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<h3 id="配置网站url为自己的域名"><a href="#配置网站url为自己的域名" class="headerlink" title="配置网站url为自己的域名"></a>配置网站url为自己的域名</h3><p>如果您的 Github Pages 需要使用 CNAME 文件<strong>自定义域名</strong>，请将 CNAME 文件置于 <code>source</code> 目录下，只有这样 <code>hexo deploy</code> 才能将 CNAME 文件一并推送至部署分支。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cd source</span><br><span class="line"># vim CNAME</span><br><span class="line">blog.abcgogo.com</span><br><span class="line">blogs.abcgogo.com</span><br></pre></td></tr></table></figure>

<p>安装配置完毕后控制台输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

<ul>
<li><p>看下博客的效果</p>
</li>
<li><p><a href="https://blogs.abcgogo.com/" target="_blank" rel="noopener">github</a></p>
<p><img src="https://i.imgur.com/jLoKCiy.png" alt></p>
</li>
<li><p><a href="https://blog.abcgogo.com/" target="_blank" rel="noopener">coding</a></p>
<p><img src="https://i.imgur.com/As6OKZY.png" alt></p>
</li>
</ul>
<h3 id="常用hexo命令"><a href="#常用hexo命令" class="headerlink" title="常用hexo命令"></a>常用hexo命令</h3><p>常见命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br></pre></td></tr></table></figure>

<p>缩写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>

<p>组合命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s -g #生成并本地预览</span><br><span class="line">hexo d -g #生成并上传</span><br></pre></td></tr></table></figure>

<h3 id="更换主题为-NexT"><a href="#更换主题为-NexT" class="headerlink" title="更换主题为 NexT"></a>更换主题为 NexT</h3><p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 <code>themes</code> 目录下， 然后修改下配置文件即可。具体到 NexT 来说，安装步骤如下。</p>
<h4 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h4><p>如果你熟悉 <a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a>， 建议你使用 克隆最新版本 的方式，之后的更新可以通过 <code>git pull</code> 来快速更新， 而不用再次下载压缩包替换。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<h4 id="启用-NexT-主题"><a href="#启用-NexT-主题" class="headerlink" title="启用 NexT 主题"></a>启用 NexT 主题</h4><p>与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，在hexo根文件夹下，编辑<strong>_config.yml</strong>文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cd /mnt/e/hexo  </span><br><span class="line"># vim _config.yml</span><br></pre></td></tr></table></figure>

<p> 找到 <code>theme</code> 字段，并将其值更改为 <code>next</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>单个Tomcat配置多个域并配置多个证书(单IP)</title>
    <url>/posts/eabac3f5/</url>
    <content><![CDATA[<p>情节：HTTPS 之前是没有想配置的但是我在家里测试网站的时候发现网站上有广告，然而我并没有投广告，在公司还有流量测试并没有广告所以我就怀疑是我家的宽带运营商植入了广告，我在浏览的时候发现并不是所有的网站都有广告如（百度,微博）我就想是不是带 HTTPS 的都没有广告所以我就想把我的网站也使用 HTTPS 加密形式，我在网上找了好多资料我都没有测试成功，然后我结合官网与网上的资料测试成功了，所以在此地记录一下。</p>
<h3 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h3><h3 id="1-准备证书"><a href="#1-准备证书" class="headerlink" title="1.准备证书"></a>1.准备证书</h3><p>1）因为我们是小成本网站所以选择免费的证书，现在好多网上都有免费的了，我选择的是阿里云—CA 证书</p>
<p><a href="https://file.luoruiyuan.cn/files/blog/20170908114500876802.jpg" target="_blank" rel="noopener"><img src="https://file.luoruiyuan.cn/files/blog/20170908114500876802.jpg#alt=01" alt></a></p>
<p>2）点击购买证书</p>
<p><a href="https://file.luoruiyuan.cn/files/blog/20170908114552954290.jpg" target="_blank" rel="noopener"><img src="https://file.luoruiyuan.cn/files/blog/20170908114552954290.jpg#alt=02" alt></a></p>
<p>3）点击免费证书（购买数量可以多个根据自己的域名个数，这里一个只能绑定一个普通域名）</p>
<p><a href="https://file.luoruiyuan.cn/files/blog/20170908114659517127.jpg" target="_blank" rel="noopener"><img src="https://file.luoruiyuan.cn/files/blog/20170908114659517127.jpg#alt=03" alt></a></p>
<p>4.进入控制台补全信息</p>
<p><a href="https://file.luoruiyuan.cn/files/blog/201709081150246335.jpg" target="_blank" rel="noopener"><img src="https://file.luoruiyuan.cn/files/blog/201709081150246335.jpg#alt=04" alt></a></p>
<p>5.补全信息要注意的是普通域名的定义</p>
<p><a href="https://file.luoruiyuan.cn/files/blog/20170908115302923458.jpg" target="_blank" rel="noopener"><img src="https://file.luoruiyuan.cn/files/blog/20170908115302923458.jpg#alt=06" alt></a></p>
<h3 id><a href="#" class="headerlink" title></a><a href="https://file.luoruiyuan.cn/files/blog/20170908115235907870.jpg" target="_blank" rel="noopener"><img src="https://file.luoruiyuan.cn/files/blog/20170908115235907870.jpg#alt=05" alt></a></h3><p>6.证书审核通过后我们下载 TOMCAT 证书</p>
<p><a href="https://file.luoruiyuan.cn/files/blog/20170908115601423602.jpg" target="_blank" rel="noopener"><img src="https://file.luoruiyuan.cn/files/blog/20170908115601423602.jpg#alt=07" alt></a></p>
<h3 id="2-配置-Tomcat-我的是-Tomcat9"><a href="#2-配置-Tomcat-我的是-Tomcat9" class="headerlink" title="2.配置 Tomcat(我的是 Tomcat9)"></a>2.配置 Tomcat(我的是 Tomcat9)</h3><p>1)我们把下载好的证书放到 tomcat–&gt;conf–&gt;cert（ 自己新建）目录下</p>
<p><a href="https://file.luoruiyuan.cn/files/blog/20170908115854454936.jpg" target="_blank" rel="noopener"><img src="https://file.luoruiyuan.cn/files/blog/20170908115854454936.jpg#alt=08" alt></a></p>
<p>2）打开 server.xml 进行配置找到如图位置在下面添加代码</p>
<p><a href="https://file.luoruiyuan.cn/files/blog/20170908120030251533.jpg" target="_blank" rel="noopener"><img src="https://file.luoruiyuan.cn/files/blog/20170908120030251533.jpg#alt=09" alt></a></p>
<p>3）写配置代码（你需要修改的就是 defaultSSLHostConfigName：默认域名多个 SSLHostConfig 必须填此属性 hostName：域名 certificateKeystoreFile：证书路径最好写绝对的 certificateKeystorePassword：证书密码）这就配置出了多个域名多个证书了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Connector port=&quot;443&quot; protocol=&quot;HTTP/1.1&quot; maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot; URIEncoding=&quot;UTF-8&quot;  scheme=&quot;https&quot; secure=&quot;true&quot; defaultSSLHostConfigName=&quot;www.luoruiyuan.cn&quot;&gt;</span><br><span class="line"></span><br><span class="line">		&lt;SSLHostConfig honorCipherOrder=&quot;false&quot; hostName=&quot;www.luoruiyuan.cn&quot;&gt;</span><br><span class="line">		    &lt;Certificate certificateKeystoreFile=&quot;C:\Program Files\Tomcat\conf\cert\214XXXXXX35.pfx&quot; certificateKeystorePassword=&quot;214XXXXXX35&quot;/&gt;</span><br><span class="line">		&lt;/SSLHostConfig&gt;</span><br><span class="line"></span><br><span class="line">		&lt;SSLHostConfig honorCipherOrder=&quot;false&quot; hostName=&quot;mbk.luoruiyuan.cn&quot;&gt;</span><br><span class="line">		    &lt;Certificate certificateKeystoreFile=&quot;C:\Program Files\Tomcat\conf\cert\214XXXXXX35.pfx&quot; certificateKeystorePassword=&quot;214XXXXXX35&quot;/&gt;</span><br><span class="line">		&lt;/SSLHostConfig&gt;</span><br><span class="line"></span><br><span class="line">		&lt;SSLHostConfig honorCipherOrder=&quot;false&quot; hostName=&quot;luoruiyuan.cn&quot;&gt;</span><br><span class="line">		    &lt;Certificate certificateKeystoreFile=&quot;C:\Program Files\Tomcat\conf\cert\214XXXXXX35.pfx&quot; certificateKeystorePassword=&quot;214XXXXXX35&quot;/&gt;</span><br><span class="line">		&lt;/SSLHostConfig&gt;</span><br><span class="line"></span><br><span class="line">		&lt;SSLHostConfig honorCipherOrder=&quot;false&quot; hostName=&quot;movie.luoruiyuan.cn&quot;&gt;</span><br><span class="line">		    &lt;Certificate certificateKeystoreFile=&quot;C:\Program Files\Tomcat\conf\cert\214XXXXXX35.pfx&quot; certificateKeystorePassword=&quot;214XXXXXX35&quot;/&gt;</span><br><span class="line">		&lt;/SSLHostConfig&gt;</span><br><span class="line"></span><br><span class="line">		&lt;SSLHostConfig honorCipherOrder=&quot;false&quot; hostName=&quot;file.luoruiyuan.cn&quot;&gt;</span><br><span class="line">		    &lt;Certificate certificateKeystoreFile=&quot;C:\Program Files\Tomcat\conf\cert\214XXXXXX35.pfx&quot; certificateKeystorePassword=&quot;214XXXXXX35&quot;/&gt;</span><br><span class="line">		&lt;/SSLHostConfig&gt;</span><br><span class="line"></span><br><span class="line">&lt;/Connector&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-代码修改"><a href="#3-代码修改" class="headerlink" title="3.代码修改"></a>3.代码修改</h3><p>因为我们要同时支持 HTTP 与 HTTPS 所以在 a、 img、ajax 请求等一定要注意不能在前面加http://或者https://直接使用//开头如图</p>
<p><a href="https://file.luoruiyuan.cn/files/blog/2017090812073140716.jpg" target="_blank" rel="noopener"><img src="https://file.luoruiyuan.cn/files/blog/2017090812073140716.jpg#alt=110" alt></a></p>
<p><a href="https://file.luoruiyuan.cn/files/blog/20170908120826626121.jpg" target="_blank" rel="noopener"><img src="https://file.luoruiyuan.cn/files/blog/20170908120826626121.jpg#alt=11" alt></a></p>
<h3 id="4-在浏览器中输入网址默认跳到-https-访问"><a href="#4-在浏览器中输入网址默认跳到-https-访问" class="headerlink" title="4.在浏览器中输入网址默认跳到 https 访问"></a>4.在浏览器中输入网址默认跳到 https 访问</h3><p>1）打开 Tomcat—&gt;conf—&gt;web.xml，在该文件后面加上这样一段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;login-config&gt;</span><br><span class="line">    &lt;!-- Authorization setting for SSL --&gt;</span><br><span class="line">    &lt;auth-method&gt;CLIENT-CERT&lt;/auth-method&gt;</span><br><span class="line">    &lt;realm-name&gt;Client Cert Users-only Area&lt;/realm-name&gt;</span><br><span class="line">&lt;/login-config&gt;</span><br><span class="line">&lt;security-constraint&gt;</span><br><span class="line">    &lt;!-- Authorization setting for SSL --&gt;</span><br><span class="line">    &lt;web-resource-collection &gt;</span><br><span class="line">        &lt;web-resource-name &gt;SSL&lt;/web-resource-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/web-resource-collection&gt;</span><br><span class="line">    &lt;user-data-constraint&gt;</span><br><span class="line">        &lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt;</span><br><span class="line">    &lt;/user-data-constraint&gt;</span><br><span class="line">&lt;/security-constraint&gt;</span><br></pre></td></tr></table></figure>

<h3 id="5-最终效果"><a href="#5-最终效果" class="headerlink" title="5.最终效果"></a>5.最终效果</h3><p><a href="https://file.luoruiyuan.cn/files/blog/20170908135250794301.jpg" target="_blank" rel="noopener"><img src="https://file.luoruiyuan.cn/files/blog/20170908135250794301.jpg#alt=12" alt></a></p>
]]></content>
  </entry>
  <entry>
    <title>学习计划</title>
    <url>/posts/5e21c553/</url>
    <content><![CDATA[<h3 id="学习重点"><a href="#学习重点" class="headerlink" title="学习重点"></a>学习重点</h3><p><img src="https://cdn.nlark.com/yuque/0/2019/png/215718/1567514692551-49e3e165-3fab-4dd7-895e-4b7e9a57ec24.png#align=left&display=inline&height=25&name=image.png&originHeight=25&originWidth=25&size=1539&status=done&width=25" alt="image.png">插入「脑图」并进行编辑<br><img src="https://cdn.nlark.com/yuque/0/2019/png/215718/1567567603546-29ab2829-0200-4200-94a0-c2757113ac2c.png" alt></p>
<h3 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h3><h4 id="课堂-PPT"><a href="#课堂-PPT" class="headerlink" title="课堂 PPT"></a>课堂 PPT</h4><p><img src="https://cdn.nlark.com/yuque/0/2019/png/215718/1567514692551-49e3e165-3fab-4dd7-895e-4b7e9a57ec24.png#align=left&display=inline&height=25&name=image.png&originHeight=25&originWidth=25&size=1539&status=done&width=25" alt="image.png">嵌入「本地文件」，在文档中可预览此文件：</p>
<blockquote>
<p>脑图（XMind、Mind Manager、Mind Node）<br>设计文件（PhotoShop、Sketch、Axure)<br>办公文件（PDF、PPT、Word、Excel、Keynote、Pages、Numbers）</p>
</blockquote>
<h4 id="教学视频"><a href="#教学视频" class="headerlink" title="教学视频"></a>教学视频</h4><p><img src="https://cdn.nlark.com/yuque/0/2019/png/215718/1567514692551-49e3e165-3fab-4dd7-895e-4b7e9a57ec24.png#align=left&display=inline&height=25&name=image.png&originHeight=25&originWidth=25&size=1539&status=done&width=25" alt="image.png">嵌入「本地视频」或「在线视频」，如优酷及 Bilibili 视频：</p>
<iframe src="https://player.bilibili.com/player.html?aid=55895675" frameborder="no" allowfullscreen="true"></iframe>

<h4 id="阅读材料"><a href="#阅读材料" class="headerlink" title="阅读材料"></a>阅读材料</h4><p><img src="https://cdn.nlark.com/yuque/0/2019/png/215718/1567514692551-49e3e165-3fab-4dd7-895e-4b7e9a57ec24.png#align=left&display=inline&height=25&name=image.png&originHeight=25&originWidth=25&size=1539&status=done&width=25" alt="image.png">插入「附件」</p>
<p><a href="https://www.yuque.com/attachments/yuque/0/2019/pdf/105911/1570525820813-a79b3d0f-38cb-4a73-a2bb-ce8f091f2049.pdf?_lake_card=%7B%22uid%22%3A%22rc-upload-1567514495288-26%22%2C%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2019%2Fpdf%2F105911%2F1570525820813-a79b3d0f-38cb-4a73-a2bb-ce8f091f2049.pdf%22%2C%22name%22%3A%22%E7%A4%BA%E4%BE%8BPDF.pdf%22%2C%22size%22%3A16189%2C%22type%22%3A%22application%2Fpdf%22%2C%22ext%22%3A%22pdf%22%2C%22progress%22%3A%7B%22percent%22%3A0%7D%2C%22status%22%3A%22done%22%2C%22percent%22%3A0%2C%22id%22%3A%22wTSXR%22%2C%22refSrc%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2019%2Fpdf%2F105911%2F1569247460410-d74712f0-05ce-474b-b914-d76439248860.pdf%22%2C%22card%22%3A%22file%22%7D" target="_blank" rel="noopener">示例 PDF.pdf</a></p>
<h3 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h3><p><img src="https://cdn.nlark.com/yuque/0/2019/png/215718/1567514692551-49e3e165-3fab-4dd7-895e-4b7e9a57ec24.png#align=left&display=inline&height=25&name=image.png&originHeight=25&originWidth=25&size=1539&status=done&width=25" alt="image.png">插入「表格」，可以在表格框里插入对应的图片、附件、状态</p>
<table>
<thead>
<tr>
<th align="center"><strong>书名</strong></th>
<th align="center"><strong>章节</strong></th>
<th align="center"><strong>计划阅读时间</strong></th>
<th align="center"><strong>进程</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">《基础有机化学》</td>
<td align="center">第三章</td>
<td align="center">2h</td>
<td align="center">已完成</td>
</tr>
<tr>
<td align="center">《无机化学》</td>
<td align="center">第一章</td>
<td align="center">1h</td>
<td align="center">进行中</td>
</tr>
<tr>
<td align="center">《物理化学》</td>
<td align="center">第四章</td>
<td align="center">1h</td>
<td align="center">未开始</td>
</tr>
<tr>
<td align="center"><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/105911/1571983625842-9d347225-731e-41e0-ab51-91a232a2db72.jpeg#align=left&display=inline&height=3264&name=alex-knight-2EJCSULRwC8-unsplash.jpg&originHeight=3264&originWidth=4896&size=1555309&status=done&width=4896" alt="alex-knight-2EJCSULRwC8-unsplash.jpg"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>CSS基础知识总结</title>
    <url>/posts/6b2d1dfa/</url>
    <content><![CDATA[<blockquote>
<p>这篇文章仅仅是对<code>CSS</code>的一个总结笔记, 方便后期使用时查找相关知识点</p>
</blockquote>
<ul>
<li><code>Cascading Style Sheets</code>层叠样式表，WEB标准中的表现标准语言，主要对网页信息的显示进行控制</li>
<li>样式通常存储在样式表中: 内部样式、表外部样式表、内联样式表（行内样式、嵌入式样式）<ul>
<li>外部样式表可以极大提高工作效率</li>
<li>外部样式表通常存储在 CSS 文件中</li>
</ul>
</li>
</ul>
<a id="more"></a>


<h2 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a>CSS样式</h2><h3 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="comment">/*css语句*/</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用<code>style</code>标记创建样式时，最好将该标记写在<code>&lt;head&gt;&lt;/head&gt;</code></p>
<h3 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h3><ul>
<li>外部样式表通常存储在 CSS 文件中</li>
<li>在CSS文件中创建<code>xxx.css</code>文件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--方法1--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"目标文件的路径及文件名全称"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--方法2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="keyword">@import</span> url(“目标文件的路径及文件名全称”);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="note warning"><p>需要说明</p></div>

<ul>
<li>使用<code>link</code>元素导入外部样式表时，需要将该元素写在文档头部，即<code>&lt;head&gt;与&lt;/head&gt;</code>中</li>
<li><code>@</code>和<code>import</code>之间没有空格, <code>url</code>和小括号之间也没有空格, 必须结尾以分号结束</li>
</ul>
<div class="note info"><p>`link`和`import`导入外部样式区别</p></div>

<ul>
<li>老祖宗的差别<ul>
<li><code>link</code>属于<code>XHTML</code>标签，而<code>@import</code>是<code>CSS</code>提供的一种方式。</li>
<li><code>link</code>标签除了可以加载<code>CSS</code>外，还可以做很多其它事情，比如定义<code>RSS</code>、定义<code>rel</code>连接属性等，<code>@import</code>只能加载<code>css</code></li>
</ul>
</li>
<li>加载顺序的差别<ul>
<li>当一个页面被加载的时候（就是被浏览者浏览的时候)，<code>link</code>引用的<code>CSS</code>会同时被加载</li>
<li>而<code>@import</code>引用的<code>CSS</code>会等到页面全部被下载完再被加载</li>
<li>所以有时候浏览<code>@import</code>加载<code>CSS</code>的页面时开始会没有样式</li>
</ul>
</li>
<li>兼容性的差别<ul>
<li><code>@import</code>是<code>CSS2.1</code>提出的，所以老的浏览器不支持</li>
<li><code>@import</code>只在IE5以上的才能识别，而<code>link</code>标签无此问题。</li>
</ul>
</li>
<li>使用DOM控制样式差别<ul>
<li>当使用<code>javascript</code>控制<code>dom</code>去改变样式的时候</li>
<li>只能使用<code>link</code>标签，因为<code>@import</code>不是<code>dom</code>可以控制的</li>
</ul>
</li>
<li>样式的优先级<ul>
<li>内联样式表优先级别最高</li>
<li>内部样式表与外部样式表的优先级和书写的顺序的顺序有关，后书写的优先级别高</li>
</ul>
</li>
</ul>
<h2 id="CSS语法"><a href="#CSS语法" class="headerlink" title="CSS语法"></a>CSS语法</h2><p><img src="http://titanjun.oss-cn-hangzhou.aliyuncs.com/html5/cssSel.png" alt="cssSelect"></p>
<ul>
<li>每个CSS样式由3个部分组成，选择器，属性和值。</li>
<li>属性必须放在{}花括号中，属性和属性值用冒号连接。</li>
<li>每条声明用分号结束。</li>
<li>当一个属性有多个属性值的时候，属性值与属性值不分先后顺序。</li>
<li>在书写样式过程中，空格、换行等操作不影响属性显示。</li>
</ul>
<h3 id="简单属性使用"><a href="#简单属性使用" class="headerlink" title="简单属性使用"></a>简单属性使用</h3><h4 id="常用属性介绍"><a href="#常用属性介绍" class="headerlink" title="常用属性介绍"></a>常用属性介绍</h4><ul>
<li><code>width</code>：宽度<ul>
<li>设置元素的宽度值，值为数字；单位为px（像素)、em（字符）、%（百分比）</li>
<li>默认值为auto（自动，通过浏览器自动计算出宽度值单位为像素）</li>
<li>像素在浏览器中的概念：<br>像素数决定元素或文字在浏览器中显示的大小或位置，页面中的最小计量单位为1个像素，即1px。</li>
</ul>
</li>
<li><code>height</code>：高度<ul>
<li>设置元素的高度值，值为数字；单位为px（像素)、em（字符）、%（百分比）</li>
<li>默认值为auto（自动，通过浏览器自动计算出宽度值单位为像素）</li>
</ul>
</li>
</ul>
<h3 id="背景设置"><a href="#背景设置" class="headerlink" title="背景设置"></a>背景设置</h3><ul>
<li><code>background-color</code>：背景颜色<ul>
<li>背景颜色；规定颜色值为颜色单词名称例如（red）或者十六进制值得颜色例如（#ff0000）或者为rgb值的颜色例如（rgb(255, 0, 0)）</li>
<li>可以为所有元素设置背景色，这包括 body 一直到 em 和 a 等行内元素</li>
</ul>
</li>
<li><code>background-image</code>: 背景图像<ul>
<li><code>background-image: url(&quot;&quot;);</code></li>
<li>元素的背景图像, 默认情况下，背景图像进行平铺重复显示，以覆盖整个元素实体</li>
</ul>
</li>
<li><code>background-repeat</code>: 设置背景图像是否及如何重复<ul>
<li><code>repeat</code>: 背景图像将向垂直和水平方向重复,   这是默认</li>
<li><code>repeat-x</code>: 只有水平位置会重复背景图像</li>
<li><code>repeat-y</code>: 只有垂直位置会重复背景图像</li>
<li><code>no-repeat</code>: <code>background-image</code>不会重复</li>
<li><code>inherit</code>: 指定<code>background-repea</code>属性设置应该从父元素继承</li>
</ul>
</li>
<li><code>background-attachment</code>: 设置背景图像是否固定或者随着页面的其余部分滚动<ul>
<li><code>scroll</code>: 背景图片随页面的其余部分滚动。这是默认</li>
<li><code>fixed</code>: 背景图像是固定的</li>
<li><code>inherit</code>: 指定设置应该从父元素继承</li>
</ul>
</li>
<li><code>background-position</code>: 设置背景图像的起始位置<ul>
<li>设置方式</li>
</ul>
</li>
<li><code>background-size</code>: (CSS3)指定背景图片大小<ul>
<li><code>length</code>: 设置背景图片高度和宽度。第一个值设置宽度，第二个值设置的高度。如果只给出一个值，第二个是设置为 auto(自动)</li>
<li><code>percentage</code>: 将计算相对于背景定位区域的百分比。第一个值设置宽度，第二个值设置的高度。如果只给出一个值，第二个是设置为”auto(自动)”</li>
<li><code>cover</code>: 此时会保持图像的纵横比并将图像缩放成将完全覆盖背景定位区域的最小大小。</li>
<li><code>contain</code>: 此时会保持图像的纵横比并将图像缩放成将适合背景定位区域的最大大小</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--如果仅指定一个关键字，其他值将会是"center"--&gt;</span></span><br><span class="line">background-position: left top;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--第一个值是水平位置，第二个值是垂直--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--左上角是0％0％。右下角是100％100％--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果仅指定了一个值，其他值将是50％, 默认值为：0％0％--&gt;</span></span><br><span class="line">background-position: 30% 20%;</span><br></pre></td></tr></table></figure>

<p>设置背景图片样式的两种方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一种方式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line">            background-image: url("http://pcatqk8cn.bkt.clouddn.com/cssSel.png");</span><br><span class="line">            background-repeat: repeat-x;</span><br><span class="line">            background-attachment: fixed;</span><br><span class="line">            background-position: 30% 20%;</span><br><span class="line">            width: 400px;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--简写属性, 合并在一个属性中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line">            background: url("http://pcatqk8cn.bkt.clouddn.com/cssSel.png") repeat-x fixed 30% 20%;</span><br><span class="line">            width: 400px;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="文本设置"><a href="#文本设置" class="headerlink" title="文本设置"></a>文本设置</h3><ul>
<li><code>color</code>：文本颜色<ul>
<li>规定颜色值为颜色单词名称例如（red）或者十六进制值的颜色例如（#ff0000）或者为rgb值的颜色例如（rgb(255, 0, 0)）</li>
<li>一般多为设置字体的颜色</li>
</ul>
</li>
<li><code>text-align</code>: 对齐元素中的文本<ul>
<li><code>left/right/center</code>: 左右居中对齐</li>
<li><code>justify</code>: 实现两端对齐文本效果</li>
</ul>
</li>
<li><code>text-decoration</code>: 用来设置或删除文本的装饰<ul>
<li><code>none</code>:    默认。定义标准的文本。</li>
<li><code>underline</code>: 定义文本下的一条线。</li>
<li><code>overline</code>:    定义文本上的一条线。</li>
<li><code>line-through</code>:    定义穿过文本下的一条线。</li>
<li><code>blink</code>:    定义闪烁的文本</li>
</ul>
</li>
<li><code>text-transform</code>: 属性控制文本的大小写<ul>
<li><code>capitalize</code>: 文本中的每个单词以大写字母开头。</li>
<li><code>uppercase</code>: 定义仅有大写字母。</li>
<li><code>lowercase</code>: 定义无大写字母，仅有小写字母</li>
</ul>
</li>
<li><code>text-indent</code>: 属性规定文本块中首行文本的缩进<ul>
<li><code>length</code>: 定义固定的缩进; %: 定义基于父元素宽度的百分比的缩进</li>
</ul>
</li>
<li><code>direction</code>: 设置文本方向<ul>
<li><code>ltr</code>: 默认, 从左到右; <code>rtl</code>: 从右到左</li>
</ul>
</li>
<li><code>letter-spacing</code>: 设置字符间距<ul>
<li><code>normal</code>: 默认, 无; <code>length</code>: 字符间的固定间距</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-tag">p</span>&#123;</span><br><span class="line">        <span class="comment">/*设置文本颜色*/</span></span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#ff4040</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*设置文本方向*/</span></span><br><span class="line">        <span class="comment">/*ltr: 默认, 从左到右; rtl: 从右到左*/</span></span><br><span class="line">        <span class="attribute">direction</span>: ltr;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*设置每一个字符间距, 可为负值, 默认0*/</span></span><br><span class="line">        <span class="attribute">letter-spacing</span>: <span class="number">2px</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*设置单词(有空格)的间距, 默认0*/</span></span><br><span class="line">        <span class="attribute">word-spacing</span>: <span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*设置行高*/</span></span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">80%</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*设置文本的水平对齐方式*/</span></span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*设置文本的垂直对齐方式*/</span></span><br><span class="line">        <span class="attribute">vertical-align</span>: center;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*设置或删除文本的修饰*/</span></span><br><span class="line">        <span class="comment">/*第一个是下划线的样式, 第二个是下划线的颜色*/</span></span><br><span class="line">        <span class="attribute">text-decoration</span>: line-through chartreuse;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*设置文本的首行缩进*/</span></span><br><span class="line">        <span class="attribute">text-indent</span>: <span class="number">30%</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*设置文本中的字母显示大小写*/</span></span><br><span class="line">        <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="文本字体设置"><a href="#文本字体设置" class="headerlink" title="文本字体设置"></a>文本字体设置</h3><ul>
<li><code>font-family</code>: 指定文本的字体系列</li>
<li><code>font-size</code>: 指定文本的字体大小</li>
<li><code>font-weight</code>: 设置文本的粗细; 默认400, bold: 700</li>
<li><code>font-style</code>: 属性指定文本的字体样式; <code>italic</code>: 斜体; <code>oblique</code>: 倾斜</li>
<li><code>font-variant</code>: 以小型大写字体或者正常字体显示文本; <code>small-caps</code>: 显示小型大写字母的字体</li>
<li><code>font</code>: 简写属性在一个声明中设置所有字体属性<ul>
<li>可设置的属性是（按顺序）： <code>font-style font-variant font-weight font-size/line-height font-family</code></li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-tag">p</span><span class="selector-class">.ex1</span>&#123;</span><br><span class="line">        <span class="attribute">font</span>:<span class="number">15px</span> arial,sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="selector-tag">p</span><span class="selector-class">.ex2</span>&#123;</span><br><span class="line">        <span class="attribute">font</span>:italic bold <span class="number">12px</span>/<span class="number">30px</span> Georgia, serif;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="隐藏-显示元素"><a href="#隐藏-显示元素" class="headerlink" title="隐藏/显示元素"></a>隐藏/显示元素</h3><ul>
<li>控制元素现实和隐藏的属性是: <code>Display</code>(显示) 与 <code>Visibility</code>（可见性）</li>
<li>在介绍属性之前先介绍元素的分类</li>
<li>块级元素(block)<ul>
<li>总是独占一行，表现为另起一行开始，而且其后的元素也必须另起一行显示;</li>
<li>宽度(width)、高度(height)、内边距(padding)和外边距(margin)都可控制;</li>
<li>块级元素主要有： <code>address , blockquote , center , dir , div , dl , fieldset , form , h1 , h2 , h3 , h4 , h5 , h6 , hr , isindex , menu , noframes , noscript , ol , p , pre , table , ul , li</code></li>
</ul>
</li>
<li>内联元素(inline)<ul>
<li>和相邻的内联元素在同一行;</li>
<li>宽度(width)、高度(height)、内边距的<code>top/bottom(padding-top/padding-bottom)</code>和外边距的<code>top/bottom(margin-top/margin-bottom)</code>都不可改变，就是里面文字或图片的大小;</li>
<li>内联元素主要有：<code>a , abbr , acronym , b , bdo , big , br , cite , code , dfn , em , font , i , img , input , kbd , label , q , s , samp , select , small , span , strike , strong , sub , sup ,textarea , tt , u , var</code></li>
</ul>
</li>
<li>可变元素(根据上下文关系确定该元素是块元素还是内联元素)：<ul>
<li><code>applet ,button ,del ,iframe , ins ,map ,object , script</code></li>
</ul>
</li>
</ul>
<h4 id="display"><a href="#display" class="headerlink" title="display"></a>display</h4><ul>
<li>CSS中块级、内联元素的应用：<ul>
<li>利用CSS我们可以摆脱上面表格里HTML标签归类的限制，自由地在不同标签/元素上应用我们需要的属性。</li>
<li>主要用的CSS样式有以下几个：</li>
<li><code>display:none</code> – 隐藏元素</li>
<li><code>display:block</code>  – 显示为块级元素</li>
<li><code>display:inline</code>  – 显示为内联元素</li>
<li><code>display:inline-block</code> – 显示为内联块元素，表现为同行显示并可修改宽高内外边距等属性</li>
<li>我们常将<ul>元素加上display:inline-block样式，原本垂直的列表就可以水平显示了</ul></li>
</ul>
</li>
</ul>
<h4 id="visibility"><a href="#visibility" class="headerlink" title="visibility"></a>visibility</h4><ul>
<li>对于 CSS 里的 <code>visibility</code> 属性，通常其值被设置成 <code>visible</code> 或 <code>hidden</code></li>
<li><code>visibility: hidden</code> 相当于 <code>display:none</code>，能把元素隐藏起来，但两者的区别在于：<ul>
<li><code>display:none</code> – 元素不再占用空间。</li>
<li><code>visibility: hidden</code> – 使元素在网页上不可见，但仍占用空间。</li>
<li><code>visibility: collapse</code> – 一般的元素的表现与<code>hidden</code> 一样，也即其会占用空间。但如果该元素是与<code>table</code> 相关的元素，例如 <code>table row</code>、<code>table column</code>、<code>table column group</code>、<code>table column group</code> 等，其表现却跟 <code>display: none</code> 一样，也即其占用的空间会释放。</li>
</ul>
</li>
<li>在不同浏览器下，对 <code>visibility: collapse</code> 的处理方式不同：<ul>
<li><code>visibility: collapse</code> 的上述特性仅在 <code>Firefox</code> 下起作用。</li>
<li>在 IE 即使设置了 <code>visibility: collapse</code>，还是会显示元素。</li>
<li>在 <code>Chrome</code> 下，即使会将元素隐藏，但无论是否是与 <code>table</code> 相关的元素，<code>visibility: collapse</code> 都与 <code>visibility: hidden</code> 没有什么区别，即仍会占用空间。</li>
</ul>
</li>
</ul>
<h3 id="边框属性"><a href="#边框属性" class="headerlink" title="边框属性"></a>边框属性</h3><ul>
<li>CSS边框属性允许你指定一个元素边框的样式和颜色</li>
<li><code>border-style</code>: 用来定义边框的样式</li>
</ul>
<p><img src="http://titanjun.oss-cn-hangzhou.aliyuncs.com/html5/borderstyle.png" alt="BorderStyle"></p>
<ul>
<li><code>border-radius</code>: 设置边框圆切角</li>
<li><code>border-width</code>: 设置边框宽度<ul>
<li>设置具体的宽度: 2px</li>
<li><code>thin</code>: 细边框, <code>medium</code>: 默认中等, <code>thick</code>: 粗边框, 没有具体的值定义</li>
</ul>
</li>
<li><code>border-color</code>: 设置边框颜色</li>
<li><code>border-bottom</code>: 单独设置底部边框属性, 除此之外还有<code>border-left/right/top</code>属性</li>
<li><code>border-bottom-color</code>: 设置下边框的颜色, 类似的还有<code>border-bottom-style</code>、<code>border-bottom-width</code></li>
<li>代码示例如下</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="comment">/*单独设置一部分边框*/</span></span><br><span class="line">    <span class="selector-class">.p1</span>&#123;</span><br><span class="line">        <span class="comment">/*设置底部边框简写方式, 顺序: width style color*/</span></span><br><span class="line">        <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#ff4040</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*上述代码等同于下面三行代码*/</span></span><br><span class="line">        <span class="comment">/*border-bottom-style: solid;*/</span></span><br><span class="line">        <span class="comment">/*border-bottom-color: #ff4040;*/</span></span><br><span class="line">        <span class="comment">/*border-bottom-width: medium;*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*设置整体的边框*/</span></span><br><span class="line">    <span class="selector-class">.p2</span>&#123;</span><br><span class="line">        <span class="comment">/*简写方式, 也是推荐方式*/</span></span><br><span class="line">        <span class="attribute">border</span>: <span class="number">2px</span> dashed darkviolet;</span><br><span class="line">        <span class="comment">/*设置圆切角*/</span></span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*具体设置*/</span></span><br><span class="line">        <span class="comment">/*border-width: 2px;*/</span></span><br><span class="line">        <span class="comment">/*border-style: dashed;*/</span></span><br><span class="line">        <span class="comment">/*border-color: darkviolet;*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="内-外边距"><a href="#内-外边距" class="headerlink" title="内/外边距"></a>内/外边距</h3><ul>
<li>外边距: 改变元素之间上下左右的间距<ul>
<li>设置所有间距顺序: <code>margin: top right bottom left</code></li>
<li>单独设置上下左右间距: <code>margin-top/bottom/left/right</code></li>
</ul>
</li>
<li>内边距: 改变元素中的内容和元素之间上下左右的间距<ul>
<li>内边距设置方式同上</li>
</ul>
</li>
<li>设置方式, 以外边距为例<ul>
<li>margin:10px 5px 15px 20px;<ul>
<li>上边距是 10px</li>
<li>右边距是 5px</li>
<li>下边距是 15px</li>
<li>左边距是 20px</li>
</ul>
</li>
<li>margin:10px 5px 15px;<ul>
<li>上边距是 10px</li>
<li>右边距和左边距是 5px</li>
<li>下边距是 15px</li>
</ul>
</li>
<li>margin:10px 5px;<ul>
<li>上边距和下边距是 10px</li>
<li>右边距和左边距是 5px</li>
</ul>
</li>
<li>margin:10px;<ul>
<li>所有四个边距都是 10px</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="comment">/*单独设置内外边距*/</span></span><br><span class="line">    <span class="selector-class">.p3</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#30a4e6</span>;</span><br><span class="line">        <span class="comment">/*设置外边距*/</span></span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">12px</span>;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*设置内边距*/</span></span><br><span class="line">        <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">padding-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Float-浮动"><a href="#Float-浮动" class="headerlink" title="Float(浮动)"></a>Float(浮动)</h3><ul>
<li>CSS 的 Float（浮动），会使元素向左或向右移动，其周围的元素也会重新排列</li>
<li>元素的水平方向浮动，意味着元素只能左右移动而不能上下移动。</li>
<li>一个浮动元素会尽量向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止</li>
<li>属性: <code>float</code>, 可选值<ul>
<li><code>left</code> – 元素向左浮动。</li>
<li><code>right</code> – 元素向右浮动。</li>
<li><code>none</code> – 默认值,  元素不浮动，并会显示在其在文本中出现的位置</li>
</ul>
</li>
<li>清除浮动 - 使用<code>clear</code></li>
<li>元素浮动之后，周围的元素会重新排列，为了避免这种情况，使用<code>clear</code>属性。</li>
<li><code>clear</code>属性指定元素两侧不能出现浮动元素<ul>
<li>属性: <code>clear</code>, 可选值</li>
<li><code>left</code> – 元素不允许向左浮动。</li>
<li><code>right</code> – 元素不允许向右浮动。</li>
<li><code>none</code> – 默认值, 允许元素浮动</li>
</ul>
</li>
</ul>
<h3 id="列表样式"><a href="#列表样式" class="headerlink" title="列表样式"></a>列表样式</h3><ul>
<li>在HTML中，有两种类型的列表：<ul>
<li>无序列表 - 列表项标记用特殊图形（如小黑点、小方框等）</li>
<li>有序列表 - 列表项的标记有数字或字母</li>
</ul>
</li>
<li>CSS列表属性作用如下：<ul>
<li>设置不同的列表项标记为有序列表</li>
<li>设置不同的列表项标记为无序列表</li>
<li>设置列表项标记为图像</li>
</ul>
</li>
<li>所有的CSS列表属性<ul>
<li><code>list-style-image</code>: 将图象设置为列表项标志。</li>
<li><code>list-style-position</code>: 设置列表中列表项标志的位置<ul>
<li><code>inside</code>: 列表项目标记放置在文本以内，且环绕文本根据标记对齐</li>
<li><code>outside</code>: 默认值, 保持标记位于文本的左侧。列表项目标记放置在文本以外，且环绕文本不根据标记对齐</li>
</ul>
</li>
<li><code>list-style-type</code>: 设置列表项标志的类型</li>
<li><code>list-style</code>: 简写属性, 把所有的属性设置在一个声明中, 顺序为: <code>type position image</code></li>
</ul>
</li>
</ul>
<blockquote>
<p><code>list-style-type</code>属性取值介绍</p>
</blockquote>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>none</td>
<td>无标记。</td>
</tr>
<tr>
<td>disc</td>
<td>默认。标记是实心圆。</td>
</tr>
<tr>
<td>circle</td>
<td>标记是空心圆。</td>
</tr>
<tr>
<td>square</td>
<td>标记是实心方块。</td>
</tr>
<tr>
<td>decimal</td>
<td>标记是数字。</td>
</tr>
<tr>
<td>decimal-leading-zero</td>
<td>0开头的数字标记。(01, 02, 03, 等。)</td>
</tr>
<tr>
<td>lower-roman</td>
<td>小写罗马数字(i, ii, iii, iv, v, 等。)</td>
</tr>
<tr>
<td>upper-roman</td>
<td>大写罗马数字(I, II, III, IV, V, 等。)</td>
</tr>
<tr>
<td>lower-alpha</td>
<td>小写英文字母The marker is lower-alpha (a, b, c, d, e, 等。)</td>
</tr>
<tr>
<td>upper-alpha</td>
<td>大写英文字母The marker is upper-alpha (A, B, C, D, E, 等。)</td>
</tr>
<tr>
<td>lower-greek</td>
<td>小写希腊字母(alpha, beta, gamma, 等。)</td>
</tr>
<tr>
<td>lower-latin</td>
<td>小写拉丁字母(a, b, c, d, e, 等。)</td>
</tr>
<tr>
<td>upper-latin</td>
<td>大写拉丁字母(A, B, C, D, E, 等。)</td>
</tr>
<tr>
<td>hebrew</td>
<td>传统的希伯来编号方式</td>
</tr>
<tr>
<td>armenian</td>
<td>传统的亚美尼亚编号方式</td>
</tr>
<tr>
<td>georgian</td>
<td>传统的乔治亚编号方式(an, ban, gan, 等。)</td>
</tr>
<tr>
<td>cjk-ideographic</td>
<td>简单的表意数字</td>
</tr>
<tr>
<td>hiragana</td>
<td>标记是：a, i, u, e, o, ka, ki, 等。（日文片假名）</td>
</tr>
<tr>
<td>katakana</td>
<td>标记是：A, I, U, E, O, KA, KI, 等。（日文片假名）</td>
</tr>
<tr>
<td>hiragana-iroha</td>
<td>标记是：i, ro, ha, ni, ho, he, to, 等。（日文片假名）</td>
</tr>
<tr>
<td>katakana-iroha</td>
<td>标记是：I, RO, HA, NI, HO, HE, TO, 等。（日文片假名）</td>
</tr>
</tbody></table>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-tag">ul</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: chartreuse;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*简写方式*/</span></span><br><span class="line">        <span class="attribute">list-style</span>: circle outside <span class="built_in">url</span>(<span class="string">""</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*分开设置*/</span></span><br><span class="line">        <span class="comment">/*list-style-position: outside;*/</span></span><br><span class="line">        <span class="comment">/*list-style-type: circle;*/</span></span><br><span class="line">        <span class="comment">/*list-style-image: url("");*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*元素名称&#123; 属性: 属性值; &#125;*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123; <span class="attribute">color</span>: red; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>说明：<ul>
<li>标签选择器：以文档语言对象类型作为选择器，即使用结构中元素名称作为选择器。例如body、div、p、img、em、strong、span等等。</li>
<li>所有的页面元素都可以作为选择器</li>
</ul>
</li>
<li>用法：<ul>
<li>如果想改变某个元素的默认样式时，可以使用元素选择器。</li>
<li>统一文档某个元素显示效果时，可以使用类型选择器。</li>
</ul>
</li>
</ul>
<h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*#id名&#123; 属性: 属性值;&#125;*/</span></span><br><span class="line"><span class="selector-id">#menu</span>&#123; <span class="attribute">color</span>: red;  &#125;</span><br><span class="line"><span class="selector-id">#top</span>&#123; </span><br><span class="line">    <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用id选择器时，应该为元素定义id属性。<br>如：<code>&lt;div id=&quot;top&quot;&gt;&lt;/div&gt;</code></li>
<li>id选择器的语法格式：“#”加上自定义的id名称。</li>
<li>id名命名取英文名，不能使用关键字（所有的标记和属性都是关键字）<br>如：head标记</li>
<li>一个id名称只能对应文档中的一个具体元素对象。<br>因为id只能定义页面中某一个唯一的元素对象。</li>
<li>id选择器最大的用处：创建网页的外围结构</li>
</ul>
<h4 id="class选择器"><a href="#class选择器" class="headerlink" title="class选择器"></a>class选择器</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* .class类名&#123; 属性: 属性值;&#125; */</span></span><br><span class="line"><span class="selector-class">.top</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>说明：<ul>
<li>使用类选择器时，应该先为每个元素定义一个类名称。</li>
<li>类选择器的语法格式是：<code>&lt;div class=&quot;top&quot;&gt;&lt;/div&gt;</code></li>
</ul>
</li>
<li>用法：<ul>
<li>class选择器更适合定义一类样式</li>
</ul>
</li>
<li>注意：<ul>
<li>类名的第一个字符不能使用数字，它无法再Mozilla或Firefox中起作用。</li>
</ul>
</li>
</ul>
<h4 id="通配符"><a href="#通配符" class="headerlink" title="*通配符"></a>*通配符</h4><ul>
<li>通配符选择器是一种全局选择器, 常用来重置样式</li>
<li>通配符的写法是<code>*</code>，其含义就是所有元素。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*   *&#123; 属性: 属性值;&#125;   */</span></span><br><span class="line">*&#123; <span class="attribute">padding</span>:<span class="number">0</span>; <span class="attribute">margin</span>:<span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h4><p>用于选择同时有多个选择器匹配的元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 选择器1选择器2&#123; 属性: 属性值; &#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-class">.center</span> &#123; <span class="attribute">color</span>:red; <span class="attribute">text-align</span>:center; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-id">#center</span> &#123; <span class="attribute">color</span>:red; <span class="attribute">text-align</span>:center; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>第一种格式类似于：<code>h1.center</code><ul>
<li>这种格式由标签选择器和类选择器组成。</li>
</ul>
</li>
<li>第二种格式类似于：<code>h1#center</code><ul>
<li>这种格式由标签选择器和id选择器组成。</li>
</ul>
</li>
<li>两个选择器之间不能有空格，必须连续书写。</li>
<li>以上这两种格式组成的选择器，也就是前者所定义的标签类型和后者的类或者id的元素，称之为交集选择器。</li>
</ul>
<h4 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h4><ul>
<li>并集选择器是一种群组选择器</li>
<li>当有多个选择器应用相同的样式时，可以将选择器用<code>,</code>分隔，合并为一组。</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">选择器1,选择器2,选择器3&#123; 属性: 属性值; &#125;</span><br></pre></td></tr></table></figure>

<h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">选择器1 选择器2&#123; 属性: 属性值; &#125;</span><br></pre></td></tr></table></figure>

<p>选择器1和选择器2用空格隔开，含义就是选择器1中包含的所有选择器2;</p>
<h4 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">选择器1&gt;选择器2&#123; 属性: 属性值; &#125;</span><br></pre></td></tr></table></figure>

<p>选择器1和选择器2用&gt;连接，含义就是选择器1中所有子一级选择器2.</p>
<h4 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">a:link&#123;属性：属性值;&#125;超链接的初始状态;</span><br><span class="line">a:visited&#123;属性：属性值;&#125;超链接被访问后的状态;</span><br><span class="line">a:hover&#123;属性：属性值;&#125;鼠标悬停，即鼠标划过超链接时的状态;</span><br><span class="line">a:active&#123;属性：属性值;&#125;超链接被激活时的状态，即鼠标按下时超链接的状态;</span><br></pre></td></tr></table></figure>

<ul>
<li>当这4个超链接伪类选择器联合使用时，应注意他们的顺序，正常顺序为：<code>a:link,a:visited,a:hover,a:active</code>,错误的顺序有时会使超链接的样式失效；</li>
<li>为了简化代码，可以把伪类选择符中相同的声明提出来放在a选择符中；<br>例如：<code>a{color:red;} a:hover{color:green;}</code> 表示超链接的三种状态都相同，只有鼠标划过变颜色</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>WebStorm</tag>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac环境下MySQL的安装和基本命令的使用</title>
    <url>/posts/46193fbc/</url>
    <content><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/4122543-9dfa73f3a5747e75.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mysql"></p>
<a id="more"></a>

<ul>
<li><code>MySQL</code>是一种关系数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</li>
<li><code>MySQL</code>所使用的<code>SQL</code>语言是用于访问数据库的最常用标准化语言。</li>
<li>由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，许多中小型网站为了降低网站总体拥有成本而选择了<code>MySQL</code>作为网站数据库。</li>
<li><code>MySQL</code>是一个多用户、多线程的关系型数据库管理系统。 工作模式是基于客户机/服务器结构。目前它可以支持几乎所有的操作系统</li>
<li>简单的来说，<code>MySQL</code>是一个开放的、快速的、多线程的、多用户的SQL数据库服务器</li>
</ul>
<h2 id="MySQL的安装"><a href="#MySQL的安装" class="headerlink" title="MySQL的安装"></a>MySQL的安装</h2><p>工欲善其事必先利其器, 要研究<code>MySQL</code>我们首先要安装<code>MySQL</code>, 这里只介绍<code>Mac</code>环境下的安装和数据库操作</p>
<h3 id="下载MySQL"><a href="#下载MySQL" class="headerlink" title="下载MySQL"></a>下载<code>MySQL</code></h3><p>直接打开<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">MySQL官网下载页</a>, 选择<code>mac OS</code>系统后, 选择<code>DMG</code>格式下载软件</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4122543-4b588c7801a15bf2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SQLDownload1"></p>
<p>接着, 会跳转到如下页面, 你只需要选择不登录,直接下载即可(当然也可以选择注册并登录)</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4122543-4d7bddda7663e338.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SQLDownload2"></p>
<ul>
<li>下载好后, 按照<code>dmg</code>里面的<code>pkg</code>文件一路安装即可, 但是需要注意的是<ul>
<li>除了倒数第二步之外按照默认一路安装即可</li>
<li>倒数第二步会有一个设置管理员密码的过程, 设置好后, 一定要牢记该密码, 后期链接数据库会需要</li>
</ul>
</li>
<li>最后打开系统偏好设置, 最后会有一个<code>MySQL</code>的图标</li>
<li>打开<code>MySQL</code>会看到默认是开启的(安装的时候按照默认设置安装的情况下)</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4122543-a704a63464f08911.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<div class="note success"><p>到这里`MySQL`就已经基本安装完成了, 不需要再修改什么配置了</p></div>


<h3 id="安装Navicat-for-MySQL"><a href="#安装Navicat-for-MySQL" class="headerlink" title="安装Navicat for MySQL"></a>安装<code>Navicat for MySQL</code></h3><ul>
<li><code>Navicat for MySQL</code>是一套专为<code>MySQL</code>设计的高性能数据库管理及开发工具</li>
<li>它可以用于任何版本<code>3.21</code>或以上的 <code>MySQL</code>数据库服务器</li>
<li>支持大部份<code>MySQL</code>最新版本的功能，包括触发器、存储过程、函数、事件、视图、管理用户等</li>
<li><a href="http://www.navicat.com.cn/products/navicat-for-mysql/" target="_blank" rel="noopener">正版下载地址</a>, 不过正版只有14天的试用时间</li>
<li>安装后, 按照下图完善配置即可, 其中连接名随意, 密码即为安装<code>MySQL</code>环境的时候设置的密码</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4122543-d826199a57d36385.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MySQLConten"></p>
<h2 id="MySQL的基本命令"><a href="#MySQL的基本命令" class="headerlink" title="MySQL的基本命令"></a><code>MySQL</code>的基本命令</h2><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><ul>
<li>首先要打开终端(<code>Windows</code>中是<code>cmd</code>), 以下命令均是在终端运行</li>
<li>启动/停止服务只有在<code>Windows</code>系统中才需要运行, <code>Mac</code>环境下不需要</li>
</ul>
<h4 id="启动-停止服务"><a href="#启动-停止服务" class="headerlink" title="启动/停止服务"></a>启动/停止服务</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 启动服务</span></span><br><span class="line">    格式：net start 服务名称</span><br><span class="line">    示例：net start titansql</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止服务</span></span><br><span class="line">    格式：net stop 服务名称</span><br><span class="line">    示例：net stop titansql</span><br></pre></td></tr></table></figure>

<h4 id="连接数据"><a href="#连接数据" class="headerlink" title="连接数据"></a>连接数据</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">格式：mysql -u 用户名 -p</span><br><span class="line">示例：mysql -u root -p</span><br><span class="line"><span class="comment">// 此处会提示你输入密码(安装时设置的)</span></span><br></pre></td></tr></table></figure>

<h4 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h4><ul>
<li>链接他人或其他服务器的数据库<ul>
<li>格式：<code>mysql -h ip地址 -u 用户名 -p</code></li>
<li>输入对方<code>mysql</code>密码</li>
</ul>
</li>
</ul>
<h4 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h4><div class="note warning"><p>需要注意的是:</p></div>

<p>以下所有命令中如过结尾有分号(<code>;</code>)的一定不能省略, 否则不是一条完整的命令, 系统会提示你继续输入命令</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查看版本（连接后可以执行）</span></span><br><span class="line">select version();</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示当前时间（连接后可以执行）</span></span><br><span class="line">select now();</span><br><span class="line"></span><br><span class="line"><span class="comment">//退出登录(断开连接)</span></span><br><span class="line">quit或exit</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/4122543-64606af819564228.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、创建数据库</span></span><br><span class="line">    格式：create database 数据库名 charset=utf8;</span><br><span class="line">    示例：create database titansql charset=utf8;</span><br><span class="line"><span class="comment">// 2、删除数据库</span></span><br><span class="line">    格式：drop database 数据库名;</span><br><span class="line">    示例：drop database titansql;</span><br><span class="line"><span class="comment">// 3、切换数据库</span></span><br><span class="line">    格式：use 数据库名;</span><br><span class="line">    示例：use titansql;</span><br><span class="line"><span class="comment">// 4、查看当前选择的数据库</span></span><br><span class="line">    select database();</span><br></pre></td></tr></table></figure>

<p>创建完成记得刷新<code>Navicat for MySQL</code></p>
<p><img src="http://p7hfnfk6u.bkt.clouddn.com/sqlSuccess.png" alt="image"></p>
<h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、查看当前数据库中所有表</span></span><br><span class="line">    show tables;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 2、创建表</span></span><br><span class="line">    格式：create table 表名(列及类型);</span><br><span class="line">    说明：</span><br><span class="line">        <span class="comment">//id, name, age: 等为字段名</span></span><br><span class="line">        <span class="comment">//auto_increment: 表示自增长   </span></span><br><span class="line">        <span class="comment">//primary key: 表示主键  </span></span><br><span class="line">        <span class="comment">//int, varchar(20): 等为数据类型, 20为可存储的字节数</span></span><br><span class="line">        <span class="comment">//not null: 表示不为空</span></span><br><span class="line">        <span class="comment">//default: 为设置默认值</span></span><br><span class="line">    示例：create table student(<span class="keyword">id</span> <span class="keyword">int</span> auto_increment primary key, name varchar(<span class="number">20</span>) not null, age <span class="keyword">int</span> not null, gender bit <span class="keyword">default</span> <span class="number">1</span>, address varchar(<span class="number">20</span>), isDelete bit <span class="keyword">default</span> <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">// 3、删除表</span></span><br><span class="line">    格式：drop table 表名;</span><br><span class="line">    示例：drop table student;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 4、查看表结构</span></span><br><span class="line">    格式：desc 表名;</span><br><span class="line">    示例：desc student;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 5、查看建表语句</span></span><br><span class="line">    格式：show create table 表名;</span><br><span class="line">    示例：show create table student;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 6、重命名表名</span></span><br><span class="line">    格式：rename table 原表名 to 新表名;</span><br><span class="line">    示例：rename table car to newCar;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 7、修改表</span></span><br><span class="line">    格式：alter table 表名 add|change|drop 列名 类型;</span><br><span class="line">    示例：alter table newcar add isDelete bit <span class="keyword">default</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、增</span><br><span class="line">    a、全列插入</span><br><span class="line">        格式：insert into 表名 values(...);</span><br><span class="line">        说明：主键列是自动增长，但是在全列插入时需要占位，通常使用<span class="number">0</span>，插入成功以后以实际数据为准</span><br><span class="line">        示例：insert into student values(<span class="number">0</span>, <span class="string">"tom"</span>, <span class="number">19</span>, <span class="number">1</span>, <span class="string">"北京"</span>, <span class="number">0</span>);</span><br><span class="line">    b、缺省插入</span><br><span class="line">        格式：insert into 表名(列<span class="number">1</span>,列<span class="number">2</span>,……) values(值<span class="number">1</span>,值<span class="number">2</span>,……);</span><br><span class="line">        示例：insert into student(name, age, address) values(<span class="string">"titan"</span>, <span class="number">19</span>, <span class="string">"上海"</span>);</span><br><span class="line">    c、同时插入多条数据</span><br><span class="line">        格式：insert into 表名 values(...),(...),……</span><br><span class="line">        示例：insert into student values(<span class="number">0</span>, <span class="string">"jun"</span>, <span class="number">18</span>, <span class="number">0</span>, <span class="string">"北京"</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="string">"poi"</span>, <span class="number">22</span>, <span class="number">1</span>, <span class="string">"海南"</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="string">"coder"</span>, <span class="number">20</span>, <span class="number">0</span>, <span class="string">"石家庄"</span>, <span class="number">0</span>);</span><br><span class="line"><span class="number">2</span>、删</span><br><span class="line">    格式：delete from 表名 where 条件;  </span><br><span class="line">    示例：delete from student where <span class="keyword">id</span>=<span class="number">4</span>;</span><br><span class="line">    注意：没有条件是全部删除，慎用</span><br><span class="line"><span class="number">3</span>、改</span><br><span class="line">    格式：update 表名 set 列<span class="number">1</span>=值<span class="number">1</span>,列<span class="number">2</span>=值<span class="number">2</span>,…… where 条件;</span><br><span class="line">    示例：update student set age=<span class="number">16</span> where <span class="keyword">id</span>=<span class="number">7</span>;  </span><br><span class="line">    注意：没有条件是全部列都修改，慎用</span><br><span class="line"><span class="number">4</span>、查</span><br><span class="line">    说明：查询表中的全部数据</span><br><span class="line">    格式：select * from 表名;</span><br><span class="line">    示例：select * from student;</span><br></pre></td></tr></table></figure>

<h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><ul>
<li>格式：<code>select * from 表名;</code></li>
<li>说明：<ul>
<li><code>from</code>关键字后面是表名，表示数据来源于这张表</li>
<li><code>select</code>后面写表中的列名，如果是*表示在结果集中显示表中的所有列</li>
<li>在<code>select</code>后面的列名部分，可以使用<code>as</code>为列名起别名，这个别名显示在结果集中</li>
<li>如果要查询多个列，之间使用逗号分隔</li>
</ul>
</li>
<li>示例：</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询所有数据</span></span><br><span class="line">select * from student;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询某列数据</span></span><br><span class="line">select name, age from student;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以别名显示搜索结果</span></span><br><span class="line">select name as a, age from student;</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/4122543-82c6b03e2d0e3f89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="别名"></p>
<h4 id="消除重复行"><a href="#消除重复行" class="headerlink" title="消除重复行"></a>消除重复行</h4><ul>
<li>在<code>select</code>后面列前面使用<code>distinct</code>可以消除重复的行</li>
<li>示例：</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">select gender from student;</span><br><span class="line">select distinct gender from student;</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/4122543-763a7bd7dcafd230.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="distinct"></p>
<h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、语法</span></span><br><span class="line">    select * from 表名 where 条件</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 2、比较运算符</span></span><br><span class="line">        等于        =</span><br><span class="line">        大于        &gt;</span><br><span class="line">        小于        &lt;</span><br><span class="line">        大于等于    &gt;=</span><br><span class="line">        小于等于    &lt;=</span><br><span class="line">        不等于      !=或&lt;&gt;</span><br><span class="line">    需求：查询<span class="keyword">id</span>值大于<span class="number">8</span>的所有数据</span><br><span class="line">    示例：select * from student where <span class="keyword">id</span>&gt;<span class="number">8</span>;</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 3、逻辑运算符</span></span><br><span class="line">        and    并且</span><br><span class="line">        or     或者</span><br><span class="line">        not    非</span><br><span class="line">            </span><br><span class="line">    需求：查询<span class="keyword">id</span>值大于<span class="number">7</span>的女同学</span><br><span class="line">    示例：select * from student where <span class="keyword">id</span>&gt;<span class="number">7</span> and gender=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 4、模糊查询(like)</span></span><br><span class="line">        %: 表示任意多个任意字符</span><br><span class="line">        _: 表示一个任意字符</span><br><span class="line"></span><br><span class="line">    需求：查询姓习的同学</span><br><span class="line">    示例：</span><br><span class="line">        select * from student where name like <span class="string">"习%"</span>;</span><br><span class="line">        select * from student where name like <span class="string">"习_"</span>;</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 5、范围查询</span></span><br><span class="line">        <span class="keyword">in</span>                表示在一个非连续的范围内</span><br><span class="line">        between...and...  表示在一个连续的范围内</span><br><span class="line"></span><br><span class="line">    需求：查询编号为<span class="number">8</span>、<span class="number">10</span>、<span class="number">12</span>的学生</span><br><span class="line">    示例：select * from student where <span class="keyword">id</span> <span class="keyword">in</span> (<span class="number">8</span>,<span class="number">10</span>,<span class="number">12</span>);</span><br><span class="line">    需求：查询编号为<span class="number">6</span>到<span class="number">8</span>的学生</span><br><span class="line">    示例：select * from student where <span class="keyword">id</span> between <span class="number">6</span> and <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6、空判断</span></span><br><span class="line">        注意：null与<span class="string">""</span>是不同的</span><br><span class="line">        判断空：is null</span><br><span class="line">        判断非空： is not null</span><br><span class="line"></span><br><span class="line">    需求：查询没有地址的同学</span><br><span class="line">    示例：select * from student where address is null;</span><br><span class="line">    需求：查询有地址的同学</span><br><span class="line">    示例：select * from student where address is not null;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7、优先级</span></span><br><span class="line">        小括号，not 比较运算符，逻辑运算符</span><br><span class="line">        and比or优先级高，如果同时出现并希望先选or,需要结合()来使用</span><br></pre></td></tr></table></figure>

<h4 id="聚合操作"><a href="#聚合操作" class="headerlink" title="聚合操作"></a>聚合操作</h4><ul>
<li>为了快速等到统计数据，提供了5个聚合函数<ul>
<li><code>count(*)</code>: 表示计算总行数，括号中可以写*和列名</li>
<li><code>max(列)</code>: 表示求此列的最大值</li>
<li><code>min(列)</code>: 表示求此列的最小值</li>
<li><code>sum(列)</code>: 表示求此列的和</li>
<li><code>avg(列)</code>: 表示求此列的平均值</li>
</ul>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需求：查询学生总数</span></span><br><span class="line">select count(*) from student;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需求：查询女生的编号最大值</span></span><br><span class="line">select max(<span class="keyword">id</span>) from student where gender=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需求：查询女生的编号最小值</span></span><br><span class="line">select min(<span class="keyword">id</span>) from student where gender=<span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//需求：查询所有学生的年龄和</span></span><br><span class="line">select sum(age) from student;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需求：查询所有学生的年龄平均值</span></span><br><span class="line">select avg(age) from student;</span><br></pre></td></tr></table></figure>

<h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><ul>
<li>按照字段分组，表示此字段相同的数据会被放到一个集合中。</li>
<li>分组后，只能查询出相同的数据列，对于有差异的数据列无法显示在结果集中</li>
<li>可以对分组后的数据进行统计，做聚合运算</li>
<li>语法：<ul>
<li><code>select 列1,列2,聚合…… from 表名 group by 列1,列2,列3,……;</code></li>
</ul>
</li>
<li>需求：查询男女生总数</li>
<li>示例：</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">select gender,count(*) from student group by gender;</span><br><span class="line">select name,gender,count(*) from student group by gender,age;</span><br></pre></td></tr></table></figure>

<p>分组后的数据筛选：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">select 列<span class="number">1</span>,列<span class="number">2</span>,聚合…… from 表名 group by 列<span class="number">1</span>,列<span class="number">2</span>,列<span class="number">3</span>,…… having 列<span class="number">1</span>,……聚合……;</span><br><span class="line"></span><br><span class="line">示例：select gender,count(*) from student group by gender having gender;</span><br></pre></td></tr></table></figure>

<div class="note info"><p>`where`与`having`的区别：</p></div>

<ul>
<li><code>where</code>是对<code>from</code>后面指定的表进行筛选，属于对原始数据的筛选</li>
<li><code>having</code>是对<code>group by</code>的结果进行筛选</li>
</ul>
<h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><ul>
<li>语法：<code>select * from 表名 order by 列1 asc|desc，列2 asc|desc , ……;</code></li>
<li>说明：<ul>
<li>将数据按照列1进行排序，如果某些列1的值相同，则按照列2进行排序</li>
<li>默认按照从小到大的顺序排序</li>
<li><code>asc</code>: 升序</li>
<li><code>desc</code>: 降序</li>
</ul>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需求：将没有被删除的数据按年龄排序</span></span><br><span class="line">select * from student where isDelete=<span class="number">0</span> order by age desc;</span><br><span class="line">select * from student where isDelete=<span class="number">0</span> order by age desc, <span class="keyword">id</span> desc;</span><br></pre></td></tr></table></figure>

<h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><ul>
<li>语法：<code>select * from 表名 limit start,count;</code></li>
<li>说明：<code>start</code>索引从0开始</li>
<li>示例：</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">select * from student limit <span class="number">0</span>,<span class="number">3</span>;</span><br><span class="line">select * from student limit <span class="number">3</span>,<span class="number">3</span>;</span><br><span class="line">select * from student where gender=<span class="number">1</span> limit <span class="number">0</span>,<span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<h3 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 建表语句：</span></span><br><span class="line">    <span class="number">1</span>、create table <span class="keyword">class</span>(<span class="keyword">id</span> <span class="keyword">int</span> auto_increment primary key, name varchar(<span class="number">20</span>) not null, stuNum <span class="keyword">int</span> not null);</span><br><span class="line">    </span><br><span class="line">    <span class="number">2</span>、create table students(<span class="keyword">id</span> <span class="keyword">int</span> auto_increment primary key, name varchar(<span class="number">20</span>) not null, gender bit <span class="keyword">default</span> <span class="number">1</span>, classid <span class="keyword">int</span> not null, foreign key(classid) references <span class="keyword">class</span>(<span class="keyword">id</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询所有数据</span></span><br><span class="line">    select * from students;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 关联查询：</span></span><br><span class="line"><span class="comment">    分类：</span></span><br><span class="line"><span class="comment">    1、表A inner join 表B：</span></span><br><span class="line"><span class="comment">        表A与表B匹配的行会出现在结果集中</span></span><br><span class="line"><span class="comment">    2、表A left join 表B：</span></span><br><span class="line"><span class="comment">        表A与表B匹配的行会出现在结果集中，外加表A中独有的数据，未对应的数据使用null填充</span></span><br><span class="line"><span class="comment">    3、表A right join 表B：</span></span><br><span class="line"><span class="comment">        表A与表B匹配的行会出现在结果集中，外加表B中独有的数据，未对应的数据使用null填充</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">select students.name,<span class="keyword">class</span>.name from <span class="keyword">class</span> inner join students on <span class="keyword">class</span>.id=students.classid;</span><br><span class="line"></span><br><span class="line">select students.name,<span class="keyword">class</span>.name from <span class="keyword">class</span> left join students on <span class="keyword">class</span>.id=students.classid;</span><br><span class="line"></span><br><span class="line">select students.name,<span class="keyword">class</span>.name from <span class="keyword">class</span> right join students on <span class="keyword">class</span>.id=students.classid;</span><br></pre></td></tr></table></figure>

<div class="note success"><p>至此, `MySQL`中一些常用的命令行也基本介绍完了</p></div>

<p>下面看一些<code>MySQL</code>和<code>Python</code>是如何进行交互的</p>
<h2 id="MySQL和Python的交互"><a href="#MySQL和Python的交互" class="headerlink" title="MySQL和Python的交互"></a><code>MySQL</code>和<code>Python</code>的交互</h2><ul>
<li><code>Python</code>要对<code>MySQL</code>数据库进行操作, 需要引入<code>pymysql</code>模块</li>
<li><code>pymsql</code>是<code>Python</code>中操作<code>MySQL</code>的模块, 并且<code>pymysql</code>支持<code>python3.x</code>版本</li>
<li>首先要先安装<code>pymysql</code>, 终端执行一下语句</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install pymysql</span><br></pre></td></tr></table></figure>

<h3 id="创建数据库连接"><a href="#创建数据库连接" class="headerlink" title="创建数据库连接"></a>创建数据库连接</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 链接数据库</span></span><br><span class="line"><span class="comment"># 参数1：mysql服务所在主机的IP(可以是IP地址, 本机链接可以是localhost)</span></span><br><span class="line"><span class="comment"># 参数2：用户名</span></span><br><span class="line"><span class="comment"># 参数3：密码</span></span><br><span class="line"><span class="comment"># 参数4：要连接的数据库名</span></span><br><span class="line"></span><br><span class="line">db = pymysql.connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'titanjun'</span>, <span class="string">'titansql'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建游标, 查询数据默认为元组类型</span></span><br><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建sql语句</span></span><br><span class="line">sql = <span class="string">"select version()"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行sql语句</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取返回的信息</span></span><br><span class="line">data = cursor.fetchone()</span><br><span class="line">print(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭游标</span></span><br><span class="line">cursor.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭数据库</span></span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>

<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'jun.0929'</span>, <span class="string">'titansql'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建游标, 查询数据默认为元组类型</span></span><br><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建表</span></span><br><span class="line"><span class="comment"># 在建表之前要检查表是否存在, 如果存在则删除</span></span><br><span class="line">cursor.execute(<span class="string">"drop table if exists userinfo"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建表</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    sql = <span class="string">"create table userinfo(id int auto_increment primary key, age int not null)"</span></span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    print(<span class="string">'创建成功'</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'创建表失败'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>

<h3 id="在表中插入数据"><a href="#在表中插入数据" class="headerlink" title="在表中插入数据"></a>在表中插入数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'jun.0929'</span>, <span class="string">'titansql'</span>)</span><br><span class="line"></span><br><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入数据的字符串命令</span></span><br><span class="line">sql = <span class="string">'insert into userinfo values'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>, <span class="number">20</span>):</span><br><span class="line">    ageStr = <span class="string">"(0, %d)"</span> % i</span><br><span class="line">    addsql = sql + ageStr</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursor.execute(addsql)</span><br><span class="line">        <span class="comment"># 提交到数据库, 不然无法保存新建或者修改的数据</span></span><br><span class="line">        db.commit()</span><br><span class="line">        print(<span class="string">'插入数据成功'</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="comment"># 如果提交失败则回滚到上一次的提交, 否则下一次提交可能会冲突</span></span><br><span class="line">        db.rollback()</span><br><span class="line">        print(<span class="string">'插入数据失败'</span>)</span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>

<h3 id="修改-更新-删除数据"><a href="#修改-更新-删除数据" class="headerlink" title="修改/更新/删除数据"></a>修改/更新/删除数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'jun.0929'</span>, <span class="string">'titansql'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改/更新数据命令字符串</span></span><br><span class="line">sql = <span class="string">'update userinfo set age=30 where id=4'</span></span><br><span class="line"><span class="comment"># 删除数据命令字符串</span></span><br><span class="line"><span class="comment"># sql = 'delete from userinfo where age=16'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    db.commit()</span><br><span class="line">    print(<span class="string">'数据更新成功'</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    db.rollback()</span><br><span class="line">    print(<span class="string">'数据更新失败'</span>)</span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>

<h3 id="查询数据-1"><a href="#查询数据-1" class="headerlink" title="查询数据"></a>查询数据</h3><ul>
<li><code>fetchone</code>: 获取下一个查询结果集，结果集是一个对象</li>
<li><code>fetchall</code>: 接收全部的返回的行</li>
<li><code>rowcount</code>: 是一个只读属性，返回<code>execute()</code>方法影响的行数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'jun.0929'</span>, <span class="string">'titansql'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询数据字符串</span></span><br><span class="line">sql = <span class="string">'select * from userinfo where age&gt;16'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获得一条查询数据</span></span><br><span class="line">    print(cursor.fetchone())</span><br><span class="line">    print(<span class="string">'查询到-%d-条数据'</span> % cursor.rowcount)</span><br><span class="line"></span><br><span class="line">    result = cursor.fetchall()</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> result:</span><br><span class="line">        print(<span class="string">'%d--%d'</span> % (row[<span class="number">0</span>], row[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'数据查询成功'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'数据查询失败'</span>)</span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>

<div class="note success"><p>至此, `Python`和`MySQL`交互的最基本最简单的使用也介绍完了, 如有不足之处还望告知</p></div>


<hr>
]]></content>
      <categories>
        <category>数据库基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB的安装及基本命令和pymongo的使用</title>
    <url>/posts/fe1e9880/</url>
    <content><![CDATA[<p><img src="https://cdn.scotch.io/1/OvQmgluRTe5alZTfiQK0_getting-started-with-python-mongo.jpg" alt="image"></p>
<a id="more"></a>



<h2 id="NoSQL简介"><a href="#NoSQL简介" class="headerlink" title="NoSQL简介"></a><code>NoSQL</code>简介</h2><h3 id="NoSQL介绍"><a href="#NoSQL介绍" class="headerlink" title="NoSQL介绍"></a><code>NoSQL</code>介绍</h3><ul>
<li><code>NoSQL</code>全名为<code>Not Only SQL</code>, 指的是非关系型数据库, 在现代的计算系统上每天网络上都会产生庞大的数据量, 网站的数据库性能可能出现问题, <code>NoSQL</code>便应运而生了</li>
<li><code>NoSQL</code>是一项全新的数据库革命性运动, 提倡运用非关系型的数据存储</li>
<li><code>NoSQL</code>用于超大规模数据的存储, 这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展</li>
<li><code>NoSQL</code>的优点: 高扩展性、分布式计算、低成本、构架灵活</li>
<li><code>NoSQL</code>的缺点: 没有标准化、有限的查询功能</li>
</ul>
<h3 id="NoSQL数据库分类"><a href="#NoSQL数据库分类" class="headerlink" title="NoSQL数据库分类"></a><code>NoSQL</code>数据库分类</h3><table>
<thead>
<tr>
<th>类型</th>
<th>部分代表</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td>列存储</td>
<td><code>Hbase</code> 和 <code>Cassandra</code> 和 <code>Hypertable</code></td>
<td>顾名思义，是按列存储数据的。最大的特点是方便存储结构化和半结构化数据，方便做数据压缩，对针对某一列或者某几列的查询有非常大的IO优势。</td>
</tr>
<tr>
<td>文档存储</td>
<td><code>MongoDB</code> 和 <code>CouchDB</code></td>
<td>文档存储一般用类似json的格式存储，存储的内容是文档型的。这样也就有有机会对某些字段建立索引，实现关系数据库的某些功能</td>
</tr>
<tr>
<td><code>key-value</code>存储</td>
<td><code>Tokyo Cabinet/Tyrant</code> 和 <code>Berkeley DB</code> 和 <code>MemcacheDB</code> 和 <code>Redis</code></td>
<td>可以通过<code>key</code>快速查询到其<code>value</code>。一般来说，存储不管<code>value</code>的格式，照单全收。（<code>Redis</code>包含了其他功能）</td>
</tr>
<tr>
<td>图存储</td>
<td><code>Neo4J</code> 和 <code>FlockDB</code></td>
<td>图形关系的最佳存储。使用传统关系数据库来解决的话性能低下，而且设计使用不方便</td>
</tr>
<tr>
<td>对象存储</td>
<td><code>db4o</code> 和 <code>Versant</code></td>
<td>通过类似面向对象语言的语法操作数据库，通过对象的方式存取数据</td>
</tr>
<tr>
<td>xml数据库</td>
<td><code>Berkeley DB XML</code> 和 <code>BaseX</code></td>
<td>高效的存储<code>XML</code>数据，并支持<code>XML</code>的内部查询语法，比如<code>XQuery</code>, <code>Xpath</code></td>
</tr>
</tbody></table>
<div class="note warning"><p>这里主要介绍`MongoDB`和`Redis`的相关介绍和使用</p></div>


<h2 id="什么是MongoDB"><a href="#什么是MongoDB" class="headerlink" title="什么是MongoDB"></a>什么是<code>MongoDB</code></h2><h3 id="MongoDB介绍"><a href="#MongoDB介绍" class="headerlink" title="MongoDB介绍"></a><code>MongoDB</code>介绍</h3><ul>
<li><code>MongoDB</code>是由<code>C++</code>编写的, 是一个基于分布式文件存储的开源数据库系统</li>
<li><code>MongoDB</code>旨在为<code>WEB</code>应用提供可扩展的高性能数据存储解决方案</li>
<li><code>MongoDB</code>将数据库存储为一个文档, 数据结构由键值对组成</li>
<li><code>MongoDB</code>文档类似于<code>JSON</code>对象, 字段值可以包含其他文档, 数组以及文档数组</li>
</ul>
<h3 id="MongoDB主要特点"><a href="#MongoDB主要特点" class="headerlink" title="MongoDB主要特点"></a><code>MongoDB</code>主要特点</h3><ul>
<li><code>MongoDB</code>提供了一个面向文档存储, 基本思路就是将原来的行概念换成更加灵活地文档模型, 一条记录可以表示非常复杂的层次关系</li>
<li><code>MongoDB</code>支持丰富的查询表达式, 查询指令使用<code>json</code>形式的标记, 可轻易查询文档中内嵌的对象及数组</li>
<li><code>MongoDB</code>支持<code>RUBY</code>、<code>Python</code>、<code>Java</code>、<code>C++</code>、<code>PHP</code>、<code>C#</code>等多种编程语言</li>
<li><code>MongoDB</code>包含索引、存储<code>JavaScript</code>、聚合、固定集合、文件存储等操作 </li>
</ul>
<h3 id="MongoDB的安装"><a href="#MongoDB的安装" class="headerlink" title="MongoDB的安装"></a><code>MongoDB</code>的安装</h3><ul>
<li>这里提到的都是在<code>Mac</code>环境下<code>MongoDB</code>的安装过程, 其他环境下请自行百度, 这里就不在介绍了</li>
<li>安装方式有两种安装包安装和使用<code>brew</code>安装, 我是使用安装包安装的, 为了不误导大家, 这里就不介绍<code>brew</code>安装方式了</li>
</ul>
<h4 id="安装包安装"><a href="#安装包安装" class="headerlink" title="安装包安装"></a>安装包安装</h4><p>可以在官网下载安装包: <a href="https://www.mongodb.com/download-center#community" target="_blank" rel="noopener">下载地址</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4122543-9042ff35edee69ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>接下来我们使用如下命令来下载安装</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意修改下列文件名, 我的是4.0.0</span></span><br><span class="line"><span class="comment"># 进入 /usr/local</span></span><br><span class="line">cd /usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">sudo curl -O https://fastdl.mongodb.org/osx/mongodb-osx-x86_64<span class="number">-4.0</span><span class="number">.0</span>.tgz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">sudo tar -zxvf mongodb-osx-x86_64<span class="number">-4.0</span><span class="number">.0</span>.tgz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名为 mongodb 目录</span></span><br><span class="line">sudo mv mongodb-osx-x86_64<span class="number">-4.0</span><span class="number">.0</span> mongodb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完成后，我们可以把 MongoDB 的二进制命令文件目录（安装目录/bin）添加到 PATH 路径中：</span></span><br><span class="line">export PATH=/usr/local/mongodb/bin:$PATH</span><br></pre></td></tr></table></figure>

<h4 id="运行MongoDB"><a href="#运行MongoDB" class="headerlink" title="运行MongoDB"></a>运行<code>MongoDB</code></h4><ol>
<li>首先我们创建一个数据库存储目录 <code>/data/db</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /data/db</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>启动<code>mongodb</code>，默认数据库目录即为 <code>/data/db</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mongod</span><br><span class="line"></span><br><span class="line"># 如果没有创建全局路径 PATH，需要进入以下目录</span><br><span class="line">cd /usr/local/mongodb/bin</span><br><span class="line">sudo ./mongod</span><br></pre></td></tr></table></figure>

<div class="note success"><p>打开浏览器, 在浏览器内输入`127.0.0.1:27017`, 如果出现下面这种则说明安装成功</p></div>

<p><img src="http://upload-images.jianshu.io/upload_images/4122543-74e0aa1894c837c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="success"></p>
<ol start="3">
<li>再打开一个终端进入执行以下命令：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd /usr/local/mongodb/bin </span><br><span class="line">$ ./mongo</span><br></pre></td></tr></table></figure>

<div class="note success"><p>出现这种情况, 则说明数据库连接成功</p></div>

<p><img src="http://upload-images.jianshu.io/upload_images/4122543-95f780e734a7a32e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Content"></p>
<h3 id="安装可视化工具Studio-3T"><a href="#安装可视化工具Studio-3T" class="headerlink" title="安装可视化工具Studio 3T"></a>安装可视化工具<code>Studio 3T</code></h3><ul>
<li>这里推荐官网下载: <a href="https://studio3t.com/download/" target="_blank" rel="noopener">下载地址</a></li>
<li>安装之后打开软件, 选择左上角<code>Connection</code>, 弹出一个新的弹窗</li>
<li>在点击新弹窗上面的<code>New Connection</code>, 弹出一个新的弹窗</li>
<li>在新窗口中输入名字和电脑IP, 点击<code>Save</code></li>
<li>最后选择你新添加的电脑IP, 点击<code>Connect</code>链接</li>
<li>详细步骤如下图所示:</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4122543-566ae508d2b8a580.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Stdio 3T"></p>
<h2 id="MongoDB基本命令操作"><a href="#MongoDB基本命令操作" class="headerlink" title="MongoDB基本命令操作"></a><code>MongoDB</code>基本命令操作</h2><h3 id="操作mongodb数据库"><a href="#操作mongodb数据库" class="headerlink" title="操作mongodb数据库"></a>操作mongodb数据库</h3><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：use 数据库名</span></span><br><span class="line"><span class="comment"># 示例:</span></span><br><span class="line">    use student</span><br></pre></td></tr></table></figure>

<div class="note warning"><p>注意:</p></div>

<ul>
<li>如果数据库不存在则创建数据库，否则切换到指定的数据库</li>
<li>如果刚刚创建的数据库不在列表内，如果要显示它，我们需要向刚刚创建的数据库中插入一些数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 该命令后面会继续介绍</span></span><br><span class="line">db.student.insert(&#123;name:<span class="string">"titan"</span>, age:<span class="number">18</span>, sex:<span class="number">1</span>,address:<span class="string">"北京"</span>, isDelete:<span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="其他相关命令"><a href="#其他相关命令" class="headerlink" title="其他相关命令"></a>其他相关命令</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、删除数据库</span></span><br><span class="line">    <span class="comment"># 前提：使用当前数据库(use 数据库名)</span></span><br><span class="line">    db.dropDatabase()</span><br><span class="line"><span class="comment"># 2、查看所有数据</span></span><br><span class="line">    show dbs</span><br><span class="line"><span class="comment"># 3、查看当前正在使用的数据库</span></span><br><span class="line">    db</span><br><span class="line">    <span class="comment"># 或者</span></span><br><span class="line">    db.getName()</span><br><span class="line"><span class="comment"># 4、断开连接</span></span><br><span class="line">    exit</span><br><span class="line"><span class="comment"># 5、查看命令api</span></span><br><span class="line">    help</span><br></pre></td></tr></table></figure>

<h3 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、查看当前数据库下有哪些集合</span></span><br><span class="line">    show collections</span><br><span class="line"><span class="comment"># 2、创建集合</span></span><br><span class="line">    <span class="comment"># a、</span></span><br><span class="line">        <span class="comment"># 语法：db.createCollection("集合名")</span></span><br><span class="line">        <span class="comment"># 示例：</span></span><br><span class="line">            db.createCollection(<span class="string">"class"</span>)</span><br><span class="line">    <span class="comment"># b、</span></span><br><span class="line">        <span class="comment"># 语法：db.集合名.insert(文档)</span></span><br><span class="line">        <span class="comment"># 示例：</span></span><br><span class="line">            db.student.insert(&#123;name:<span class="string">"titan1"</span>, age:<span class="number">18</span>, sex:<span class="number">1</span>,address:<span class="string">"上海"</span>, isDelete:<span class="number">0</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 区别：两者的区别在于前者创建的是一个空的集合，后者创建一个空的集合并添加一个文档</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、删除当前数据库中的集合</span></span><br><span class="line">    <span class="comment"># 语法：db.集合名.drop()</span></span><br><span class="line">    <span class="comment"># 示例：</span></span><br><span class="line">        db<span class="class">.<span class="keyword">class</span>.<span class="title">drop</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<h3 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h3><h4 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h4><ol>
<li>使用<code>insert()</code>方法插入文档</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 插入一个</span></span><br><span class="line">    <span class="comment"># 语法：</span></span><br><span class="line">        db.集合名.insert(文档)</span><br><span class="line">    <span class="comment"># 示例:</span></span><br><span class="line">        db.student.insert(&#123;name:<span class="string">"jun"</span>, age:<span class="number">19</span>, sex:<span class="number">1</span>,address:<span class="string">"北京"</span>, isDelete:<span class="number">0</span>&#125;)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 2. 插入多个</span></span><br><span class="line">    <span class="comment"># 语法：</span></span><br><span class="line">        db.集合名.insert([文档<span class="number">1</span>, 文档<span class="number">2</span>, ……, 文档n])</span><br><span class="line">    <span class="comment"># 示例：</span></span><br><span class="line">        db.student.insert([&#123;name:<span class="string">"titan2"</span>, age:<span class="number">17</span>, sex:<span class="number">0</span>,address:<span class="string">"深圳"</span>, isDelete:<span class="number">0</span>&#125;,&#123;name:<span class="string">"coder"</span>, age:<span class="number">20</span>, sex:<span class="number">0</span>,address:<span class="string">"上海"</span>, isDelete:<span class="number">0</span>&#125;])</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用<code>save()</code>方法插入文档</li>
</ol>
<ul>
<li>语法：<code>db.集合名.save(文档)</code></li>
<li>说明：如果不指定<code>_id</code>字段，<code>save()</code>方法类似于<code>insert()</code>方法。如果指定<code>_id</code>字段，则会更新<code>_id</code>字段的数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例1：</span></span><br><span class="line">db.student.save(&#123;name:<span class="string">"pro"</span>, age:<span class="number">22</span>, sex:<span class="number">1</span>,address:<span class="string">"安徽"</span>, isDelete:<span class="number">0</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例2：</span></span><br><span class="line">db.student.save(&#123;_id:ObjectId(<span class="string">"59950962019723fe2a0d8d17"</span>),name:<span class="string">"poi"</span>, age:<span class="number">23</span>, sex:<span class="number">1</span>,address:<span class="string">"安徽"</span>, isDelete:<span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="文档更新"><a href="#文档更新" class="headerlink" title="文档更新"></a>文档更新</h4><p>1、<code>update()</code>方法用于更新已存在的文档</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.集合名.update(</span><br><span class="line">        query,</span><br><span class="line">        update,</span><br><span class="line">        &#123;</span><br><span class="line">            upset:&lt;boolean&gt;,</span><br><span class="line">            multi:&lt;boolean&gt;,</span><br><span class="line">            writeConcern:&lt;document&gt;</span><br><span class="line">        &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>参数说明：<ul>
<li><code>query</code>：<code>update</code>的查询条件，类似于<code>sql</code>里<code>update</code>语句内<code>where</code>后面的内容</li>
<li><code>update</code>：<code>update</code>的对象和一些更新的操作符<code>($set,$inc)</code>等，<code>$set</code>直接更新，<code>$inc</code>在原有的基础上累加后更新</li>
<li><code>upset</code>：可选，如果不存在<code>update</code>的记录，是否当新数据插入，<code>true</code>为插入，<code>False</code>为不插入，默认为<code>false</code></li>
<li><code>multi</code>：可选，<code>mongodb</code>默认是<code>false</code>，只更新找到的第一条记录，如果这个参数为<code>true</code>,就按照条件查找出来的数据全部更新</li>
<li><code>writeConcern</code>：可选，抛出异常的级别</li>
</ul>
</li>
<li>需求：将<code>pro</code>的年龄更新为25</li>
<li>示例：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db.student.update(&#123;name:<span class="string">"pro"</span>&#125;,&#123;$set:&#123;age:<span class="number">25</span>&#125;&#125;)</span><br><span class="line">              </span><br><span class="line"><span class="comment"># 累加：</span></span><br><span class="line">db.student.update(&#123;name:<span class="string">"titan"</span>&#125;,&#123;$inc:&#123;age:<span class="number">25</span>&#125;&#125;)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 全改：</span></span><br><span class="line">db.student.update(&#123;name:<span class="string">"titan1"</span>&#125;,&#123;$set:&#123;age:<span class="number">42</span>&#125;&#125;,&#123;multi:true&#125;)</span><br></pre></td></tr></table></figure>

<p>2、<code>save()</code>方法通过传入的文档替换已有文档</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db.集合名.save(</span><br><span class="line">    <span class="comment"># 文档数据</span></span><br><span class="line">    document,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"># 可选，抛出异常的级别</span></span><br><span class="line">        writeConcern:&lt;document&gt;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="文档删除"><a href="#文档删除" class="headerlink" title="文档删除"></a>文档删除</h4><p>在执行<code>remove()</code>函数前，最好先执行<code>find()</code>命令来判断执行的条件是否存在</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.集合名.remove(</span><br><span class="line">    query,</span><br><span class="line">    &#123;</span><br><span class="line">        justOne:&lt;boolean&gt;,</span><br><span class="line">        writeConcern:&lt;document&gt;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>参数说明：<ul>
<li><code>query</code>：可选，删除的文档的条件</li>
<li><code>justOne</code>：可选，如果为true或1，则只删除一个文档</li>
<li><code>writeConcern</code>：可选，抛出异常的级别</li>
</ul>
</li>
<li>示例：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.student.remove(&#123;name:&quot;poi&quot;&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="文档查询"><a href="#文档查询" class="headerlink" title="文档查询"></a>文档查询</h4><p>1、<code>find()</code>方法查询</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db.集合名.find(</span><br><span class="line">    <span class="comment"># query：查询条件</span></span><br><span class="line">    query,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"># key：要显示的字段，1表示显示</span></span><br><span class="line">        &lt;key&gt;:<span class="number">1</span>,</span><br><span class="line">        &lt;key&gt;:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：</span></span><br><span class="line">    db.student.find(&#123;sex:<span class="number">0</span>&#125;,&#123;name:<span class="number">1</span>,age:<span class="number">1</span>&#125;)</span><br><span class="line">    db.student.find(&#123;&#125;,&#123;name:<span class="number">1</span>,age:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>2、其他查询方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询集合下所有的文档(数据)：</span></span><br><span class="line">db.student.find()</span><br><span class="line"></span><br><span class="line"><span class="comment"># pretty()方法以格式化的方式来显示文档</span></span><br><span class="line">db.student.find().pretty()</span><br><span class="line"></span><br><span class="line"><span class="comment"># findOne()方法查询匹配结果的第一条数据</span></span><br><span class="line">db.student.findOne(&#123;gender:<span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="查询条件操作符"><a href="#查询条件操作符" class="headerlink" title="查询条件操作符"></a>查询条件操作符</h4><p>条件操作符用于比较两个表达式并从<code>Mongodb</code>集合中获取数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a、大于 - $gt</span></span><br><span class="line">    <span class="comment"># 语法：</span></span><br><span class="line">        db.集合名.find(&#123;&lt;key&gt;:&#123;$gt:&lt;value&gt;&#125;&#125;)</span><br><span class="line">    <span class="comment"># 示例：</span></span><br><span class="line">        db.student.find(&#123;age:&#123;$gt:<span class="number">20</span>&#125;&#125;)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># b、大于等于 - $gte</span></span><br><span class="line">    <span class="comment"># 语法：</span></span><br><span class="line">        db.集合名.find(&#123;&lt;key&gt;:&#123;$gte:&lt;value&gt;&#125;&#125;)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># c、小于 - $lt</span></span><br><span class="line">    <span class="comment"># 语法：</span></span><br><span class="line">        db.集合名.find(&#123;&lt;key&gt;:&#123;$lt:&lt;value&gt;&#125;&#125;)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># d、小于等于 - $lte</span></span><br><span class="line">    <span class="comment"># 语法：</span></span><br><span class="line">        db.集合名.find(&#123;&lt;key&gt;:&#123;$lte:&lt;value&gt;&#125;&#125;)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># e、大于等于 和 小于等于 - $gte 和 $lte</span></span><br><span class="line">    <span class="comment"># 语法：</span></span><br><span class="line">        db.集合名.find(&#123;&lt;key&gt;:&#123;$gte:&lt;value&gt;,$lte:&lt;value&gt;&#125;&#125;)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># f、等于 - :</span></span><br><span class="line">    <span class="comment"># 语法：</span></span><br><span class="line">        db.集合名.find(&#123;&lt;key&gt;:&lt;value&gt;&#125;)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># g、使用_id进行查询</span></span><br><span class="line">    <span class="comment"># 语法：</span></span><br><span class="line">        db.student.find(&#123;<span class="string">"_id"</span>:ObjectId(<span class="string">"id值"</span>)&#125;)</span><br><span class="line">    <span class="comment"># 示例：</span></span><br><span class="line">        db.student.find(&#123;<span class="string">"_id"</span>:ObjectId(<span class="string">"5995084b019723fe2a0d8d14"</span>)&#125;)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># h、查询某个结果集的数据条数</span></span><br><span class="line">    <span class="comment"># 示例：</span></span><br><span class="line">        db.student.find().count()</span><br><span class="line">        </span><br><span class="line"><span class="comment"># i、查询某个字段的值当中是否包含另一个值</span></span><br><span class="line">    <span class="comment"># 示例：</span></span><br><span class="line">        db.student.find(&#123;name:/ile/&#125;)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># j、查询某个字段的值是否以另一个值开头</span></span><br><span class="line">    <span class="comment"># 示例：</span></span><br><span class="line">        db.student.find(&#123;name:/^li/&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="条件查询and和or"><a href="#条件查询and和or" class="headerlink" title="条件查询and和or"></a>条件查询<code>and</code>和<code>or</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. AND条件</span></span><br><span class="line">    <span class="comment"># 语法：</span></span><br><span class="line">        db.集合名.find(&#123;条件<span class="number">1</span>,条件<span class="number">2</span>,……,条件n&#125;)</span><br><span class="line">    <span class="comment"># 示例：</span></span><br><span class="line">        db.student.find(&#123;gender:<span class="number">0</span>,age:&#123;$gt:<span class="number">16</span>&#125;&#125;)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 2、OR条件</span></span><br><span class="line">    <span class="comment"># 语法：</span></span><br><span class="line">        db.集合名.find(</span><br><span class="line">            &#123;</span><br><span class="line">                $<span class="keyword">or</span>:[&#123;条件<span class="number">1</span>&#125;,&#123;条件<span class="number">2</span>&#125;,……,&#123;条件n&#125;]</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    <span class="comment"># 示例：</span></span><br><span class="line">        db.student.find(&#123;$<span class="keyword">or</span>:[&#123;age:<span class="number">17</span>&#125;,&#123;age:&#123;$gte:<span class="number">20</span>&#125;&#125;]&#125;)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 3、AND和OR联合使用</span></span><br><span class="line">    <span class="comment"># 语法：</span></span><br><span class="line">        db.集合名.find(</span><br><span class="line">            &#123;</span><br><span class="line">                条件<span class="number">1</span>,</span><br><span class="line">                条件<span class="number">2</span>,</span><br><span class="line">                $<span class="keyword">or</span>:[&#123;条件<span class="number">3</span>&#125;,&#123;条件<span class="number">4</span>&#125;]</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br></pre></td></tr></table></figure>

<h4 id="limit和skip"><a href="#limit和skip" class="headerlink" title="limit和skip"></a><code>limit</code>和<code>skip</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a、limit()：读取指定数量的数据记录</span></span><br><span class="line">    db.student.find().limit(<span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># b、skip()：跳过指定数量的数据</span></span><br><span class="line">    db.student.find().skip(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># c、skip与limit联合使用</span></span><br><span class="line">    <span class="comment"># 通常用这种方式来实现分页功能</span></span><br><span class="line">    <span class="comment"># 示例：</span></span><br><span class="line">        db.student.find().skip(<span class="number">3</span>).limit(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：</span></span><br><span class="line">    db.集合名.find().sort(&#123;&lt;key&gt;:<span class="number">1</span>|<span class="number">-1</span>&#125;)</span><br><span class="line"><span class="comment"># 示例：</span></span><br><span class="line">    db.student.find().sort(&#123;age:<span class="number">1</span>&#125;)</span><br><span class="line"><span class="comment"># 注意：1表示升序，-1表示降序</span></span><br></pre></td></tr></table></figure>

<h2 id="MongoDB和Python的交互"><a href="#MongoDB和Python的交互" class="headerlink" title="MongoDB和Python的交互"></a><code>MongoDB</code>和<code>Python</code>的交互</h2><h3 id="MongoDB数据类型"><a href="#MongoDB数据类型" class="headerlink" title="MongoDB数据类型"></a><code>MongoDB</code>数据类型</h3><p>下表为<code>MongoDB</code>中常用的几种数据类型</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>String</code></td>
<td>字符串。存储数据常用的数据类型。在<code>MongoDB</code>中，<code>UTF-8</code>编码的字符串才是合法的</td>
</tr>
<tr>
<td><code>Integer</code></td>
<td>整型数值。用于存储数值, 根据你所采用的服务器，可分为32位或64位</td>
</tr>
<tr>
<td><code>Boolean</code></td>
<td>布尔值。用于存储布尔值（真/假）</td>
</tr>
<tr>
<td><code>Double</code></td>
<td>双精度浮点值。用于存储浮点值。</td>
</tr>
<tr>
<td><code>Min/Max keys</code></td>
<td>将一个值与<code>BSON</code>(二进制的 JSON）元素的最低值和最高值相对比</td>
</tr>
<tr>
<td><code>Array</code></td>
<td>用于将数组或列表或多个值存储为一个键。</td>
</tr>
<tr>
<td><code>Timestamp</code></td>
<td>时间戳。记录文档修改或添加的具体时间。</td>
</tr>
<tr>
<td><code>Object</code></td>
<td>用于内嵌文档。</td>
</tr>
<tr>
<td><code>Null</code></td>
<td>用于创建空值。</td>
</tr>
<tr>
<td><code>Symbol</code></td>
<td>符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。</td>
</tr>
<tr>
<td><code>Date</code></td>
<td>日期时间。用<code>UNIX</code> 时间格式来存储当前日期或时间, 你可以指定自己的日期时间：创建<code>Date</code>对象，传入年月日信息。</td>
</tr>
<tr>
<td><code>Object ID</code></td>
<td>对象 ID。用于创建文档的 ID。</td>
</tr>
<tr>
<td><code>Binary Data</code></td>
<td>二进制数据。用于存储二进制数据。</td>
</tr>
<tr>
<td><code>Code</code></td>
<td>代码类型。用于在文档中存储<code>JavaScript</code>代码。</td>
</tr>
<tr>
<td><code>Regular expression</code></td>
<td>正则表达式类型。用于存储正则表达式。</td>
</tr>
</tbody></table>
<h4 id="ObjectId"><a href="#ObjectId" class="headerlink" title="ObjectId"></a>ObjectId</h4><ul>
<li><code>ObjectId</code>类似唯一主键，可以很快的去生成和排序，包含<code>12 bytes</code>，含义是：<ul>
<li>前 4 个字节表示创建 unix 时间戳,格林尼治时间 UTC 时间，比北京时间晚了 8 个小时</li>
<li>接下来的 3 个字节是机器标识码</li>
<li>紧接的两个字节由进程 id 组成 PID</li>
<li>最后三个字节是随机数</li>
</ul>
</li>
<li><code>MongoDB</code>中存储的文档必须有一个<code>_id</code>键, 这个键的值可以是任何类型的，默认是个<code>ObjectId</code>对象</li>
</ul>
<h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>集合中插入文档使用<code>insert_one()</code>方法和<code>insert_many()</code>方法</p>
<h4 id="插入一条数据"><a href="#插入一条数据" class="headerlink" title="插入一条数据"></a>插入一条数据</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接服务器</span></span><br><span class="line">conn = MongoClient(<span class="string">"localhost"</span>, <span class="number">27017</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定的数据库</span></span><br><span class="line">db = conn.mydb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据库中的指定的集合</span></span><br><span class="line">collection = db.student</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加文档</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 添加一条数据</span></span><br><span class="line">    one = collection.insert_one(&#123;<span class="string">"name"</span>: <span class="string">"coder19"</span>, <span class="string">"age"</span>: <span class="number">19</span>, <span class="string">"gender"</span>: <span class="number">1</span>, <span class="string">"address"</span>: <span class="string">"北京"</span>, <span class="string">"isDelete"</span>: <span class="number">0</span>&#125;)</span><br><span class="line">    print(one)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取id值</span></span><br><span class="line">    print(one.inserted_id)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'添加成功'</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'添加失败'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 断开</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>

<p><code>insert_one()</code>方法返回<code>InsertOneResult</code>对象，改对象包含<code>inserted_id</code>属性，它是插入文档的<code>id</code>值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">one = collection.insert_one(&#123;<span class="string">"name"</span>: <span class="string">"coder19"</span>, <span class="string">"age"</span>: <span class="number">19</span>, <span class="string">"gender"</span>: <span class="number">1</span>, <span class="string">"address"</span>: <span class="string">"北京"</span>, <span class="string">"isDelete"</span>: <span class="number">0</span>&#125;)</span><br><span class="line">print(one)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取id值</span></span><br><span class="line">print(one.inserted_id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果:</span></span><br><span class="line">    <span class="comment"># &lt;pymongo.results.InsertOneResult object at 0x10ec427c8&gt;</span></span><br><span class="line">    <span class="comment"># 5b557821258dc825c7c0cf57</span></span><br></pre></td></tr></table></figure>

<h4 id="插入多个文档"><a href="#插入多个文档" class="headerlink" title="插入多个文档"></a>插入多个文档</h4><p><code>insert_many()</code>方法返回<code>InsertManyResult</code>对象，该对象包含 <code>inserted_ids</code>属性，该属性保存着所有插入文档的<code>id</code>值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加文档</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 添加多条数据</span></span><br><span class="line">    mylist = [</span><br><span class="line">        &#123;<span class="string">'name'</span>: <span class="string">'个人博客'</span>, <span class="string">'age'</span>: <span class="number">10</span>, <span class="string">'address'</span>: <span class="string">'https://www.titanjun.top'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'name'</span>: <span class="string">'Github'</span>, <span class="string">'age'</span>: <span class="number">11</span>, <span class="string">'address'</span>: <span class="string">'https://github.com/CoderTitan'</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    many = collection.insert_many(mylist)</span><br><span class="line"></span><br><span class="line">    print(many)</span><br><span class="line">    <span class="comment"># 输出插入的所有文档对应的 _id 值</span></span><br><span class="line">    print(many.inserted_ids)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'添加成功'</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'添加失败'</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="comment"># &lt;pymongo.results.InsertManyResult object at 0x10bf82cc8&gt;</span></span><br><span class="line"><span class="comment"># [ObjectId('5b557a5d258dc8269a55f485'), ObjectId('5b557a5d258dc8269a55f486')]</span></span><br></pre></td></tr></table></figure>

<h4 id="插入指定-id的多个文档"><a href="#插入指定-id的多个文档" class="headerlink" title="插入指定_id的多个文档"></a>插入指定<code>_id</code>的多个文档</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 插入指定 _id 的多个文档</span></span><br><span class="line">    mylist = [</span><br><span class="line">        &#123;<span class="string">'_id'</span>: <span class="number">1</span>, <span class="string">'name'</span>: <span class="string">'简书'</span>, <span class="string">'age'</span>: <span class="number">12</span>, <span class="string">'address'</span>: <span class="string">'https://www.jianshu.com/u/5bd5e9ed569e'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'_id'</span>: <span class="number">2</span>, <span class="string">'name'</span>: <span class="string">'csdn'</span>, <span class="string">'age'</span>: <span class="number">13</span>, <span class="string">'address'</span>: <span class="string">'https://blog.csdn.net/shmilycoder'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'_id'</span>: <span class="number">3</span>, <span class="string">'name'</span>: <span class="string">'掘金'</span>, <span class="string">'age'</span>: <span class="number">14</span>, <span class="string">'address'</span>: <span class="string">'https://juejin.im/user/5a7a64ae6fb9a0636323fd06'</span>&#125;,</span><br><span class="line">    ]</span><br><span class="line">    many = collection.insert_many(mylist)</span><br><span class="line"></span><br><span class="line">    print(many)</span><br><span class="line">    <span class="comment"># 输出插入的所有文档对应的 _id 值</span></span><br><span class="line">    print(many.inserted_ids)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出结果:</span></span><br><span class="line"><span class="comment"># &lt;pymongo.results.InsertManyResult object at 0x10c457dc8&gt;</span></span><br><span class="line"><span class="comment"># [1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><h4 id="返回所有-第一条数据"><a href="#返回所有-第一条数据" class="headerlink" title="返回所有/第一条数据"></a>返回所有/第一条数据</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询集合中的第一条数据</span></span><br><span class="line">print(collection.find_one())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询集合中所有数据</span></span><br><span class="line">print(collection.find())</span><br></pre></td></tr></table></figure>

<h4 id="根据id查询指定数据"><a href="#根据id查询指定数据" class="headerlink" title="根据id查询指定数据"></a>根据id查询指定数据</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出一个Cursor对象</span></span><br><span class="line">res3 = collection.find(&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5b52cdbbd87e53d6306f3585'</span>)&#125;)</span><br><span class="line">print(res3)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出指定数据信息</span></span><br><span class="line">res12 = collection.find_one(&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5b52cdbbd87e53d6306f3585'</span>)&#125;)</span><br><span class="line">print(res12)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果:</span></span><br><span class="line"><span class="comment"># &lt;pymongo.cursor.Cursor object at 0x1027f2550&gt;</span></span><br><span class="line"><span class="comment"># &#123;'_id': ObjectId('5b52cdbbd87e53d6306f3585'), 'name': 'hai', 'age': 17.0, 'gender': 0.0, 'address': '北京', 'isDelete': 0.0&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="根据指定条件查询"><a href="#根据指定条件查询" class="headerlink" title="根据指定条件查询"></a>根据指定条件查询</h4><p>查询集合中所有符合<code>key</code>为<code>value</code>的所有的数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res10 = collection.find(&#123;<span class="string">'age'</span>: <span class="number">19</span>&#125;)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> res10:</span><br><span class="line">    print(row)</span><br></pre></td></tr></table></figure>

<h4 id="指定条件查询"><a href="#指定条件查询" class="headerlink" title="指定条件查询"></a>指定条件查询</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># age大于19的所有数据的集合</span></span><br><span class="line">res2 = collection.find(&#123;<span class="string">'age'</span>: &#123;<span class="string">'$gt'</span>: <span class="number">19</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># age大于19的所有数据的个数</span></span><br><span class="line">res2 = collection.count_documents(&#123;<span class="string">'age'</span>: &#123;<span class="string">'$gt'</span>: <span class="number">19</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定多条件查询</span></span><br><span class="line">res2 = collection.count_documents(&#123;<span class="string">'age'</span>: &#123;<span class="string">'$gt'</span>: <span class="number">19</span>&#125;, <span class="string">'gender'</span>: <span class="number">0</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则表达式查询</span></span><br><span class="line"><span class="comment"># name以c开头的数据</span></span><br><span class="line">res11 = collection.find(&#123;<span class="string">'name'</span>: &#123;<span class="string">'$regex'</span>: <span class="string">'^c'</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="返回指定条数记录"><a href="#返回指定条数记录" class="headerlink" title="返回指定条数记录"></a>返回指定条数记录</h4><p>如果我们要对查询结果设置指定条数的记录可以使用<code>limit()</code>方法，该方法只接受一个数字参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只返回3条数据</span></span><br><span class="line">res5 = collection.find()limit(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 跳过指定条数返回</span></span><br><span class="line"><span class="comment"># 结果共6条数据</span></span><br><span class="line">res12 = collection.find(&#123;<span class="string">'age'</span>: &#123;<span class="string">'$gt'</span>: <span class="number">19</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跳过前两条, 返回后面4条数据</span></span><br><span class="line">res13 = collection.find(&#123;<span class="string">'age'</span>: &#123;<span class="string">'$gt'</span>: <span class="number">19</span>&#125;&#125;).skip(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页效果</span></span><br><span class="line"><span class="comment"># 跳过上一页的3条数据, 输出3条数据</span></span><br><span class="line">res5 = collection.find().skip(<span class="number">3</span>).limit(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h3 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档</h3><ul>
<li>在<code>MongoDB</code>中使用<code>update_one()</code>和<code>update_many()</code>方法修改文档中的记录, 第一个参数为查询的条件，第二个参数为要修改的字段</li>
<li>在<code>update_one()</code>方法中, 如果查找到的匹配数据多余一条，则只会修改第一条</li>
<li>在<code>update_many()</code>方法中, 会修改所有符合条件的数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新一条数据</span></span><br><span class="line">collection.update_one(&#123;<span class="string">'name'</span>: <span class="string">'coder1'</span>&#125;, &#123;<span class="string">'$set'</span>: &#123;<span class="string">'age'</span>: <span class="number">80</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新多条数据</span></span><br><span class="line">collection.update_many(&#123;<span class="string">'name'</span>: <span class="string">'coder2'</span>&#125;, &#123;<span class="string">'$set'</span>: &#123;<span class="string">'age'</span>: <span class="number">90</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>

<div class="note primary"><p>除了`update`方法之外还有一个`replace`方法, 两者的区别是</p></div>

<ul>
<li><code>update</code>只会修改<code>key</code>值对应的<code>value</code>值, 对其他的<code>value</code>值不做修改</li>
<li><code>replace</code>方法是除<code>id</code>不变, 其他值都会改变, 若未指定新值, 则赋值为空</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改前</span></span><br><span class="line">    print(<span class="string">'修改前'</span>)</span><br><span class="line">    print(collection.find_one(&#123;<span class="string">'name'</span>: <span class="string">'coder1'</span>&#125;))</span><br><span class="line">    print(collection.find_one(&#123;<span class="string">'name'</span>: <span class="string">'coder19'</span>&#125;))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># update更新一条数据</span></span><br><span class="line">    collection.update_one(&#123;<span class="string">'name'</span>: <span class="string">'coder1'</span>&#125;, &#123;<span class="string">'$set'</span>: &#123;<span class="string">'age'</span>: <span class="number">80</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># replace更新数据</span></span><br><span class="line">    collection.replace_one(&#123;<span class="string">'name'</span>: <span class="string">'coder19'</span>&#125;, &#123;<span class="string">'age'</span>: <span class="number">90</span>, <span class="string">'name'</span>: <span class="string">'coder19'</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改后</span></span><br><span class="line">    print(<span class="string">'修改后'</span>)</span><br><span class="line">    print(collection.find_one(&#123;<span class="string">'name'</span>: <span class="string">'coder1'</span>&#125;))</span><br><span class="line">    print(collection.find_one(&#123;<span class="string">'name'</span>: <span class="string">'coder19'</span>&#125;))</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后的输出结果</span></span><br><span class="line"><span class="comment"># 修改前</span></span><br><span class="line"><span class="comment"># &#123;'_id': ObjectId('5b5318d0258dc83e8de6f812'), 'name': 'coder1', 'age': 80, 'gender': 0, 'address': '杭州', 'isDelete': 0&#125;</span></span><br><span class="line"><span class="comment"># &#123;'_id': ObjectId('5b557821258dc825c7c0cf57'), 'name': 'coder19', 'age': 19, 'gender': 1, 'address': '北京', 'isDelete': 0&#125;</span></span><br><span class="line"><span class="comment"># 修改后</span></span><br><span class="line"><span class="comment"># &#123;'_id': ObjectId('5b5318d0258dc83e8de6f812'), 'name': 'coder1', 'age': 80, 'gender': 0, 'address': '杭州', 'isDelete': 0&#125;</span></span><br><span class="line"><span class="comment"># &#123;'_id': ObjectId('5b557821258dc825c7c0cf57'), 'age': 90, 'name': 'coder19'&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><ul>
<li>我们可以使用<code>delete_one()</code>和<code>delete_many()</code>方法来删除, 参数为查询对象，指定要删除哪些数据</li>
<li><code>delete_one()</code>: 删除符合条件的第一条数据</li>
<li><code>delete_many()</code>: 删除符合条件的所有数据, 若参数为空, 则表示删除所有数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除一条数据</span></span><br><span class="line">res = collection.delete_one(&#123;<span class="string">'age'</span>: <span class="number">90</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除多条数据</span></span><br><span class="line">res1 = collection.delete_many(&#123;<span class="string">'age'</span>: <span class="number">90</span>&#125;)</span><br><span class="line"><span class="comment"># 输出删除的数据的数量</span></span><br><span class="line">print(res1.deleted_count)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一下两个方法建议不要轻易尝试, 否则所有数据将不复存在</span></span><br><span class="line"><span class="comment"># 删除所有数据</span></span><br><span class="line">res1 = collection.delete_many(&#123;&#125;)</span><br><span class="line"><span class="comment"># 输出删除的数据的数量</span></span><br><span class="line">print(res1.deleted_count)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除集合</span></span><br><span class="line">collection.drop()</span><br><span class="line"><span class="comment"># 如果删除成功 drop() 返回 true，如果删除失败(集合不存在)则返回 false。</span></span><br></pre></td></tr></table></figure>


<h3 id="排序-1"><a href="#排序-1" class="headerlink" title="排序"></a>排序</h3><ul>
<li>使用<code>sort</code>进行排序, 默认降序排列</li>
<li>降序: <code>DESCENDING</code>, 升序: <code>ASCENDING</code></li>
<li>参数二也可以用1和-1: 1 为升序，-1 为降序</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以age进行降序排列, 参数二可不传, 默认降序</span></span><br><span class="line">res4 = collection.find().sort(<span class="string">'age'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行升序排列</span></span><br><span class="line">res5 = collection.find().sort(<span class="string">'age'</span>, pymongo.ASCENDING)</span><br><span class="line">res5 = collection.find().sort(<span class="string">'age'</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="http://api.mongodb.com/python/current/api/pymongo/collection.html" target="_blank" rel="noopener">更多集合相关用法详见官方文档</a></li>
<li><a href="http://api.mongodb.com/python/current/api/pymongo/" target="_blank" rel="noopener">pymongo官方文档</a></li>
<li><a href="http://pc5s2udrk.bkt.clouddn.com/MongoDB1.pdf" target="_blank" rel="noopener">MongoDB介绍</a></li>
</ul>
<blockquote>
<p>至此, <code>MongoDB</code>所有相关的内容这里也就全部都介绍完了</p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>数据库基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>MongoDB</tag>
        <tag>pymongo</tag>
      </tags>
  </entry>
  <entry>
    <title>NexT主题配置个性化设置</title>
    <url>/posts/9eda55ce/</url>
    <content><![CDATA[<ul>
<li>前段时间, 辛辛苦苦花了一周的时间搭建了属于自己的<a href="https://www.titanjun.top/" target="_blank" rel="noopener">个人技术博客</a>, 当然也是各种采坑各种跳, 大家如果在搭建过程中遇到什么问题, 可以参考<a href="https://www.titanjun.top/2018/03/08/%E5%9F%BA%E4%BA%8EGitHub%E5%92%8CHexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">基于GitHub和Hexo搭建个人博客</a></li>
<li>我现在用的是<code>NexT</code>主题, 这是作者提供的<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT主题中文配置</a></li>
<li>下面我把集成NexT主题配置时遇到的坑给大家总结分享一下</li>
</ul>
<a id="more"></a>

<ul>
<li>文章主要介绍的优化方面主要有以下34种配置<ul>
<li>集成Mob社会化分享</li>
<li>在右上角或者左上角实现fork me on github</li>
<li>添加RSS</li>
<li>添加动态背景</li>
<li>实现点击出现桃心效果</li>
<li>修改文章内链接文本样式</li>
<li>修改文章底部的那个带#号的标签</li>
<li>在每篇文章末尾统一添加“本文结束”标记</li>
<li>修改作者头像并旋转</li>
<li>博文压缩</li>
<li>修改``代码块自定义样式</li>
<li>侧边栏社交小图标设置</li>
<li>主页文章添加阴影效果</li>
<li>在网站底部加上访问量</li>
<li>添加热度</li>
<li>网站底部字数统计</li>
<li>添加 README.md 文件</li>
<li>设置网站的图标Favicon</li>
<li>实现统计功能</li>
<li>添加顶部加载条</li>
<li>在文章底部增加版权信息</li>
<li>添加网易云跟帖(跟帖关闭，已失效，改为来必力)</li>
<li>隐藏网页底部powered By Hexo / 强力驱动</li>
<li>修改网页底部的桃心</li>
<li>文章加密访问</li>
<li>添加jiathis分享</li>
<li>博文置顶</li>
<li>修改字体大小</li>
<li>修改打赏字体不闪动</li>
<li>侧边栏推荐阅读</li>
<li>自定义鼠标样式</li>
<li>为博客加上萌萌的宠物</li>
<li>点击爆炸效果</li>
</ul>
</li>
</ul>
<h3 id="https技术博客配置社会化分享"><a href="#https技术博客配置社会化分享" class="headerlink" title="https技术博客配置社会化分享"></a>https技术博客配置社会化分享</h3><p>大家应该知道像一些<code>JiaThis</code>分享和百度分享并不支持<code>https</code>, 这里给大家推荐一个, 支持<code>https</code>的社会化分享-Mob</p>
<p>1-1. 获取<code>App Key</code><br>博客集成Mod分享组件, 参考 <a href="http://wiki.mob.com/快速集成-13/" target="_blank" rel="noopener">Mob官方文档</a> , 获取到<code>App Key</code></p>
<p>1-2. 在主题配置文件中添加配置：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">mob_share:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  appkey: ********</span><br></pre></td></tr></table></figure>

<p>1-3. 在<code>next/layout/_partials/share/</code>里面添加<code>mob_share.swig</code>文件, 并在<code>mob_share.swig</code>内输入一下内容:</p>
<ul>
<li>这里需要注意的一点:<ul>
<li>以下代码只支持<code>http</code>开头的网址, 在<code>https</code>中点击分享按钮会没有任何反应</li>
<li>如果需要支持<code>https</code>的网址, 在最后一行<code>src=http://f1.webshare.mob.com</code>, 需要把这里的<code>http</code>同样改成<code>https</code>, 这样你就可以实现分享功能了</li>
</ul>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">&lt;!--MOB SHARE BEGIN--&gt;</span><br><span class="line">&lt;div class="-hoofoo-share-title"&gt;分享到：&lt;/div&gt;</span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"-hoofoo-share-buttons"</span>&gt;</span><br><span class="line">    &lt;div class="-mob-share-weibo -hoofoo-share-weibo -hoofoo-share-ui-button"&gt;&lt;i class="fa fa-weibo" aria-hidden="true"&gt;&lt;/i&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="-mob-share-weixin -hoofoo-share-weixin -hoofoo-share-ui-button"&gt;&lt;i class="fa fa-weixin" aria-hidden="true"&gt;&lt;/i&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="-mob-share-qq -hoofoo-share-qq -hoofoo-share-ui-button"&gt;&lt;i class="fa fa-qq" aria-hidden="true"&gt;&lt;/i&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="-mob-share-twitter -hoofoo-share-twitter -hoofoo-share-ui-button"&gt;&lt;i class="fa fa-twitter" aria-hidden="true"&gt;&lt;/i&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="-hoofoo-share-more -hoofoo-share-ui-button -mob-share-open"&gt;&lt;i class="fa fa-ellipsis-h" aria-hidden="true"&gt;&lt;/i&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"-mob-share-ui"</span> style=<span class="string">"display: none"</span>&gt;</span><br><span class="line">    &lt;ul <span class="keyword">class</span>=<span class="string">"-mob-share-list"</span>&gt;</span><br><span class="line">        &lt;li class="-mob-share-weibo"&gt;&lt;p&gt;新浪微博&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li class="-mob-share-weixin"&gt;&lt;p&gt;微信&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li class="-mob-share-qzone"&gt;&lt;p&gt;QQ空间&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li class="-mob-share-qq"&gt;&lt;p&gt;QQ好友&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li class="-mob-share-tencentweibo"&gt;&lt;p&gt;腾讯微博&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li class="-mob-share-renren"&gt;&lt;p&gt;人人网&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li class="-mob-share-kaixin"&gt;&lt;p&gt;开心网&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li class="-mob-share-douban"&gt;&lt;p&gt;豆瓣&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li class="-mob-share-youdao"&gt;&lt;p&gt;有道云笔记&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li class="-mob-share-mingdao"&gt;&lt;p&gt;明道&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li class="-mob-share-pengyou"&gt;&lt;p&gt;朋友网&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li class="-mob-share-facebook"&gt;&lt;p&gt;Facebook&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li class="-mob-share-twitter"&gt;&lt;p&gt;Twitter&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li class="-mob-share-pocket"&gt;&lt;p&gt;Pocket&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li class="-mob-share-google"&gt;&lt;p&gt;Google+&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li class="-mob-share-tumblr"&gt;&lt;p&gt;Tumblr&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li class="-mob-share-instapaper"&gt;&lt;p&gt;Instapaper&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li class="-mob-share-linkedin"&gt;&lt;p&gt;Linkedin&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;div class="-mob-share-close"&gt;取消&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class="-mob-share-ui-bg"&gt;&lt;/div&gt;</span><br><span class="line">&lt;script id="-mob-share" src="http://f1.webshare.mob.com/code/mob-share.js?appkey=&#123;&#123;theme.mob_share.appkey&#125;&#125;"&gt;&lt;/script&gt;</span><br><span class="line">&lt;!--MOB SHARE END--&gt;</span><br></pre></td></tr></table></figure>

<p>1-4. 在<code>next/layout/post.swig</code>中添加条件分支：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.jiathis %&#125;</span><br><span class="line">      &#123;% include <span class="string">'_partials/share/jiathis.swig'</span> %&#125;</span><br><span class="line">    &#123;% elseif theme.baidushare %&#125;</span><br><span class="line">      &#123;% include <span class="string">'_partials/share/baidushare.swig'</span> %&#125;</span><br><span class="line">    &#123;% elseif theme.add_this_id %&#125;</span><br><span class="line">      &#123;% include <span class="string">'_partials/share/add-this.swig'</span> %&#125;</span><br><span class="line">    &#123;% elseif theme.duoshuo_shortname and theme.duoshuo_share %&#125;</span><br><span class="line">      &#123;% include <span class="string">'_partials/share/duoshuo_share.swig'</span> %&#125;</span><br><span class="line">    &#123;% elseif theme.mob_share.enable %&#125;</span><br><span class="line">      &#123;% include <span class="string">'_partials/share/mob_share.swig'</span> %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>1-5. 在<code>next/source/css/_common/components/third-party/</code>里添加样式文件<code>mob_share.styl</code>：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">.-hoofoo-share-buttons&#123;</span><br><span class="line">    display: <span class="keyword">inline</span>-block;</span><br><span class="line">&#125;</span><br><span class="line">.-hoofoo-share-title&#123;</span><br><span class="line">    font-size: <span class="number">1.1</span>em;</span><br><span class="line">    font-weight: <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line">.-hoofoo-share-ui-button&#123;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    background-color: #<span class="number">555</span>;</span><br><span class="line">    color: <span class="meta">#fff;</span></span><br><span class="line">    font-size: <span class="number">24</span>px;</span><br><span class="line">    line-height: <span class="number">40</span>px;</span><br><span class="line">    width: <span class="number">40</span>px;</span><br><span class="line">    height: <span class="number">40</span>px;</span><br><span class="line">    margin: <span class="number">10</span>px;</span><br><span class="line">    border-radius: <span class="number">25</span>px;</span><br><span class="line">    <span class="keyword">float</span>: left;</span><br><span class="line">    transition: background <span class="number">0.4</span>s;</span><br><span class="line">    -moz-transition: background <span class="number">0.4</span>s;    <span class="comment">/* Firefox 4 */</span></span><br><span class="line">    -webkit-transition: background <span class="number">0.4</span>s;    <span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">    -o-transition: background <span class="number">0.4</span>s;</span><br><span class="line">&#125;</span><br><span class="line">.-hoofoo-share-weibo:hover&#123;</span><br><span class="line">    background-color: #cf3f41;</span><br><span class="line">&#125;</span><br><span class="line">.-hoofoo-share-weixin:hover&#123;</span><br><span class="line">    background-color: #<span class="number">18</span>a01a;</span><br><span class="line">&#125;</span><br><span class="line">.-hoofoo-share-qq:hover&#123;</span><br><span class="line">    background-color: #<span class="number">950</span>c0c;</span><br><span class="line">&#125;</span><br><span class="line">.-hoofoo-share-twitter:hover&#123;</span><br><span class="line">    background-color: #<span class="number">2</span>ab3e6;</span><br><span class="line">&#125;</span><br><span class="line">.-hoofoo-share-more:hover&#123;</span><br><span class="line">    background-color: #<span class="number">777</span>;</span><br><span class="line">&#125;</span><br><span class="line">.-mob-share-weixin-qrcode-content&#123;</span><br><span class="line">    border-radius: <span class="number">4</span>px;</span><br><span class="line">    -webkit-box-shadow: <span class="number">0</span> <span class="number">10</span>px <span class="number">25</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">    -moz-box-shadow: <span class="number">0</span> <span class="number">10</span>px <span class="number">25</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">    -o-box-shadow: <span class="number">0</span> <span class="number">10</span>px <span class="number">25</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">    box-shadow: <span class="number">0</span> <span class="number">10</span>px <span class="number">25</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line">.-mob-share-weixin-qrcode&#123;</span><br><span class="line">    margin: <span class="number">5</span>% !important;</span><br><span class="line">    width: <span class="number">90</span>% !important;</span><br><span class="line">    height: auto !important;</span><br><span class="line">&#125;</span><br><span class="line">.-mob-share-weixin-qrcode-close &#123;</span><br><span class="line">    background-image: url(<span class="string">'/lib/fancybox/source/fancybox_sprite.png'</span>) !important;<span class="comment">//因为兼容问题把vendor改成了lib，根据自己的路径修改</span></span><br><span class="line">&#125;</span><br><span class="line">.-mob-share-weixin-qrcode-close &#123;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    line-height: <span class="number">100</span>px !important;</span><br><span class="line">    position: absolute !important;</span><br><span class="line">    top: <span class="number">-18</span>px !important;</span><br><span class="line">    right: <span class="number">-18</span>px !important;</span><br><span class="line">    width: <span class="number">36</span>px !important;</span><br><span class="line">    height: <span class="number">36</span>px !important;</span><br><span class="line">    cursor: pointer !important;</span><br><span class="line">    z-index: <span class="number">8040</span> !important;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Retina graphics!*/</span></span><br><span class="line">@media only screen and (-webkit-min-device-pixel-ratio: <span class="number">1.5</span>),</span><br><span class="line">       only screen and (min--moz-device-pixel-ratio: <span class="number">1.5</span>),</span><br><span class="line">       only screen and (min-device-pixel-ratio: <span class="number">1.5</span>)&#123;</span><br><span class="line">    .-mob-share-weixin-qrcode-close &#123;</span><br><span class="line">        background-image: url(<span class="string">'/lib/fancybox/source/fancybox_sprite@2x.png'</span>) !important;<span class="comment">//因为兼容问题把vendor改成了lib，根据自己的路径修改</span></span><br><span class="line">        background-size: <span class="number">44</span>px <span class="number">152</span>px !important; <span class="comment">/*The size of the normal image, half the size of the hi-res image*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">.-mob-share-close&#123;</span><br><span class="line">    height: <span class="number">4</span>em !important;</span><br><span class="line">    font-size: <span class="number">0.8</span>em !important;</span><br><span class="line">    line-height: <span class="number">4</span>em !important;</span><br><span class="line">    background: #<span class="number">555</span> !important;</span><br><span class="line">    color: <span class="meta">#fff !important;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1-6. 同一目录下的 <code>third-party.styl</code> 中添加：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">"mob_share"</span>;</span><br></pre></td></tr></table></figure>

<p>1-7. 在<code>next/layout/_scripts/third-party/</code>里添加脚本文件<code>mob_share.swig</code>：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.mob_share.enable %&#125;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="comment">//微信二维码点击背景关闭</span></span><br><span class="line">    $(<span class="string">'body'</span>).delegate(<span class="string">'.-mob-share-weixin-qrcode-bg'</span>,<span class="string">'click'</span>, function()&#123;</span><br><span class="line">         $(<span class="string">".-mob-share-weixin-qrcode-close"</span>).trigger(<span class="string">"click"</span>);</span><br><span class="line">    &#125;); </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>1-8. 在<code>next/layout/_layout.swig的body</code>标签结束前添加：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">&#123;% include <span class="string">'_scripts/third-party/mob_share.swig'</span> %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="更改上一篇，下一篇的顺序"><a href="#更改上一篇，下一篇的顺序" class="headerlink" title="更改上一篇，下一篇的顺序"></a>更改上一篇，下一篇的顺序</h3><ul>
<li>进入一篇文章，在文章底部，有上下篇的链接，但是点击 发现进入的是页面中的的上面那篇文章，不符合我们的正常习惯, 修改方法如下:</li>
<li>文件位置：<code>themes/next/layout/_macro/post.swig</code></li>
</ul>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">&#123;% if not is_index and (post.prev or post.next) %&#125;</span><br><span class="line">  &lt;div class="post-nav"&gt;</span><br><span class="line">    &lt;div class="post-nav-next post-nav-item"&gt;</span><br><span class="line"><span class="deletion">-      &#123;% if post.next %&#125;</span></span><br><span class="line"><span class="addition">+      &#123;% if post.prev %&#125;</span></span><br><span class="line"><span class="deletion">-        &lt;a href="&#123;&#123; url_for(post.next.path) &#125;&#125;" rel="next" title="&#123;&#123; post.next.title &#125;&#125;"&gt;</span></span><br><span class="line"><span class="addition">+        &lt;a href="&#123;&#123; url_for(post.prev.path) &#125;&#125;" rel="prev" title="&#123;&#123; post.prev.title &#125;&#125;"&gt;</span></span><br><span class="line"><span class="deletion">-          &lt;i class="fa fa-chevron-left"&gt;&lt;/i&gt; &#123;&#123; post.next.title &#125;&#125;</span></span><br><span class="line"><span class="addition">+          &lt;i class="fa fa-chevron-left"&gt;&lt;/i&gt; &#123;&#123; post.prev.title &#125;&#125;</span></span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span class="post-nav-divider"&gt;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class="post-nav-prev post-nav-item"&gt;</span><br><span class="line"><span class="deletion">-      &#123;% if post.prev %&#125;</span></span><br><span class="line"><span class="addition">+      &#123;% if post.next %&#125;</span></span><br><span class="line"><span class="deletion">-        &lt;a href="&#123;&#123; url_for(post.prev.path) &#125;&#125;" rel="prev" title="&#123;&#123; post.prev.title &#125;&#125;"&gt;</span></span><br><span class="line"><span class="addition">+        &lt;a href="&#123;&#123; url_for(post.next.path) &#125;&#125;" rel="next" title="&#123;&#123; post.next.title &#125;&#125;"&gt;</span></span><br><span class="line"><span class="deletion">-          &#123;&#123; post.prev.title &#125;&#125; &lt;i class="fa fa-chevron-right"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="addition">+          &#123;&#123; post.next.title &#125;&#125; &lt;i class="fa fa-chevron-right"&gt;&lt;/i&gt;</span></span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<div class="note warning"><p>需要注意的是`prev`和`next`一定不要弄错了</p></div>


<h3 id="文章底部加上评分小星星"><a href="#文章底部加上评分小星星" class="headerlink" title="文章底部加上评分小星星"></a>文章底部加上评分小星星</h3><p>这里我们先看一个评分的效果图</p>
<p><img src="https://titanjun.oss-cn-hangzhou.aliyuncs.com/hexo-next/nextstart.png" alt="image"></p>
<ul>
<li>首先先去<a href="https://widgetpack.com" target="_blank" rel="noopener">WidgetPack</a>注册一个账号并登陆, 填一下自己博客的信息，左上角有个 ID</li>
<li>首先打开主题配置文件：<code>themes/next/_config.yml</code></li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"># Star rating support to each article.</span><br><span class="line"># To get your ID visit https:<span class="comment">//widgetpack.com</span></span><br><span class="line">rating:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  <span class="keyword">id</span>: 你登录后的ID    </span><br><span class="line">  color: f79533</span><br></pre></td></tr></table></figure>

<ul>
<li><code>color</code>: 色值可改成自己喜欢的颜色</li>
<li>设置配置项<ul>
<li>可以配置评分方式，侧栏 &gt; <code>Rating</code> &gt; <code>Setting</code>，建议用 <code>IP address</code> 或 <code>Device(cookie)</code>，免登录，毕竟 <code>Socials</code> 里面的选项几乎都被墙，不适合国内网络环境。</li>
<li>建议 侧栏 &gt; <code>Site</code> &gt; <code>Setting</code> 中勾选 <code>Private</code> 选项。</li>
<li>上面两步勾选后别忘了点击页面右下方的 <code>SAVE SETTING</code> 绿色按钮保存</li>
</ul>
</li>
</ul>
<div class="note info"><p>经过上面的配置，默认最下面只会显示 5 颗简单的小星星, 下面我们在自己优化一下样式吧</p></div>

<p>首先打开文件：<code>blog/themes/next/layout/_macro/post.swig</code>, 添加有<code>+</code>哪一行代码</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">        &#123;% if theme.rating.enable %&#125;</span><br><span class="line">          &lt;div class="wp_rating"&gt;</span><br><span class="line"><span class="addition">+            &lt;div style="color: rgba(0, 0, 0, 0.75); font-size:13px; letter-spacing:3px"&gt;(&amp;gt;看完记得五星好评哦亲&amp;lt;)&lt;/div&gt;</span></span><br><span class="line">            &lt;div id="wpac-rating"&gt;&lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>然后打开文件：<code>blog/themes/next/source/css/_custom/custom.styl</code>, 添加如下代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 星星评分更改高度</span></span><br><span class="line">.post-widgets &#123;</span><br><span class="line">    height: <span class="number">80</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leanCloud统计"><a href="#leanCloud统计" class="headerlink" title="leanCloud统计"></a><code>leanCloud</code>统计</h3><h4 id="统计文章阅读量"><a href="#统计文章阅读量" class="headerlink" title="统计文章阅读量"></a>统计文章阅读量</h4><ul>
<li>通过<code>leanCloud</code>统计您网站的文章阅读量</li>
<li>注册<a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a>, 并创建一个你自己的应用</li>
</ul>
<p><img src="https://titanjun.oss-cn-hangzhou.aliyuncs.com/hexo-next/createLeanCloud.png?x-oss-process=style/titanjun" alt="image"></p>
<ul>
<li>点击图片右上角的设置图标进入应用界面</li>
<li>到此，你的应用创建成功，继续表的创建<ul>
<li>创建表，并将表的名字命名为：<code>Counter</code>, 如图</li>
</ul>
</li>
</ul>
<p><img src="https://titanjun.oss-cn-hangzhou.aliyuncs.com/hexo-next/LeanCloudSet.png?x-oss-process=style/titanjun" alt="image"></p>
<div class="note primary"><p>打开设置 -> 应用key 获取`App ID`和`App Key`</p></div>

<p>最后打开主题配置文件: <code>themes/next/_config.yml</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">leancloud_visitors:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  app_id: #你的app_id</span><br><span class="line">  app_key: #你的的app_key</span><br></pre></td></tr></table></figure>

<p>完成配置并重新编译。到此您已经成功设置了阅读量的统计</p>
<h4 id="WEB安全"><a href="#WEB安全" class="headerlink" title="WEB安全"></a>WEB安全</h4><p>为了保证应用的统计计数功能仅应用于自己的博客系统，你可以在应用-&gt;设置-&gt;安全中心的Web安全域名中加入自己的博客域名，以保证数据的调用安全</p>
<h3 id="配置Valine评论系统"><a href="#配置Valine评论系统" class="headerlink" title="配置Valine评论系统"></a>配置Valine评论系统</h3><ul>
<li>评论系统之前用的来必力, 但是有时也会被墙, 用起来也不是很方便</li>
<li>现在更换的<a href="https://valine.js.org/" target="_blank" rel="noopener"><code>Valine</code></a>评论系统还是很爽的</li>
<li><code>Valine</code> 是一款基于<code>Leancloud</code>的快速、简洁且高效的无后端评论系统</li>
<li>特性¶<ul>
<li>快速</li>
<li>安全</li>
<li>无后端实现</li>
<li><code>MarkDown</code> 全语法支持</li>
<li>轻量易用(~15kb gzipped)</li>
</ul>
</li>
<li>配置方法<ul>
<li>获取<code>Leancloud</code>的<code>APP ID</code>和 <code>APP KEY</code>, 上面设置中已经介绍了获取方法</li>
</ul>
</li>
</ul>
<div class="note success"><p>打开主题配置文件: `themes/next/_config.yml`</p></div>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"># Valine.</span><br><span class="line"># You can get your appid and appkey from https:<span class="comment">//leancloud.cn</span></span><br><span class="line"><span class="meta"># more info please open https:<span class="comment">//valine.js.org</span></span></span><br><span class="line">valine:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  appid:  <span class="meta"># your leancloud application appid</span></span><br><span class="line">  appkey: <span class="meta"># your leancloud application appkey</span></span><br><span class="line">  notify: <span class="literal">true</span> <span class="meta"># mail notifier , https:<span class="comment">//github.com/xCss/Valine/wiki</span></span></span><br><span class="line">  verify: <span class="literal">false</span> # Verification code</span><br><span class="line">  placeholder: 在这里说点什么吧... <span class="meta"># comment box placeholder</span></span><br><span class="line">  avatar: identicon # 评论表头样式  /mm/identicon/monsterid/wavatar/retro/hide</span><br><span class="line">  guest_info: nick,mail,link <span class="meta"># custom comment header</span></span><br><span class="line">  pageSize: <span class="number">10</span> <span class="meta"># pagination size</span></span><br></pre></td></tr></table></figure>

<div class="note info"><p>其他相关配置和邮件提醒方式可查看[Valline详细配置官网](https://valine.js.org/configuration/)</p></div>


<div class="note primary"><p>下面着重说一下自定义样式</p></div>

<p>看一下默认效果图</p>
<p><img src="http://titanjun.oss-cn-hangzhou.aliyuncs.com/hexo-next/values.png" alt="image"></p>
<p>修改后的效果图</p>
<p><img src="https://titanjun.oss-cn-hangzhou.aliyuncs.com/hexo-next/next-value.png?x-oss-process=style/titanjun" alt="image"></p>
<ul>
<li>首先<a href="https://github.com/panjunwen/Valine/releases/tag/v1.1.4.fix" target="_blank" rel="noopener">下载 Valine.min.js</a>, 并把下载好的文件放到文件夹 <code>themes/next/source/js/src</code> </li>
<li>然后打开文件<code>themes/next/layout/_third-party/comments/valine.swig</code>, 按照如下修改</li>
</ul>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.valine.enable and theme.valine.appid and theme.valine.appkey %&#125;</span><br><span class="line">  &lt;script src="//cdn1.lncld.net/static/js/3.0.4/av-min.js"&gt;&lt;/script&gt;</span><br><span class="line"><span class="deletion">-  &lt;script src="//unpkg.com/valine/dist/Valine.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="addition">+  &lt;script src="/js/src/Valine.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line">  </span><br><span class="line">  &lt;script type="text/javascript"&gt;</span><br><span class="line">    var GUEST = ['nick','mail','link'];</span><br><span class="line">    var guest = '&#123;&#123; theme.valine.guest_info &#125;&#125;';</span><br><span class="line">    guest = guest.split(',').filter(item=&gt;&#123;</span><br><span class="line">      return GUEST.indexOf(item)&gt;-1;</span><br><span class="line">    &#125;);</span><br><span class="line">    new Valine(&#123;</span><br><span class="line">        av: AV, </span><br><span class="line">        el: '#comments' ,</span><br><span class="line">        verify: &#123;&#123; theme.valine.verify &#125;&#125;,</span><br><span class="line">        notify: &#123;&#123; theme.valine.notify &#125;&#125;,</span><br><span class="line">        appId: '&#123;&#123; theme.valine.appid &#125;&#125;',</span><br><span class="line">        appKey: '&#123;&#123; theme.valine.appkey &#125;&#125;',</span><br><span class="line">        placeholder: '&#123;&#123; theme.valine.placeholder &#125;&#125;',</span><br><span class="line">        avatar:'&#123;&#123; theme.valine.avatar &#125;&#125;',</span><br><span class="line">        guest_info:guest,</span><br><span class="line">        pageSize:'&#123;&#123; theme.valine.pageSize &#125;&#125;' || 10,</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<div class="note info"><p>修改评论按钮文字</p></div>

<p>打开刚刚下载的<code>Valine.min.js</code>文件, 找到<code>class=&quot;vsubmit&quot;&gt;回复&lt;/button&gt;</code>代码, 更换为<code>class=&quot;vsubmit&quot;&gt;提交&lt;/button&gt;</code> , 这样文字就修改了</p>
<h3 id="侧栏加入已运行的时间"><a href="#侧栏加入已运行的时间" class="headerlink" title="侧栏加入已运行的时间"></a>侧栏加入已运行的时间</h3><p>相当于给记录博客的年龄, 但是我的不显示, 不知道为啥, 比较惆怅, 估计可能是主题风格的原因吧</p>
<div class="note primary"><p>首先, 在`~/blog/themes/next/layout/_custom/sidebar.swig`, 加入以下代码</p></div>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;div id="days"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script language=<span class="string">"javascript"</span>&gt;</span><br><span class="line">function show_date_time()&#123;</span><br><span class="line">window.setTimeout(<span class="string">"show_date_time()"</span>, <span class="number">1000</span>);</span><br><span class="line">BirthDay=new Date(<span class="string">"05/27/2017 15:00:00"</span>);</span><br><span class="line">today=new Date();</span><br><span class="line">timeold=(today.getTime()-BirthDay.getTime());</span><br><span class="line">sectimeold=timeold/<span class="number">1000</span></span><br><span class="line">secondsold=Math.floor(sectimeold);</span><br><span class="line">msPerDay=<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span></span><br><span class="line">e_daysold=timeold/msPerDay</span><br><span class="line">daysold=Math.floor(e_daysold);</span><br><span class="line">e_hrsold=(e_daysold-daysold)*<span class="number">24</span>;</span><br><span class="line">hrsold=setzero(Math.floor(e_hrsold));</span><br><span class="line">e_minsold=(e_hrsold-hrsold)*<span class="number">60</span>;</span><br><span class="line">minsold=setzero(Math.floor((e_hrsold-hrsold)*<span class="number">60</span>));</span><br><span class="line">seconds=setzero(Math.floor((e_minsold-minsold)*<span class="number">60</span>));</span><br><span class="line">document.getElementById(<span class="string">'days'</span>).innerHTML=<span class="string">"已运行"</span>+daysold+<span class="string">"天"</span>+hrsold+<span class="string">"小时"</span>+minsold+<span class="string">"分"</span>+seconds+<span class="string">"秒"</span>;</span><br><span class="line">&#125;</span><br><span class="line">function setzero(i)&#123;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">10</span>)</span><br><span class="line">&#123;i=<span class="string">"0"</span> + i&#125;;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">show_date_time();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<div class="note warning"><p>切记要将上面的`Date`按照一样的格式改成自己的时间</p></div>

<p>然后还要修改<code>~/blog/themes/next/layout/_macro/sidebar.swig</code></p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">&#123;# Blogroll #&#125;</span><br><span class="line">        &#123;% if theme.links %&#125;</span><br><span class="line">          &lt;div class="links-of-blogroll motion-element &#123;&#123; "links-of-blogroll-" + theme.links_layout | default('inline') &#125;&#125;"&gt;</span><br><span class="line">            &lt;div class="links-of-blogroll-title"&gt;</span><br><span class="line">              &lt;i class="fa  fa-fw fa-&#123;&#123; theme.links_icon | default('globe') | lower &#125;&#125;"&gt;&lt;/i&gt;</span><br><span class="line">              &#123;&#123; theme.links_title &#125;&#125;&amp;nbsp;</span><br><span class="line">              &lt;i class="fa  fa-fw fa-&#123;&#123; theme.links_icon | default('globe') | lower &#125;&#125;"&gt;&lt;/i&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;ul class="links-of-blogroll-list"&gt;</span><br><span class="line">              &#123;% for name, link in theme.links %&#125;</span><br><span class="line">                &lt;li class="links-of-blogroll-item"&gt;</span><br><span class="line">                  &lt;a href="&#123;&#123; link &#125;&#125;" title="&#123;&#123; name &#125;&#125;" target="_blank"&gt;&#123;&#123; name &#125;&#125;&lt;/a&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">              &#123;% endfor %&#125;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line"><span class="addition">+        &#123;% include '../_custom/sidebar.swig' %&#125;</span></span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">         &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="deletion">-        &#123;% include '../_custom/sidebar.swig' %&#125;</span></span><br></pre></td></tr></table></figure>

<p>如果你还想修改样式, 打开<code>~/blog/themes/next/source/css/_custom/custom.styl</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义的侧栏时间样式</span></span><br><span class="line"><span class="meta">#days &#123;</span></span><br><span class="line">    display: block;</span><br><span class="line">    color: rgb(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>);</span><br><span class="line">    font-size: <span class="number">13</span>px;</span><br><span class="line">    margin-top: <span class="number">15</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="添加Top阅读排行页面"><a href="#添加Top阅读排行页面" class="headerlink" title="添加Top阅读排行页面"></a>添加Top阅读排行页面</h3><ul>
<li>基于<code>Leancloud</code>的文章阅读量进行文章排行, 所以前提是在主题配置文件中, 配置了<code>Leancloud</code>的相关配置</li>
<li>新建排行榜页面<ul>
<li>终端打开博客所在目录: <code>~/blog/</code></li>
<li>终端输入: <code>hexo new page &quot;top&quot;</code></li>
</ul>
</li>
<li>在主题配置文件中加上菜单 <code>top</code> 和它的 <code>icon</code>, 文件位置: <code>~/blog/themes/next/_config.yml</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  top: <span class="regexp">/top/</span> || signal</span><br></pre></td></tr></table></figure>

<p>接着在语言翻译文件中加上菜单 <code>top</code>, 文件位置：<code>~/blog/themes/next/languages/zh_Hans.yml</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: 首页</span><br><span class="line">  top: 排行 # 名字自定义就好</span><br><span class="line">  archives: 文章</span><br><span class="line">  categories: 分类</span><br><span class="line">  tags: 标签</span><br><span class="line">  about: 关于</span><br><span class="line">  search: 搜索</span><br></pre></td></tr></table></figure>

<p>最后，编辑第一步新建页面生成的<code>index.md</code>文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 排行榜</span><br><span class="line">comments: <span class="literal">false</span></span><br><span class="line">date: <span class="number">2018</span><span class="number">-05</span><span class="number">-04</span> <span class="number">14</span>:<span class="number">14</span>:<span class="number">02</span></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"top"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="https:/</span><span class="regexp">/cdn1.lncld.net/</span><span class="keyword">static</span>/js/av-core-mini<span class="number">-0.6</span><span class="number">.4</span>.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;AV.initialize("</span>app_id<span class="string">", "</span>app_key<span class="string">");&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script type="</span>text/javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">  var time=0</span></span><br><span class="line"><span class="string">  var title="</span><span class="string">"</span></span><br><span class="line"><span class="string">  var url="</span><span class="string">"</span></span><br><span class="line"><span class="string">  var query = new AV.Query('Counter');</span></span><br><span class="line"><span class="string">  query.notEqualTo('id',0);</span></span><br><span class="line"><span class="string">  query.descending('time');</span></span><br><span class="line"><span class="string">  query.limit(1000);</span></span><br><span class="line"><span class="string">  query.find().then(function (todo) &#123;</span></span><br><span class="line"><span class="string">    for (var i=0;i&lt;1000;i++)&#123;</span></span><br><span class="line"><span class="string">      var result=todo[i].attributes;</span></span><br><span class="line"><span class="string">      time=result.time;</span></span><br><span class="line"><span class="string">      title=result.title;</span></span><br><span class="line"><span class="string">      url=result.url;</span></span><br><span class="line"><span class="string">      var content="</span>&lt;a href=<span class="string">'"+"https://www.titanjun.top"+url+"'</span>&gt;<span class="string">"+title+"</span>&lt;<span class="regexp">/a&gt;"+"&lt;br /</span>&gt;<span class="string">"+"</span>&lt;font color=<span class="string">'#555'</span>&gt;<span class="string">"+"</span>阅读次数：<span class="string">"+time+"</span>&lt;<span class="regexp">/font&gt;"+"&lt;br /</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><span class="string">";</span></span><br><span class="line"><span class="string">      document.getElementById("</span>top<span class="string">").innerHTML+=content</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;, function (error) &#123;</span></span><br><span class="line"><span class="string">    console.log("</span>error<span class="string">");</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>必须将里面的里面的<code>app_id</code>和<code>app_key</code>替换为你的主题配置文件中的值，必须替换里面博客的链接，1000是显示文章的数量</p>
<h3 id="点击侧栏头像回到博客首页"><a href="#点击侧栏头像回到博客首页" class="headerlink" title="点击侧栏头像回到博客首页"></a>点击侧栏头像回到博客首页</h3><ul>
<li>首先要在主题配置文件中配置好，比如我把头像<code>avatar.gif</code>放<code>在~/blog/source/uploads/</code></li>
<li>修改主题配置文件: <code>~/blog/themes/next/_config.yml</code></li>
</ul>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line"># in theme directory(source/images): /images/avatar.gif</span><br><span class="line"># in site  directory(source/uploads): /uploads/avatar.gif</span><br><span class="line"><span class="deletion">-#avatar: /images/avatar.gif</span></span><br><span class="line"><span class="addition">+avatar: /uploads/avatar.gif</span></span><br></pre></td></tr></table></figure>

<p>然后编辑文件：<code>~/blog/themes/next/layout/_macro/sidebar.swig</code></p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">+        &lt;a href="/" class="site-author-image" rel="start" style="border:none"&gt;</span></span><br><span class="line">          &lt;img class="site-author-image" itemprop="image"</span><br><span class="line">               src="&#123;&#123; url_for( theme.avatar | default(theme.images + '/avatar.gif') ) &#125;&#125;"</span><br><span class="line">               alt="&#123;&#123; theme.author &#125;&#125;" /&gt;</span><br><span class="line"><span class="addition">+        &lt;/a&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="文章摘要图片"><a href="#文章摘要图片" class="headerlink" title="文章摘要图片"></a>文章摘要图片</h3><ul>
<li>文章摘要是指每篇文章在页面上显示的那部分内容，也就是阅读全文之前的文章内容, 进入文章后图片自动隐藏</li>
<li>在主题配置文件中：<code>~/blog/themes/next/_config.yml</code></li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">excerpt_description: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>在文件中添加如下代码: <code>~/blog/themes/next/layout/_macro/post.swig</code></p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">&#123;% if is_index %&#125;</span><br><span class="line">        &#123;% if post.description and theme.excerpt_description %&#125;</span><br><span class="line">          &#123;&#123; post.description &#125;&#125;</span><br><span class="line">          &lt;!--noindex--&gt;</span><br><span class="line">          &lt;div class="post-button text-center"&gt;</span><br><span class="line">            &lt;a class="btn" href="&#123;&#123; url_for(post.path) &#125;&#125;"&gt;</span><br><span class="line">              &#123;&#123; __('post.read_more') &#125;&#125; &amp;raquo;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;!--/noindex--&gt;</span><br><span class="line">        &#123;% elif post.excerpt  %&#125;</span><br><span class="line">          &#123;&#123; post.excerpt &#125;&#125;</span><br><span class="line"><span class="addition">+          </span></span><br><span class="line"><span class="addition">+        &#123;% if post.image %&#125;</span></span><br><span class="line"><span class="addition">+        &lt;div class="out-img-topic"&gt;</span></span><br><span class="line"><span class="addition">+          &lt;img src=&#123;&#123; post.image &#125;&#125; class="img-topic" /&gt;</span></span><br><span class="line"><span class="addition">+        &lt;/div&gt;</span></span><br><span class="line"><span class="addition">+        &#123;% endif %&#125;</span></span><br><span class="line"><span class="addition">+          </span></span><br><span class="line">          &lt;!--noindex--&gt;</span><br><span class="line">          &lt;div class="post-button text-center"&gt;</span><br><span class="line">            &lt;a class="btn" href="&#123;&#123; url_for(post.path) &#125;&#125;&#123;% if theme.scroll_to_more %&#125;#&#123;&#123; __('post.more') &#125;&#125;&#123;% endif %&#125;" rel="contents"&gt;</span><br><span class="line">              &#123;&#123; __('post.read_more') &#125;&#125; &amp;raquo;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;!--/noindex--&gt;</span><br></pre></td></tr></table></figure>

<p>为了防止有的图片宽度不够导致风格不够统一，页面不美观，需要在<code>~/blog/themes/next/source/css/_custom/custom.styl</code>中添加</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义的文章摘要图片样式</span></span><br><span class="line">img.img-topic &#123;</span><br><span class="line">    width: <span class="number">100</span>%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后编辑有这需求的相关文章时, 在<code>Front-matter</code>（文件最上方以<code>---</code>分隔的区域）加上一行：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">image: url  # 图片的链接地址</span><br></pre></td></tr></table></figure>

<h3 id="使用CloudFlare配置https"><a href="#使用CloudFlare配置https" class="headerlink" title="使用CloudFlare配置https"></a>使用<code>CloudFlare</code>配置<code>https</code></h3><p>参考</p>
<ul>
<li><a href="https://blog.csdn.net/u010099080/article/details/79617603" target="_blank" rel="noopener">使用 CloudFlare 为 hexo 博客实现 HTTPS</a></li>
<li><a href="https://coderschool.cn/2035.html" target="_blank" rel="noopener">使用 cloudflare 为网站添加免费 CDN 并获取免费 SSL 服务</a></li>
<li><a href="https://www.yicodes.com/2016/12/04/free-cloudflare-ssl-for-custom-domain/" target="_blank" rel="noopener">为自定义域名的GitHub Pages添加SSL 完整方案</a></li>
</ul>
<h3 id="关于next主题个性化配置"><a href="#关于next主题个性化配置" class="headerlink" title="关于next主题个性化配置"></a>关于next主题个性化配置</h3><p>这里给大家推荐, 提供33中炫酷效果的文章</p>
<ul>
<li><a href="https://segmentfault.com/a/1190000009544924" target="_blank" rel="noopener">hexo的next主题个性化配置教程</a></li>
<li><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html#fn:2" target="_blank" rel="noopener">打造个性超赞博客Hexo+NexT+GithubPages的超深度优化</a></li>
<li><a href="http://www.zhaojun.im/hexo-valine-modify/" target="_blank" rel="noopener">Hexo 优化 — 支持邮件通知的评论 Valine 增强版</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据类型详解02</title>
    <url>/posts/144857e2/</url>
    <content><![CDATA[<ul>
<li>上文<a href="https://www.titanjun.top/2018/04/10/Python数据类型详解01/" target="_blank" rel="noopener">Python数据类型详解01</a>中主要介绍了<code>Python</code>中的一些常用的数据类型</li>
<li>这篇文章主要介绍一些<code>Python</code>中的一些常用的模块</li>
</ul>
<a id="more"></a>

<h2 id="Number-数字"><a href="#Number-数字" class="headerlink" title="Number(数字)"></a>Number(数字)</h2><ul>
<li><code>Python</code> 中数学运算常用的函数基本都在 <code>math</code> 模块、<code>cmath</code> 模块中。</li>
<li><code>math</code> 模块提供了许多对浮点数的数学运算函数。</li>
<li><code>cmath</code> 模块包含了一些用于复数运算的函数。</li>
<li><code>cmath</code> 模块的函数跟 <code>math</code> 模块函数基本一致，区别是 <code>cmath</code> 模块运算的是复数，<code>math</code> 模块运算的是数学运算。</li>
<li>要使用 <code>math</code> 或 <code>cmath</code> 函数必须先导入：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="keyword">import</span> cmath</span><br></pre></td></tr></table></figure>

<h3 id="Python数学常量"><a href="#Python数学常量" class="headerlink" title="Python数学常量"></a>Python数学常量</h3><p>在<code>math</code>模块中定义了三个数学常量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自然常数 e</span></span><br><span class="line">e = <span class="number">2.718281828459045</span></span><br><span class="line"><span class="comment"># 圆周率，一般以π来表示</span></span><br><span class="line">pi = <span class="number">3.141592653589793</span></span><br><span class="line"><span class="comment"># 2π</span></span><br><span class="line">tau = <span class="number">6.283185307179586</span></span><br></pre></td></tr></table></figure>

<h3 id="Python三角函数"><a href="#Python三角函数" class="headerlink" title="Python三角函数"></a>Python三角函数</h3><p>要直接访问的，需要导入 <code>math</code> 模块, 然后通过 math 静态对象调用方法</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>acos(x)</td>
<td>返回x的反余弦弧度值。</td>
</tr>
<tr>
<td>asin(x)</td>
<td>返回x的反正弦弧度值。</td>
</tr>
<tr>
<td>atan(x)</td>
<td>返回x的反正切弧度值。</td>
</tr>
<tr>
<td>atan2(y, x)</td>
<td>返回给定的 X 及 Y 坐标值的反正切值。</td>
</tr>
<tr>
<td>cos(x)</td>
<td>返回x的弧度的余弦值。</td>
</tr>
<tr>
<td>hypot(x, y)</td>
<td>返回欧几里德范数 <code>sqrt(x*x + y*y)</code>。</td>
</tr>
<tr>
<td>sin(x)</td>
<td>返回的x弧度的正弦值。</td>
</tr>
<tr>
<td>tan(x)</td>
<td>返回x弧度的正切值。</td>
</tr>
<tr>
<td>degrees(x)</td>
<td>将弧度转换为角度,如degrees(math.pi/2) ， 返回90.0</td>
</tr>
<tr>
<td>radians(x)</td>
<td>将角度转换为弧度</td>
</tr>
</tbody></table>
<h3 id="Python数学函数"><a href="#Python数学函数" class="headerlink" title="Python数学函数"></a>Python数学函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>返回值 ( 描述 )</th>
</tr>
</thead>
<tbody><tr>
<td>abs(x)</td>
<td>返回数字的绝对值，如abs(-12) 返回 12</td>
</tr>
<tr>
<td>ceil(x)</td>
<td>返回数字的上入整数(小数向上取整)，如math.ceil(4.1) 返回 5, math.ceil(4.0) 返回 4</td>
</tr>
<tr>
<td>cmp(x, y)</td>
<td>如果 <code>x &lt; y</code> 返回 -1, 如果 <code>x == y</code> 返回 0, 如果 <code>x &gt; y</code> 返回 1; (Python在3.x中已经弃用)</td>
</tr>
<tr>
<td>exp(x)</td>
<td>返回e的x次幂, 如math.exp(2) 返回7.38905609893065</td>
</tr>
<tr>
<td>fabs(x)</td>
<td>返回数字的绝对值，如<code>math.fabs(-10)</code> 返回10.0</td>
</tr>
<tr>
<td>floor(x)</td>
<td>返回数字的下舍整数(小数向下取整)，如math.floor(4.9)返回 4</td>
</tr>
<tr>
<td>log(x)</td>
<td>如<code>math.log(math.e)</code>返回1.0, <code>math.log(100,10)</code>返回2.0</td>
</tr>
<tr>
<td>log10(x)</td>
<td>返回以10为基数的x的对数，如<code>math.log10(100)</code>返回 2.0</td>
</tr>
<tr>
<td>max(x1, x2,…)</td>
<td>返回给定参数的最大值，参数可以为序列。</td>
</tr>
<tr>
<td>min(x1, x2,…)</td>
<td>返回给定参数的最小值，参数可以为序列。</td>
</tr>
<tr>
<td>modf(x)</td>
<td>返回x的整数部分与小数部分(元组形式)，两部分的数值符号与x相同，整数部分以浮点型表示; 如:<code>math.modf(99.09)</code>, 返回(0.09000000000000341, 99.0)</td>
</tr>
<tr>
<td>pow(x, y)</td>
<td><code>x**y</code> 运算后的值。</td>
</tr>
<tr>
<td>round(x [,n])</td>
<td>返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数; 如round(90.09, 1)输出:90.1; 如:<code>round(90.09)</code>输出:90</td>
</tr>
<tr>
<td>sqrt(x)</td>
<td>返回数字x的平方根, 如:<code>math.sqrt(4)</code>返回 2.0</td>
</tr>
</tbody></table>
<ul>
<li>其中<code>abs()</code> 和 <code>fabs()</code> 区别<ul>
<li><code>abs()</code>是一个内置函数，而<code>fabs()</code>在<code>math</code>模块中定义的。</li>
<li><code>fabs()</code>函数只适用于<code>float</code>和<code>integer</code>类型，而<code>abs()</code> 也适用于复数</li>
</ul>
</li>
</ul>
<h3 id="Python随机数函数"><a href="#Python随机数函数" class="headerlink" title="Python随机数函数"></a>Python随机数函数</h3><ul>
<li>随机数可以用于数学，游戏，安全等领域中，还经常被嵌入到算法中，用以提高算法效率，并提高程序的安全性。</li>
<li>随机数函数需要导入 <code>random</code> 模块，然后通过 <code>random</code> 静态对象调用函数方法</li>
<li><code>Python</code>包含以下常用随机数函数：</li>
</ul>
<h4 id="choice"><a href="#choice" class="headerlink" title="choice"></a>choice</h4><p>从序列(元组, 列表, 字符串)的元素中随机挑选一个元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">random.choice( seq  )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试用例</span></span><br><span class="line"><span class="comment"># 从序列的元素中随机挑选一个元素</span></span><br><span class="line">print(random.choice((<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>)))</span><br><span class="line">print(random.choice([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]))</span><br><span class="line"><span class="comment"># 随机返回一个字符</span></span><br><span class="line">print(random.choice(<span class="string">"titanjun"</span>))</span><br></pre></td></tr></table></figure>

<h4 id="randrange"><a href="#randrange" class="headerlink" title="randrange"></a>randrange</h4><p>返回指定递增基数集合中的一个随机数，默认基数缺省值为1, 默认类型为int</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">randrange(self, start, stop=<span class="literal">None</span>, step=<span class="number">1</span>, _int=int)</span><br></pre></td></tr></table></figure>

<ul>
<li>参数<ul>
<li><code>start</code> – 指定范围内的开始值，包含在范围内。</li>
<li><code>stop</code> – 指定范围内的结束值，不包含在范围内。</li>
<li><code>step</code> – 指定递增基数</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出 100 &lt;= number &lt; 1000 间的随机偶数</span></span><br><span class="line">print(random.randrange(<span class="number">100</span>, <span class="number">1000</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<h4 id="random"><a href="#random" class="headerlink" title="random"></a>random</h4><p>随机生成的一个实数，它在[0,1)范围内</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(random.random())</span><br></pre></td></tr></table></figure>

<h4 id="seed"><a href="#seed" class="headerlink" title="seed"></a>seed</h4><p>该函数没有返回值, 改变随机数生成器的种子, 可生成同一个随机数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.seed(<span class="number">5</span>)</span><br><span class="line">print(random.random())</span><br><span class="line">random.seed()</span><br><span class="line">print(random.random())</span><br></pre></td></tr></table></figure>

<h4 id="shuffle"><a href="#shuffle" class="headerlink" title="shuffle"></a>shuffle</h4><ul>
<li>将列表的所有元素随机排序, 没有返回值</li>
<li>因元组不支持二次赋值, 所以元组不支持重新排列</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将序列的所有元素随机排序</span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">random.shuffle(list1)</span><br><span class="line">print(list1)</span><br></pre></td></tr></table></figure>

<h4 id="uniform"><a href="#uniform" class="headerlink" title="uniform"></a>uniform</h4><ul>
<li>随机生成一个在[x, y)范围内的实数</li>
<li>参数:<ul>
<li>x – 随机数的最小值，包含该值。</li>
<li>y – 随机数的最大值，不包含该值。</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(random.uniform(<span class="number">2</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure>

<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>上一篇文章<a href="https://www.titanjun.top/2018/04/10/Python数据类型详解01/" target="_blank" rel="noopener">Python数据类型详解01</a>介绍了字符串的一些基础知识, 这里就主要介绍字符创中常用的函数和语法</p>
<h3 id="in-和-not-in"><a href="#in-和-not-in" class="headerlink" title="in 和 not in"></a><code>in</code> 和 <code>not in</code></h3><p>判断字符串是否包含指定字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断字符串中是否包含某字符串</span></span><br><span class="line">str = <span class="string">'Hello Python'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'llo'</span> <span class="keyword">in</span> str):</span><br><span class="line">    str += <span class="string">' True'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    str += <span class="string">' False'</span></span><br><span class="line">print(str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断字符串是否不包含某字符串</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'py'</span> <span class="keyword">not</span> <span class="keyword">in</span> str):</span><br><span class="line">    str += <span class="string">' not in'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    str += <span class="string">' in'</span></span><br><span class="line">print(str)</span><br><span class="line"></span><br><span class="line">// 分别输出</span><br><span class="line">Hello Python <span class="literal">True</span></span><br><span class="line">Hello Python <span class="literal">True</span> <span class="keyword">not</span> <span class="keyword">in</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h3><p>把其他类型的数据格式化为字符串形式返回, 字符串和其他类型之间要有<code>%</code>分开</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>%c</code></td>
<td>格式化字符及其ASCII码</td>
</tr>
<tr>
<td><code>%s</code></td>
<td>格式化字符串</td>
</tr>
<tr>
<td><code>%d</code></td>
<td>格式化整数</td>
</tr>
<tr>
<td><code>%u</code></td>
<td>格式化无符号整型</td>
</tr>
<tr>
<td><code>%o</code></td>
<td>格式化无符号八进制数</td>
</tr>
<tr>
<td><code>%x</code></td>
<td>格式化无符号十六进制数</td>
</tr>
<tr>
<td><code>%X</code></td>
<td>格式化无符号十六进制数（大写）</td>
</tr>
<tr>
<td><code>%f</code></td>
<td>格式化浮点数字，可指定小数点后的精度</td>
</tr>
<tr>
<td><code>%e</code></td>
<td>用科学计数法格式化浮点数</td>
</tr>
<tr>
<td><code>%E</code></td>
<td>作用同%e，用科学计数法格式化浮点数</td>
</tr>
<tr>
<td><code>%g</code></td>
<td>%f和%e的简写</td>
</tr>
<tr>
<td><code>%G</code></td>
<td>%f 和 %E 的简写</td>
</tr>
<tr>
<td><code>%p</code></td>
<td>用十六进制数格式化变量的地址</td>
</tr>
</tbody></table>
<p>使用方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'che is %d'</span> % <span class="number">19</span>)</span><br><span class="line"></span><br><span class="line">// 跟C语言的写法</span><br><span class="line">prin他(<span class="string">"che is %d"</span>, <span class="number">19</span>)</span><br></pre></td></tr></table></figure>

<h3 id="str-format-函数"><a href="#str-format-函数" class="headerlink" title="str.format()函数"></a><code>str.format()</code>函数</h3><ul>
<li><code>Python2.6</code> 开始，新增了一种格式化字符串的函数 <code>str.format()</code>，它增强了字符串格式化的功能。<br>基本语法是通过 <code>{}</code> 和 <code>:</code> 来代替以前的 <code>%</code> 。</li>
<li><code>format</code> 函数可以接受不限个参数，位置可以不按顺序。</li>
</ul>
<p>简单使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># format函数</span></span><br><span class="line"><span class="comment"># 不设置指定位置，按默认顺序</span></span><br><span class="line">str1 = <span class="string">'&#123;&#125; &#123;&#125;'</span>.format(<span class="string">'hello'</span>, <span class="string">'python'</span>)</span><br><span class="line">print(str1)</span><br><span class="line"><span class="comment"># 设置指定位置</span></span><br><span class="line">str2 = <span class="string">'&#123;0&#125;&#123;1&#125;'</span>.format(<span class="string">'Python'</span>, <span class="string">'字符串'</span>)</span><br><span class="line">print(str2)</span><br><span class="line"><span class="comment"># 设置指定位置</span></span><br><span class="line">str3 = <span class="string">'&#123;1&#125; &#123;0&#125; &#123;1&#125;'</span>.format(<span class="string">'hello'</span>, <span class="string">'che'</span>)</span><br><span class="line">print(str3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置参数</span></span><br><span class="line">print(<span class="string">"姓名: &#123;name&#125;, 年龄: &#123;age&#125;"</span>.format(name=<span class="string">'che'</span>, age=<span class="number">18</span>))</span><br><span class="line"><span class="comment"># 设置字典参数</span></span><br><span class="line">dic = &#123;<span class="string">'name'</span>: <span class="string">'jun'</span>, <span class="string">'age'</span>: <span class="number">20</span>&#125;</span><br><span class="line">print(<span class="string">"姓名: &#123;name&#125;, 年龄: &#123;age&#125;"</span>.format(**dic))</span><br><span class="line"><span class="comment"># 设置列表参数</span></span><br><span class="line">list0 = [<span class="string">'titan'</span>, <span class="number">20</span>]</span><br><span class="line">print(<span class="string">"姓名: &#123;0[0]&#125;, 年龄: &#123;0[1]&#125;"</span>.format(list0))</span><br><span class="line"></span><br><span class="line">/*输出结果</span><br><span class="line">hello python</span><br><span class="line">Python字符串</span><br><span class="line">che hello che</span><br><span class="line">姓名: che, 年龄: <span class="number">18</span></span><br><span class="line">姓名: jun, 年龄: <span class="number">20</span></span><br><span class="line">姓名: titan, 年龄: <span class="number">20</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<h3 id="格式化操作符辅助指令"><a href="#格式化操作符辅助指令" class="headerlink" title="格式化操作符辅助指令"></a>格式化操作符辅助指令</h3><p>相关操作符具体的使用后面再说</p>
<p><img src="http://titanjun.oss-cn-hangzhou.aliyuncs.com/python/String-1.png" alt="image description"></p>
<h3 id="数字格式化操作符"><a href="#数字格式化操作符" class="headerlink" title="数字格式化操作符"></a>数字格式化操作符</h3><table>
<thead>
<tr>
<th>数字</th>
<th>格式</th>
<th>输出</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>3.1415926</td>
<td><code>{:.2f}</code></td>
<td>3.14</td>
<td>保留小数点后两位</td>
</tr>
<tr>
<td>3.1415926</td>
<td><code>{:+.2f}</code></td>
<td>+3.14</td>
<td>带符号保留小数点后两位</td>
</tr>
<tr>
<td>-1</td>
<td><code>{:+.2f}</code></td>
<td>-1.00</td>
<td>带符号保留小数点后两位</td>
</tr>
<tr>
<td>2.71828</td>
<td><code>{:.0f}</code></td>
<td>3</td>
<td>不带小数</td>
</tr>
<tr>
<td>5</td>
<td><code>{:0&gt;2d}</code></td>
<td>05</td>
<td>数字补零 (填充左边, 宽度为2)</td>
</tr>
<tr>
<td>5</td>
<td><code>{:x&lt;4d}</code></td>
<td>5xxx</td>
<td>数字补x (填充右边, 宽度为4)</td>
</tr>
<tr>
<td>10</td>
<td><code>{:x&lt;4d}</code></td>
<td>10xx</td>
<td>数字补x (填充右边, 宽度为4)</td>
</tr>
<tr>
<td>1000000</td>
<td><code>{:,}</code></td>
<td>1,000,000</td>
<td>以逗号分隔的数字格式</td>
</tr>
<tr>
<td>0.25</td>
<td><code>{:.2%}</code></td>
<td>25.00%</td>
<td>百分比格式</td>
</tr>
<tr>
<td>1000000000</td>
<td><code>{:.2e}</code></td>
<td>1.00e+09</td>
<td>指数记法</td>
</tr>
<tr>
<td>13</td>
<td><code>{:10d}</code></td>
<td>13</td>
<td>右对齐 (默认, 宽度为10)</td>
</tr>
<tr>
<td>13</td>
<td><code>{:&lt;10d}</code></td>
<td>13</td>
<td>左对齐 (宽度为10)</td>
</tr>
<tr>
<td>13</td>
<td><code>{:^10d}</code></td>
<td>13</td>
<td>中间对齐 (宽度为10)</td>
</tr>
</tbody></table>
<p>进制转换(以十进制数字11为例)</p>
<table>
<thead>
<tr>
<th>进制</th>
<th>格式</th>
<th>输出</th>
</tr>
</thead>
<tbody><tr>
<td>二进制</td>
<td><code>&#39;{:b}&#39;.format(11)</code></td>
<td>1011</td>
</tr>
<tr>
<td>十进制</td>
<td><code>&#39;{:d}&#39;.format(11)</code></td>
<td>11</td>
</tr>
<tr>
<td>八进制</td>
<td><code>&#39;{:o}&#39;.format(11)</code></td>
<td>13</td>
</tr>
<tr>
<td>十六进制</td>
<td><code>&#39;{:x}&#39;.format(11)</code></td>
<td>b</td>
</tr>
<tr>
<td>小写十六进制</td>
<td><code>&#39;{:#x}&#39;.format(11)</code></td>
<td>0xb</td>
</tr>
<tr>
<td>大写十六进制</td>
<td><code>&#39;{:#X}&#39;.format(11)</code></td>
<td>0XB</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'百分比: %d%%'</span> % <span class="number">23</span>)</span><br><span class="line">print(<span class="string">'&#123;&#125;索引值: &#123;&#123;0&#125;&#125;'</span>.format(<span class="string">'jun'</span>))</span><br><span class="line">print(<span class="string">'&#123;:#x&#125;'</span>.format(<span class="number">9</span>))</span><br><span class="line">print(<span class="string">'&#123;:#X&#125;'</span>.format(<span class="number">9</span>))</span><br><span class="line"></span><br><span class="line">/*输出结果: </span><br><span class="line">百分比: <span class="number">23</span>%</span><br><span class="line">jun索引值: &#123;<span class="number">0</span>&#125;</span><br><span class="line"><span class="number">0x9</span></span><br><span class="line"><span class="number">0X9</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<h3 id="字符串的内建函数"><a href="#字符串的内建函数" class="headerlink" title="字符串的内建函数"></a>字符串的内建函数</h3><p>下列方法实现了<code>string</code>模块的大部分方法，如下表所示列出了目前字符串内建支持的方法，所有的方法都包含了对<code>Unicode</code>的支持，有一些甚至是专门用于<code>Unicode</code>的</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>返回结果</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>&#39;titan&#39;.capitalize()</code></td>
<td>Titan</td>
<td>把字符串的第一个字符大写</td>
</tr>
<tr>
<td><code>&#39;hello\tpython&#39;.expandtabs()</code></td>
<td>hello python</td>
<td>把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8</td>
</tr>
<tr>
<td><code>str5.find(&#39;irl&#39;)</code></td>
<td>11</td>
<td>检测 str 是否包含在 string 中，如果 beg 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回-1</td>
</tr>
<tr>
<td><code>str5.rfind(&#39;irl&#39;)</code></td>
<td>11</td>
<td>同find方法, 从右向左查询</td>
</tr>
<tr>
<td>str5.index(‘gi’)</td>
<td>10</td>
<td>跟find()方法一样，只不过如果str不在 string中会报一个异常.</td>
</tr>
<tr>
<td>str5.rindex(‘gi’)</td>
<td>10</td>
<td>同index方法, 从右向左查询</td>
</tr>
<tr>
<td><code>&#39;jun0929&#39;.isalnum()</code></td>
<td>True</td>
<td>至少有一个字符并且所有字符都是字母或数字则返回 True,否则返回 False</td>
</tr>
<tr>
<td><code>&#39;titan&#39;.isalpha()</code></td>
<td>True</td>
<td>至少有一个字符并且所有字符都是字母则返回 True,否则返回 False</td>
</tr>
<tr>
<td><code>u&#39;23e&#39;.isdecimal()</code></td>
<td>False</td>
<td>字符串只包含十进制字符返回True，否则返回False(只针对unicode对象)</td>
</tr>
<tr>
<td><code>&quot;123456&quot;.isdigit()</code></td>
<td>True</td>
<td>字符串只包含数字则返回 True 否则返回 False</td>
</tr>
<tr>
<td><code>&#39;23e&#39;.islower()</code></td>
<td>True</td>
<td>字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False</td>
</tr>
<tr>
<td><code>u&quot;23443434&quot;isnumeric()</code></td>
<td>True</td>
<td>字符串中只包含数字字符，则返回 True，否则返回 False(只针对unicode对象)</td>
</tr>
<tr>
<td><code>&quot;       &quot;.isspace()</code></td>
<td>True</td>
<td>字符串中只包含空格，则返回 True，否则返回 False.</td>
</tr>
<tr>
<td><code>&#39;JING&#39;.isupper()</code></td>
<td>True</td>
<td>字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False</td>
</tr>
<tr>
<td><code>&#39;-&#39;.join( [&#39;a&#39;, &#39;s&#39;, &#39;d&#39;] )</code></td>
<td>a-s-d</td>
<td>用于将序列中的元素以指定的字符连接生成一个新的字符串</td>
</tr>
<tr>
<td><code>&#39;THIS&#39;.lower</code></td>
<td>this</td>
<td>返回将字符串中所有大写字符转换为小写后生成的字符串</td>
</tr>
<tr>
<td><code>&quot;88this&quot;.lstrip(&#39;8&#39;)</code></td>
<td>this</td>
<td>返回截掉字符串左边的空格或指定字符后生成的新字符串</td>
</tr>
<tr>
<td><code>&#39;this88&#39;.rstrip(&#39;8&#39;)</code></td>
<td>this</td>
<td>返回截掉字符串右边的空格或指定字符后生成的新字符串</td>
</tr>
<tr>
<td><code>max(&#39;python&#39;)</code></td>
<td>z</td>
<td>返回字符串中最大的字母</td>
</tr>
<tr>
<td><code>min(&#39;python&#39;)</code></td>
<td>h</td>
<td>返回字符串中最小的字母</td>
</tr>
<tr>
<td><code>&#39;https://www.titanjun.top&#39;.partition(&#39;://&#39;)</code></td>
<td>(‘https’, ‘://‘, ‘<a href="http://www.titanjun.top&#39;" target="_blank" rel="noopener">www.titanjun.top&#39;</a>)</td>
<td>返回一个3元的元组，第一个为分隔符左边的子串，第二个为分隔符本身，第三个为分隔符右边的子串</td>
</tr>
<tr>
<td><code>&#39;this&#39;.startswith(&#39;th&#39;, 1, 4)</code></td>
<td>False</td>
<td>检查字符串在制定范围内是否是以指定子字符串开头</td>
</tr>
<tr>
<td><code>&quot;0jun0&quot;.strip(&#39;0&#39;)</code></td>
<td>jun</td>
<td>返回移除字符串头尾指定的字符生成的新字符串</td>
</tr>
<tr>
<td><code>&#39;Python&#39;.swapcase()</code></td>
<td>pYTHON</td>
<td>返回大小写字母转换后生成的新字符串</td>
</tr>
<tr>
<td><code>&#39;hello python&#39;.title()</code></td>
<td>Hello Python</td>
<td>返回所有单词都是以大写开始</td>
</tr>
<tr>
<td><code>&#39;jun&#39;.upper()</code></td>
<td>JUN</td>
<td>返回小写字母转为大写字母的字符串</td>
</tr>
</tbody></table>
<p>除了以上方法外还有下列重要方法</p>
<h4 id="count-方法"><a href="#count-方法" class="headerlink" title="count()方法"></a>count()方法</h4><p>返回子字符串在字符串中出现的次数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str.count(sub, start= <span class="number">0</span>,end=len(string))</span><br><span class="line"></span><br><span class="line">//使用</span><br><span class="line">print(<span class="string">'hello world'</span>.count(<span class="string">'l'</span>, <span class="number">1</span>, <span class="number">8</span>))</span><br><span class="line">print(<span class="string">'hello world'</span>.count(<span class="string">'l'</span>))</span><br><span class="line"></span><br><span class="line">//输出: </span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<ul>
<li>参数<ul>
<li><code>sub</code> – 搜索的子字符串</li>
<li><code>start</code> – 字符串开始搜索的位置。默认为第一个字符,第一个字符索引值为0。</li>
<li><code>end</code> – 字符串中结束搜索的位置。字符中第一个字符的索引为 0。默认为字符串的最后一个位置。</li>
</ul>
</li>
</ul>
<h4 id="center-方法"><a href="#center-方法" class="headerlink" title="center()方法"></a>center()方法</h4><p>返回一个原字符串居中,并使用空格填充至长度 width 的新字符串。默认填充字符为空格</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str.center(width, fillchar)</span><br><span class="line"></span><br><span class="line">//使用</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">'titan'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str.center(<span class="number">8</span>, <span class="string">'-'</span>)</span><br><span class="line"><span class="string">'--titan---'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str.center(<span class="number">9</span>)</span><br><span class="line"><span class="string">'   titan   '</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>不提供 <code>fillchar</code> 参数则默认为空格</li>
<li>当 <code>width</code> 参数小于等于原字符串的长度时，原样返回</li>
<li>无法使左右字符数相等时候，左侧字符会比右侧少 1</li>
</ul>
<h4 id="encode-方法"><a href="#encode-方法" class="headerlink" title="encode()方法"></a>encode()方法</h4><p>以 encoding 指定的编码格式编码字符串。errors参数可以指定不同的错误处理方案</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str.encode(encoding=<span class="string">'UTF-8'</span>,errors=<span class="string">'strict'</span>)</span><br><span class="line"></span><br><span class="line">//示例</span><br><span class="line"><span class="string">'titan'</span>.encode(<span class="string">'UTF-8'</span>,<span class="string">'strict'</span>)</span><br><span class="line"></span><br><span class="line">//输出: <span class="string">b'titan'</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>encoding</code> – 要使用的编码，如”UTF-8”。</li>
<li><code>errors</code> – 设置不同错误的处理方案。默认为 <code>strict</code>,意为编码错误引起一个<code>UnicodeError</code>。 其他可能得值有 <code>ignore</code>, <code>replace</code>, <code>xmlcharrefreplace</code>, <code>backslashreplace</code> 以及通过 <code>codecs.register_error()</code> 注册的任何值。</li>
</ul>
<h4 id="endswith-方法"><a href="#endswith-方法" class="headerlink" title="endswith()方法"></a>endswith()方法</h4><p>用于判断字符串是否以指定后缀结尾，如果以指定后缀结尾返回True，否则返回False</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str.endswith(suffix[, start[, end]])</span><br><span class="line"></span><br><span class="line">//使用示例</span><br><span class="line">str5 = <span class="string">'her is my girl friend haha!!'</span></span><br><span class="line">print(str5.endswith(<span class="string">'!!'</span>))</span><br><span class="line">print(str5.endswith(<span class="string">'ha'</span>, <span class="number">0</span>, len(str5) - <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">//输出结果: 都是<span class="literal">True</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>suffix</code> – 该参数可以是一个字符串或者是一个元素</li>
<li><code>start</code> – 字符串中的开始位置, 可不传</li>
<li><code>end</code> – 字符中结束位置, 可不传</li>
</ul>
<h4 id="ljust-和-rjust-方法"><a href="#ljust-和-rjust-方法" class="headerlink" title="ljust() 和 rjust()方法"></a>ljust() 和 rjust()方法</h4><ul>
<li><code>ljust()</code>: 返回一个原字符串左对齐,并使用空格填充至指定长度的新字符串。如果指定的长度小于原字符串的长度则返回原字符串</li>
<li><code>rjust()</code>: 返回一个原字符串右对齐</li>
<li>参数<ul>
<li><code>width</code> – 指定字符串长度。</li>
<li><code>fillchar</code> – 填充字符，默认为空格</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str.ljust(width[, fillchar])</span><br><span class="line">str.rjust(width[, fillchar])</span><br><span class="line"></span><br><span class="line">//测试用例</span><br><span class="line">str = <span class="string">"this is string example....wow!!!"</span>;</span><br><span class="line"><span class="keyword">print</span> str.ljust(<span class="number">50</span>, <span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">print</span> str.rjust(<span class="number">50</span>, <span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line">//输出:</span><br><span class="line">this <span class="keyword">is</span> string example....wow!!!<span class="number">000000000000000000</span></span><br><span class="line"><span class="number">000000000000000000</span>this <span class="keyword">is</span> string example....wow!!!</span><br></pre></td></tr></table></figure>

<h4 id="replace-方法"><a href="#replace-方法" class="headerlink" title="replace()方法"></a>replace()方法</h4><p>返回字符串中的 old（旧字符串） 替换成 new(新字符串)后生成的新字符串，如果指定第三个参数max，则替换不超过 max 次</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str.replace(old, new[, max])</span><br><span class="line"></span><br><span class="line">//测试</span><br><span class="line">str = <span class="string">'Python is a good language!'</span></span><br><span class="line">print(str7.replace(<span class="string">'o'</span>, <span class="string">'i'</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">//输出: </span><br><span class="line">Pythin <span class="keyword">is</span> a giod language!</span><br></pre></td></tr></table></figure>

<h4 id="split-方法"><a href="#split-方法" class="headerlink" title="split()方法"></a>split()方法</h4><p>通过指定分隔符对字符串进行切片，如果参数 num 有指定值，则仅分隔 num 个子字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str.split(str=<span class="string">""</span>, num=string.count(str))</span><br><span class="line"></span><br><span class="line">//测试</span><br><span class="line">str7 = <span class="string">'Python is a good language!'</span></span><br><span class="line">print(str7.split(<span class="string">' '</span>))</span><br><span class="line">print(str7.split(<span class="string">' '</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">//输出:</span><br><span class="line">[<span class="string">'Python'</span>, <span class="string">'is'</span>, <span class="string">'a'</span>, <span class="string">'good'</span>, <span class="string">'language!'</span>]</span><br><span class="line">[<span class="string">'Python'</span>, <span class="string">'is'</span>, <span class="string">'a'</span>, <span class="string">'good language!'</span>]</span><br></pre></td></tr></table></figure>

<h4 id="splitlines-方法"><a href="#splitlines-方法" class="headerlink" title="splitlines()方法"></a>splitlines()方法</h4><p>按照行(<code>&#39;\r&#39;, &#39;\r\n&#39;, \n&#39;</code>)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str.splitlines([keepends])</span><br><span class="line"></span><br><span class="line">//测试</span><br><span class="line">str8 = <span class="string">'ab c\n\nde fg\rkl\r\n'</span></span><br><span class="line">print(str8.splitlines())</span><br><span class="line"></span><br><span class="line">str9 = <span class="string">'ab c\n\nde fg\rkl\r\n'</span></span><br><span class="line">print(str9.splitlines(<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">//输出:</span><br><span class="line">[<span class="string">'ab c'</span>, <span class="string">''</span>, <span class="string">'de fg'</span>, <span class="string">'kl'</span>]</span><br><span class="line">[<span class="string">'ab c\n'</span>, <span class="string">'\n'</span>, <span class="string">'de fg\r'</span>, <span class="string">'kl\r\n'</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>对于<code>Python</code>语言, 我也正在努力学习中, 文中如有不足之处, 还望多多指教</li>
<li>测试代码详见 <a href="https://github.com/CoderTitan/PythonDemo" target="_blank" rel="noopener">GitHub地址</a></li>
<li>后期会持续更新相关文章, 未完待续…</li>
</ul>
]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据类型</tag>
        <tag>string</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据类型详解03</title>
    <url>/posts/634f6774/</url>
    <content><![CDATA[<ul>
<li>第一篇<a href="https://www.titanjun.top/2018/04/10/Python数据类型详解01/" target="_blank" rel="noopener">Python数据类型详解01</a>中主要介绍了<code>Python</code>中的一些常用的数据类型的基础知识</li>
<li>第二篇<a href="https://www.titanjun.top/2018/04/17/Python数据类型详解02/" target="_blank" rel="noopener">Python数据类型详解02</a>文章中, 详细介绍了数字(<code>Number</code>)和字符串的一些函数和模块的使用</li>
<li>这篇文章主要介绍一些<code>Python</code>中的一序列(列表/元组/字典)</li>
</ul>
<a id="more"></a>

<h2 id="列表-List"><a href="#列表-List" class="headerlink" title="列表(List)"></a>列表(List)</h2><p>先回顾下上一篇<a href="https://www.titanjun.top/2018/04/10/Python数据类型详解01/" target="_blank" rel="noopener">Python数据类型详解01</a>文章中介绍的列表的基础知识</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># List 列表</span></span><br><span class="line">list1 = [<span class="number">12</span>, <span class="number">34</span>, <span class="number">3.14</span>, <span class="number">5.3</span>, <span class="string">'titan'</span>]</span><br><span class="line">list2 = [<span class="number">10</span>, <span class="string">'jun'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.完整列表</span></span><br><span class="line">print(list1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.列表第一个元素</span></span><br><span class="line">print(list1[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.获取第2-3个元素</span></span><br><span class="line">print(list1[<span class="number">1</span>:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.获取第三个到最后的所有元素</span></span><br><span class="line">print(list1[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.获取最后一个元素</span></span><br><span class="line">print(list1[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.获取倒数第二个元素</span></span><br><span class="line">print(list1[<span class="number">-2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.获取最后三个元素</span></span><br><span class="line">print(list1[<span class="number">-3</span>:<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.合并列表</span></span><br><span class="line">print(list1 + list2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.重复操作两次</span></span><br><span class="line">print(list2 * <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h3 id="添加和删除列表元素"><a href="#添加和删除列表元素" class="headerlink" title="添加和删除列表元素"></a>添加和删除列表元素</h3><p>对列表的数据项进行修改或更新，你也可以使用append()方法来添加列表项</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = []          <span class="comment">## 空列表</span></span><br><span class="line">list1.append(<span class="string">'Google'</span>)   <span class="comment">## 使用 append() 添加元素</span></span><br><span class="line">list1.append(<span class="string">'Baidu'</span>)</span><br><span class="line">print(list1)</span><br><span class="line"></span><br><span class="line">//输出:</span><br><span class="line">[<span class="string">'Google'</span>, <span class="string">'Baidu'</span>]</span><br></pre></td></tr></table></figure>

<p>使用 <code>del</code> 语句来删除列表的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> list1[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">//输出:</span><br><span class="line">[<span class="string">'Google'</span>]</span><br></pre></td></tr></table></figure>

<h3 id="列表脚本操作符"><a href="#列表脚本操作符" class="headerlink" title="列表脚本操作符"></a>列表脚本操作符</h3><p>列表对 + 和 星号 的操作符与字符串相似。+ 号用于组合列表，星号 号用于重复列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 脚本操作符</span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment"># 元素个数</span></span><br><span class="line">print(len(list1))</span><br><span class="line"><span class="comment"># 重复</span></span><br><span class="line">list2 = [<span class="number">2</span>] * <span class="number">3</span></span><br><span class="line">print(list2)</span><br><span class="line"><span class="comment"># 是否包含某元素</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">3</span> <span class="keyword">in</span> list1):</span><br><span class="line">    print(<span class="string">'3在列表内'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'3不在列表内'</span>)</span><br><span class="line"><span class="comment"># 遍历列表</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> list1 :</span><br><span class="line">    print(x)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出结果:</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line"><span class="number">3</span>在列表内</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="列表函数-amp-方法"><a href="#列表函数-amp-方法" class="headerlink" title="列表函数&amp;方法"></a>列表函数&amp;方法</h3><p>下面将会列出在列表中常用的函数和方法</p>
<table>
<thead>
<tr>
<th>函数表达式</th>
<th>输出结果</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>len(list1)</code></td>
<td>3</td>
<td>列表元素个数</td>
</tr>
<tr>
<td><code>max([1, 2, &#39;s&#39;])</code></td>
<td>s</td>
<td>返回列表元素的最大值</td>
</tr>
<tr>
<td><code>min([1, 2, &#39;s&#39;])</code></td>
<td>1</td>
<td>返回列表元素的最小值</td>
</tr>
<tr>
<td><code>list((&#39;q&#39;, 1)</code></td>
<td><code>[&#39;q&#39;, 1]</code></td>
<td>将元组转换为列表</td>
</tr>
<tr>
<td><code>list1.append(2)</code></td>
<td>[1, 2, 3, 2]</td>
<td>在列表末尾添加新的对象</td>
</tr>
<tr>
<td><code>list1.count(2)</code></td>
<td>2</td>
<td>统计某个元素在列表中出现的次数</td>
</tr>
<tr>
<td><code>list1.index(3)</code></td>
<td>2</td>
<td>从列表中找出某个值第一个匹配项的索引位置</td>
</tr>
<tr>
<td><code>list1.insert(1, &#39;jun&#39;)</code></td>
<td>[1, ‘jun’, 2, 3, 2]</td>
<td>将对象插入列表的指定位置</td>
</tr>
<tr>
<td><code>list1.remove(3)</code></td>
<td>[1, ‘jun’, 2, 2]</td>
<td>移除列表中某个值的第一个匹配项</td>
</tr>
<tr>
<td><code>list1.reverse()</code></td>
<td>[2, 2, ‘jun’, 1]</td>
<td>对列表的元素进行反向排列</td>
</tr>
<tr>
<td><code>list1.sort()</code></td>
<td>[2, 2, ‘jun’, 1]</td>
<td>对原列表进行排序, 如果指定参数，则使用比较函数指定的比较函数</td>
</tr>
</tbody></table>
<h4 id="extend-方法"><a href="#extend-方法" class="headerlink" title="extend()方法"></a>extend()方法</h4><p>用于在列表末尾一次性追加另一个序列(元组和列表)中的多个值（用新列表扩展原来的列表）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list3 = [<span class="number">12</span>, <span class="string">'as'</span>, <span class="number">45</span>]</span><br><span class="line">list4 = (<span class="number">23</span>, <span class="string">'ed'</span>)</span><br><span class="line">list3.extend(list4)</span><br><span class="line">print(list3)</span><br><span class="line"></span><br><span class="line">//输出:</span><br><span class="line">[<span class="number">12</span>, <span class="string">'as'</span>, <span class="number">45</span>, <span class="number">23</span>, <span class="string">'ed'</span>]</span><br></pre></td></tr></table></figure>

<h4 id="pop-方法"><a href="#pop-方法" class="headerlink" title="pop()方法"></a>pop()方法</h4><p>用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list.pop(obj=list[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">//使用</span><br><span class="line">list3 = [<span class="number">12</span>, <span class="string">'as'</span>, <span class="number">45</span>, <span class="number">23</span>, <span class="string">'ed'</span>]</span><br><span class="line">print(list3)</span><br><span class="line">print(list3.pop())</span><br><span class="line">print(list3)</span><br><span class="line">print(list3.pop(<span class="number">2</span>))</span><br><span class="line">print(list3)</span><br><span class="line"></span><br><span class="line">//输出:</span><br><span class="line">ed</span><br><span class="line">[<span class="number">12</span>, <span class="string">'as'</span>, <span class="number">45</span>, <span class="number">23</span>]</span><br><span class="line"><span class="number">45</span></span><br><span class="line">[<span class="number">12</span>, <span class="string">'as'</span>, <span class="number">23</span>]</span><br></pre></td></tr></table></figure>

<h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>先回顾一下上篇文章介绍的元组的基础知识</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 元组</span></span><br><span class="line">tuple1 = (<span class="number">12</span>, <span class="number">34</span>, <span class="number">3.14</span>, <span class="number">5.3</span>, <span class="string">'titan'</span>)</span><br><span class="line">tuple2 = (<span class="number">10</span>, <span class="string">'jun'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.完整元组</span></span><br><span class="line">print(tuple1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.元组一个元素</span></span><br><span class="line">print(tuple1[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.获取第2-3个元素</span></span><br><span class="line">print(tuple1[<span class="number">2</span>:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.获取第三个到最后的所有元素</span></span><br><span class="line">print(tuple1[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.获取最后一个元素</span></span><br><span class="line">print(tuple1[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.获取倒数第二个元素</span></span><br><span class="line">print(tuple1[<span class="number">-2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.获取最后三个元素</span></span><br><span class="line">print(tuple1[<span class="number">-3</span>:<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.合并元组</span></span><br><span class="line">print(tuple1 + tuple2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.重复操作两次</span></span><br><span class="line">print(tuple2 * <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h3 id="元组运算符"><a href="#元组运算符" class="headerlink" title="元组运算符"></a>元组运算符</h3><p>与列表的运算符和操作类似, 如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算元素个数</span></span><br><span class="line">print(len((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)))</span><br><span class="line"><span class="comment"># 合并元组</span></span><br><span class="line">tuple1 = (<span class="number">1</span>, <span class="number">2</span>) + (<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">print(tuple1)</span><br><span class="line"><span class="comment"># 重复</span></span><br><span class="line">tuple2 = (<span class="string">'jun'</span>,) * <span class="number">3</span></span><br><span class="line">print(tuple2)</span><br><span class="line"><span class="comment"># 检测是否包含某元素</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span> <span class="keyword">in</span> tuple1):</span><br><span class="line">    print(<span class="string">'2在该元组内'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'不在元组内'</span>)</span><br><span class="line"><span class="comment"># 遍历元组</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> tuple1:</span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line">//输出:</span><br><span class="line"><span class="number">3</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">(<span class="string">'jun'</span>, <span class="string">'jun'</span>, <span class="string">'jun'</span>)</span><br><span class="line"><span class="number">2</span>在该元组内</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>

<h3 id="元组内置函数"><a href="#元组内置函数" class="headerlink" title="元组内置函数"></a>元组内置函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>) </span><br><span class="line"><span class="comment"># 元组中元素最大值</span></span><br><span class="line">print(max(tuple1))</span><br><span class="line"><span class="comment"># 元组中元素最小值</span></span><br><span class="line">print(min(tuple1))</span><br><span class="line"><span class="comment"># 列表转换为元组</span></span><br><span class="line">print(tuple([<span class="string">'a'</span>, <span class="string">'d'</span>, <span class="string">'f'</span>]))</span><br><span class="line"></span><br><span class="line">//输出:</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'d'</span>, <span class="string">'f'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>先看看上文中介绍到的字典的相关基础知识, 需要注意的是: 键必须不可变，所以可以用数字，字符串或元组充当，所以用列表就不行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字典</span></span><br><span class="line">dict1 = &#123;<span class="string">'name'</span>: <span class="string">'jun'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'score'</span>: <span class="number">90.98</span>&#125;</span><br><span class="line">dict2 = &#123;<span class="string">'name'</span>: <span class="string">'titan'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 完整字典</span></span><br><span class="line">print(dict2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.修改或添加字典元素</span></span><br><span class="line">dict2[<span class="string">'name'</span>] = <span class="string">'brother'</span></span><br><span class="line">dict2[<span class="string">'age'</span>] = <span class="number">20</span></span><br><span class="line">dict2[<span class="number">3</span>] = <span class="string">'完美'</span></span><br><span class="line">dict2[<span class="number">0.9</span>] = <span class="number">0.9</span></span><br><span class="line">print(dict2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.根据键值获取value</span></span><br><span class="line">print(dict1[<span class="string">'score'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.获取所有的键值</span></span><br><span class="line">print(dict1.keys())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.获取所有的value值</span></span><br><span class="line">print(dict1.values())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.删除字典元素</span></span><br><span class="line"><span class="keyword">del</span> dict1[<span class="string">'name'</span>]</span><br><span class="line">print(dict1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.清空字典所有条目</span></span><br><span class="line">dict1.clear()</span><br><span class="line">print(dict1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.删除字典</span></span><br><span class="line">dict3 = &#123;<span class="number">2</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">del</span> dict3</span><br><span class="line"><span class="comment"># 当该数组呗删除之后, 在调用会报错</span></span><br><span class="line"><span class="comment"># print(dict3)</span></span><br></pre></td></tr></table></figure>

<h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic1 = &#123;<span class="string">'name'</span>: <span class="string">'titan'</span>, <span class="string">'age'</span>:<span class="number">20</span>&#125;</span><br><span class="line"><span class="comment"># 计算字典元素个数，即键的总数</span></span><br><span class="line">print(len(dic1))</span><br><span class="line"><span class="comment"># 字典(Dictionary) str() 函数将值转化为适于人阅读的形式，以可打印的字符串表示</span></span><br><span class="line">print(str(dic1))</span><br><span class="line"><span class="comment"># 返回输入的变量类型，如果变量是字典就返回字典类型</span></span><br><span class="line">print(type(dic1))</span><br><span class="line"></span><br><span class="line">//输出:</span><br><span class="line"><span class="number">2</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'titan'</span>, <span class="string">'age'</span>: <span class="number">20</span>&#125;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="内置方法"><a href="#内置方法" class="headerlink" title="内置方法"></a>内置方法</h3><h4 id="copy-方法"><a href="#copy-方法" class="headerlink" title="copy()方法"></a>copy()方法</h4><ul>
<li><code>copy()</code>函数返回一个字典的浅复制</li>
<li>直接赋值和 <code>copy</code> 的区别</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 =  &#123;<span class="string">'user'</span>:<span class="string">'runoob'</span>,<span class="string">'num'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;</span><br><span class="line"> </span><br><span class="line">dict2 = dict1          <span class="comment"># 浅拷贝: 引用对象</span></span><br><span class="line">dict3 = dict1.copy()   <span class="comment"># 浅拷贝：深拷贝父对象（一级目录），子对象（二级目录）不拷贝，还是引用</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改 data 数据</span></span><br><span class="line">dict1[<span class="string">'user'</span>]=<span class="string">'root'</span></span><br><span class="line">dict1[<span class="string">'num'</span>].remove(<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">print(dict1)</span><br><span class="line">print(dict2)</span><br><span class="line">print(dict3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'num'</span>: [<span class="number">2</span>, <span class="number">3</span>], <span class="string">'user'</span>: <span class="string">'root'</span>&#125;</span><br><span class="line">&#123;<span class="string">'num'</span>: [<span class="number">2</span>, <span class="number">3</span>], <span class="string">'user'</span>: <span class="string">'root'</span>&#125;</span><br><span class="line">&#123;<span class="string">'num'</span>: [<span class="number">2</span>, <span class="number">3</span>], <span class="string">'user'</span>: <span class="string">'runoob'</span>&#125;</span><br></pre></td></tr></table></figure>

<p>实例中 <code>dict2</code> 其实是 <code>dict1</code> 的引用（别名），所以输出结果都是一致的，<code>dict3</code> 父对象进行了深拷贝，不会随<code>dict1</code> 修改而修改，子对象是浅拷贝所以随 <code>dict1</code> 的修改而修改</p>
<h4 id="fromkeys-方法"><a href="#fromkeys-方法" class="headerlink" title="fromkeys()方法"></a>fromkeys()方法</h4><ul>
<li><code>fromkeys()</code> 函数用于创建一个新字典，</li>
<li>参数一: 以序列<code>seq</code>中元素做字典的键</li>
<li>参数二: <code>value</code>为字典所有键对应的初始值(可选参数)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict.fromkeys(seq[, value])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">dic2 = dict.fromkeys([<span class="string">'name'</span>, <span class="string">'titan'</span>])</span><br><span class="line">print(dic2)</span><br><span class="line">dic3 = dict.fromkeys([<span class="string">'name'</span>, <span class="string">'titan'</span>], <span class="number">20</span>)</span><br><span class="line">print(dic3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="literal">None</span>, <span class="string">'titan'</span>: <span class="literal">None</span>&#125;</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="number">20</span>, <span class="string">'titan'</span>: <span class="number">20</span>&#125;</span><br></pre></td></tr></table></figure>

<h4 id="get-和-setdefault-方法"><a href="#get-和-setdefault-方法" class="headerlink" title="get() 和 setdefault()方法"></a>get() 和 setdefault()方法</h4><ul>
<li><code>get()</code> 函数返回指定键的值，如果值不在字典中返回默认值</li>
<li><code>setdefault()</code>和<code>get()</code> 方法类似, 如果键不存在于字典中，将会添加键并将值设为默认值(同事也会把键值对添加到字典中)</li>
<li>参数一: 字典中要查找的键。</li>
<li>参数二: 如果指定键的值不存在时，返回该默认值值(可选参数)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict.get(key, default=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">dic5 = &#123;<span class="string">'name'</span>: <span class="string">'titan'</span>, <span class="string">'age'</span>:<span class="number">20</span>&#125;</span><br><span class="line">print(dic5.get(<span class="string">'name'</span>))</span><br><span class="line">print(dic5.get(<span class="string">'Sex'</span>, <span class="string">'man'</span>))</span><br><span class="line">print(dic5.setdefault(<span class="string">'name'</span>))</span><br><span class="line">print(dic5.setdefault(<span class="string">'Sex'</span>, <span class="string">'man'</span>))</span><br><span class="line">print(dic5)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果:</span></span><br><span class="line">titan</span><br><span class="line">man</span><br><span class="line">titan</span><br><span class="line">man</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'titan'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'Sex'</span>: <span class="string">'man'</span>&#125;</span><br></pre></td></tr></table></figure>

<h4 id="update-方法"><a href="#update-方法" class="headerlink" title="update()方法"></a>update()方法</h4><p>把字典的键/值对更新到另一个字典里(合并字典)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict.update(dict2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">dic6 = &#123;<span class="string">'sex'</span>: <span class="string">'new'</span>&#125;</span><br><span class="line">dic5.update(dic6)</span><br><span class="line">print(dic5)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'titan'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'Sex'</span>: <span class="string">'man'</span>, <span class="string">'sex'</span>: <span class="string">'new'</span>&#125;</span><br></pre></td></tr></table></figure>

<h4 id="pop-和-popitem-方法"><a href="#pop-和-popitem-方法" class="headerlink" title="pop() 和 popitem() 方法"></a>pop() 和 popitem() 方法</h4><ul>
<li><code>pop()</code>: 删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值</li>
<li><code>popitem()</code>: 随机返回并删除字典中的一对键和值。<br>如果字典已经为空，却调用了此方法，就报出KeyError异常</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pop(key[,default])</span><br><span class="line">popitem()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">print(dic5.pop(<span class="string">'Sex'</span>))</span><br><span class="line">print(dic5)</span><br><span class="line">print(dic5.popitem())</span><br><span class="line">print(dic5)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line">man</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'titan'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'sex'</span>: <span class="string">'new'</span>&#125;</span><br><span class="line">(<span class="string">'sex'</span>, <span class="string">'new'</span>)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'titan'</span>, <span class="string">'age'</span>: <span class="number">20</span>&#125;</span><br></pre></td></tr></table></figure>

<h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic2 = &#123;<span class="string">'name'</span>: <span class="string">'titan'</span>, <span class="string">'age'</span>:<span class="number">20</span>&#125;</span><br><span class="line"><span class="comment"># 判断键是否存在于字典中, 在True, 不在False</span></span><br><span class="line">print(dic2.__contains__(<span class="string">'name'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以列表返回可遍历的(键, 值) 元组数组</span></span><br><span class="line">print(dic2.items())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除字典内所有元素</span></span><br><span class="line">dic2.clear()</span><br><span class="line">print(dic2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果:</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line">dict_items([(<span class="string">'name'</span>, <span class="string">'titan'</span>), (<span class="string">'age'</span>, <span class="number">20</span>)])</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h2><ul>
<li><code>Python</code> 提供了一个 <code>time</code> 和 <code>calendar</code> </li>
<li>模块可以用于格式化日期和时间。</li>
<li>时间间隔是以秒为单位的浮点小数。</li>
<li>每个时间戳都以自从1970年1月1日午夜（历元）经过了多长时间来表示</li>
<li>在介绍时间之前, 先介绍一下什么时间元组</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
<th>取值</th>
</tr>
</thead>
<tbody><tr>
<td>tm_year</td>
<td>4位数年</td>
<td>2018</td>
</tr>
<tr>
<td>tm_mon</td>
<td>月</td>
<td>1 到 12</td>
</tr>
<tr>
<td>tm_mday</td>
<td>日</td>
<td>1到31</td>
</tr>
<tr>
<td>tm_hour</td>
<td>小时</td>
<td>0 到 23</td>
</tr>
<tr>
<td>tm_min</td>
<td>分钟</td>
<td>0 到 59</td>
</tr>
<tr>
<td>tm_sec</td>
<td>秒</td>
<td>0 到 61 (60或61 是闰秒)</td>
</tr>
<tr>
<td>tm_wday</td>
<td>礼拜几</td>
<td>0到6 (0是周一)</td>
</tr>
<tr>
<td>tm_yday</td>
<td>一年的第几日</td>
<td>1 到 366(儒略历)</td>
</tr>
<tr>
<td>tm_isdst</td>
<td>夏令时</td>
<td>-1, 0, 1, -1是决定是否为夏令时的旗帜</td>
</tr>
</tbody></table>
<p>获取时间的简单示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 日期和时间</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前时间戳</span></span><br><span class="line">ticks = time.time()</span><br><span class="line">print(ticks)</span><br><span class="line"><span class="comment"># 本地时间</span></span><br><span class="line">localTime = time.localtime()</span><br><span class="line">print(localTime)</span><br><span class="line"><span class="comment"># 格式化时间</span></span><br><span class="line">print(time.asctime(localTime))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果:</span></span><br><span class="line"><span class="number">1524051644.320941</span></span><br><span class="line">time.struct_time(tm_year=<span class="number">2018</span>, tm_mon=<span class="number">4</span>, tm_mday=<span class="number">18</span>, tm_hour=<span class="number">19</span>, tm_min=<span class="number">40</span>, tm_sec=<span class="number">44</span>, tm_wday=<span class="number">2</span>, tm_yday=<span class="number">108</span>, tm_isdst=<span class="number">0</span>)</span><br><span class="line">Wed Apr <span class="number">18</span> <span class="number">19</span>:<span class="number">40</span>:<span class="number">44</span> <span class="number">2018</span></span><br></pre></td></tr></table></figure>

<h3 id="格式化日期"><a href="#格式化日期" class="headerlink" title="格式化日期"></a>格式化日期</h3><p>先看几个简单示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.格式化日期</span></span><br><span class="line"><span class="comment"># 格式化成 2018-04-18 19:49:44 形式</span></span><br><span class="line">newDate1 = time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>, time.localtime())</span><br><span class="line">print(newDate1)</span><br><span class="line"><span class="comment"># 格式化成 Wed Apr 18 19:50:53 2018 形式</span></span><br><span class="line">newDate2 = time.strftime(<span class="string">'%a %b %d %H:%M:%S %Y'</span>, time.localtime())</span><br><span class="line">print(newDate2)</span><br><span class="line"><span class="comment"># 将时间字符串转化为时间戳</span></span><br><span class="line">timeNum = time.mktime(time.strptime(newDate2, <span class="string">"%a %b %d %H:%M:%S %Y"</span>))</span><br><span class="line">print(timeNum)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果:</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-18</span> <span class="number">19</span>:<span class="number">52</span>:<span class="number">21</span></span><br><span class="line">Wed Apr <span class="number">18</span> <span class="number">19</span>:<span class="number">52</span>:<span class="number">21</span> <span class="number">2018</span></span><br><span class="line"><span class="number">1524052341.0</span></span><br></pre></td></tr></table></figure>

<ul>
<li>这里介绍下上面用到的相关<code>Python</code>中时间和日期相关的格式化符号<ul>
<li><code>%y</code>: 两位数的年份表示（00-99）</li>
<li><code>%Y</code>: 四位数的年份表示（000-9999）</li>
<li><code>%m</code>: 月份（01-12）</li>
<li><code>%d</code>: 月内中的一天（0-31）</li>
<li><code>%H</code>: 24小时制小时数（0-23）</li>
<li><code>%I</code>: 12小时制小时数（01-12）</li>
<li><code>%M</code>: 分钟数（00=59）</li>
<li><code>%S</code>: 秒（00-59）</li>
<li><code>%a</code>: 本地简化星期名称</li>
<li><code>%A</code>: 本地完整星期名称</li>
<li><code>%b</code>: 本地简化的月份名称</li>
<li><code>%B</code>: 本地完整的月份名称</li>
<li><code>%c</code>: 本地相应的日期表示和时间表示</li>
<li><code>%j</code>: 年内的一天（001-366）</li>
<li><code>%p</code>: 本地A.M.或P.M.的等价符</li>
<li><code>%U</code>: 一年中的星期数（00-53）星期天为星期的开始</li>
<li><code>%w</code>: 星期（0-6），星期天为星期的开始</li>
<li><code>%W</code>: 一年中的星期数（00-53）星期一为星期的开始</li>
<li><code>%x</code>: 本地相应的日期表示</li>
<li><code>%X</code>: 本地相应的时间表示</li>
<li><code>%Z</code>: 当前时区的名称</li>
<li><code>%%</code>: %号本身</li>
</ul>
</li>
</ul>
<h3 id="Time-模块"><a href="#Time-模块" class="headerlink" title="Time 模块"></a>Time 模块</h3><p><code>Time</code> 模块包含了以下内置函数，既有时间处理相的，也有转换时间格式的</p>
<h4 id="Time模块的属性"><a href="#Time模块的属性" class="headerlink" title="Time模块的属性"></a>Time模块的属性</h4><ul>
<li><code>timezone</code>: 当地时区（未启动夏令时）距离格林威治的偏移秒数（&gt;0，美洲;&lt;=0大部分欧洲，亚洲，非洲）</li>
<li><code>tzname</code>: 包含一对根据情况的不同而不同的字符串，分别是带夏令时的本地时区名称，和不带的</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(time.timezone)</span><br><span class="line">print(time.tzname)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">-28800</span></span><br><span class="line">(<span class="string">'CST'</span>, <span class="string">'CST'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="altzone-方法"><a href="#altzone-方法" class="headerlink" title="altzone()方法"></a>altzone()方法</h4><p>返回格林威治西部的夏令时地区的偏移秒数。如果该地区在格林威治东部会返回负值（如西欧，包括英国）。对夏令时启用地区才能使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(time.altzone)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果:</span></span><br><span class="line"><span class="number">-28800</span></span><br></pre></td></tr></table></figure>

<h4 id="asctime-方法"><a href="#asctime-方法" class="headerlink" title="asctime()方法"></a>asctime()方法</h4><p>接受时间元组并返回一个可读的形式为<code>&quot;Tue Dec 11 18:07:14 2008&quot;</code>（2008年12月11日 周二18时07分14秒）的24个字符的字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">localTime = time.localtime()</span><br><span class="line">print(localTime)</span><br><span class="line"><span class="comment"># 格式化时间</span></span><br><span class="line">print(time.asctime(localTime))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果:</span></span><br><span class="line">time.struct_time(tm_year=<span class="number">2018</span>, tm_mon=<span class="number">4</span>, tm_mday=<span class="number">18</span>, tm_hour=<span class="number">19</span>, tm_min=<span class="number">40</span>, tm_sec=<span class="number">44</span>, tm_wday=<span class="number">2</span>, tm_yday=<span class="number">108</span>, tm_isdst=<span class="number">0</span>)</span><br><span class="line">Wed Apr <span class="number">18</span> <span class="number">19</span>:<span class="number">40</span>:<span class="number">44</span> <span class="number">2018</span></span><br></pre></td></tr></table></figure>

<h4 id="ctime-和-gmtime-和-localtime-方法"><a href="#ctime-和-gmtime-和-localtime-方法" class="headerlink" title="ctime() 和 gmtime() 和 localtime()方法"></a>ctime() 和 gmtime() 和 localtime()方法</h4><ul>
<li><code>ctime</code>: 把一个时间戳（按秒计算的浮点数）转化为<code>time.asctime()</code>的形式。</li>
<li><code>gmtime</code>: 将一个时间戳转换为UTC时区（0时区）的<code>struct_time</code>（<code>struct_time是在time</code>模块中定义的表示时间的对象）</li>
<li><code>localtime</code>: 类似<code>gmtime</code>，作用是格式化时间戳为本地的时间</li>
<li>如果参数未给或者为None的时候，将会默认<code>time.time()</code>为参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">time.ctime([ sec ])</span><br><span class="line">time.gmtime([ sec ])</span><br><span class="line">time.localtime([ sec ])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">print(time.ctime())</span><br><span class="line">print(time.ctime(time.time() - <span class="number">100</span>))</span><br><span class="line">print(time.gmtime())</span><br><span class="line">print(time.gmtime(time.time() - <span class="number">100</span>))</span><br><span class="line">print(time.localtime())</span><br><span class="line">print(time.localtime(time.time() - <span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果:</span></span><br><span class="line">Wed Apr <span class="number">18</span> <span class="number">20</span>:<span class="number">18</span>:<span class="number">19</span> <span class="number">2018</span></span><br><span class="line">Wed Apr <span class="number">18</span> <span class="number">20</span>:<span class="number">16</span>:<span class="number">39</span> <span class="number">2018</span></span><br><span class="line">time.struct_time(tm_year=<span class="number">2018</span>, tm_mon=<span class="number">4</span>, tm_mday=<span class="number">18</span>, tm_hour=<span class="number">12</span>, tm_min=<span class="number">25</span>, tm_sec=<span class="number">44</span>, tm_wday=<span class="number">2</span>, tm_yday=<span class="number">108</span>, tm_isdst=<span class="number">0</span>)</span><br><span class="line">time.struct_time(tm_year=<span class="number">2018</span>, tm_mon=<span class="number">4</span>, tm_mday=<span class="number">18</span>, tm_hour=<span class="number">12</span>, tm_min=<span class="number">24</span>, tm_sec=<span class="number">4</span>, tm_wday=<span class="number">2</span>, tm_yday=<span class="number">108</span>, tm_isdst=<span class="number">0</span>)</span><br><span class="line">time.struct_time(tm_year=<span class="number">2018</span>, tm_mon=<span class="number">4</span>, tm_mday=<span class="number">19</span>, tm_hour=<span class="number">9</span>, tm_min=<span class="number">45</span>, tm_sec=<span class="number">19</span>, tm_wday=<span class="number">3</span>, tm_yday=<span class="number">109</span>, tm_isdst=<span class="number">0</span>)</span><br><span class="line">time.struct_time(tm_year=<span class="number">2018</span>, tm_mon=<span class="number">4</span>, tm_mday=<span class="number">19</span>, tm_hour=<span class="number">9</span>, tm_min=<span class="number">43</span>, tm_sec=<span class="number">39</span>, tm_wday=<span class="number">3</span>, tm_yday=<span class="number">109</span>, tm_isdst=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h4 id="gmtime-方法"><a href="#gmtime-方法" class="headerlink" title="gmtime()方法"></a>gmtime()方法</h4><ul>
<li>接收<code>struct_time</code>对象作为参数，返回用秒数来表示时间的浮点数</li>
<li>如果输入的值不是一个合法的时间，将触发 <code>OverflowError</code> 或 <code>ValueError</code></li>
<li>参数: 结构化的时间或者完整的9位元组元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">time.mktime(t)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">t = (<span class="number">2018</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">2</span>, <span class="number">34</span>, <span class="number">0</span>)</span><br><span class="line">print(time.mktime(t))</span><br><span class="line">print(time.mktime(time.localtime()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果:</span></span><br><span class="line"><span class="number">1524103820.0</span></span><br><span class="line"><span class="number">1524104835.0</span></span><br></pre></td></tr></table></figure>

<h4 id="sleep-方法"><a href="#sleep-方法" class="headerlink" title="sleep()方法"></a>sleep()方法</h4><p>推迟调用线程，可通过参数<code>secs</code>指秒数，表示进程推迟的时间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">time.sleep(t)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">print(time.ctime())</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">print(time.ctime())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果:</span></span><br><span class="line">Thu Apr <span class="number">19</span> <span class="number">10</span>:<span class="number">29</span>:<span class="number">51</span> <span class="number">2018</span></span><br><span class="line">Thu Apr <span class="number">19</span> <span class="number">10</span>:<span class="number">29</span>:<span class="number">54</span> <span class="number">2018</span></span><br></pre></td></tr></table></figure>

<h4 id="strftime-方法"><a href="#strftime-方法" class="headerlink" title="strftime()方法"></a>strftime()方法</h4><ul>
<li>接收以时间元组，并返回以可读字符串表示的当地时间，格式由参数<code>format</code>决定, 上面已经简单介绍过了</li>
<li>参数<code>format</code> – 格式字符串</li>
<li>参数<code>t</code> – 可选的参数t是一个<code>struct_time</code>对象</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">time.strftime(format[, t])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">newDate1 = time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>, time.localtime())</span><br><span class="line">print(newDate1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果:</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-19</span> <span class="number">10</span>:<span class="number">35</span>:<span class="number">22</span></span><br></pre></td></tr></table></figure>

<h4 id="strptime-方法"><a href="#strptime-方法" class="headerlink" title="strptime()方法"></a>strptime()方法</h4><ul>
<li>函数根据指定的格式把一个时间字符串解析为时间元组</li>
<li>参数一: 时间字符串</li>
<li>参数二: 格式化字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">time.strptime(string[, format])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">structTime= time.strptime(<span class="string">'20 Nov 2018'</span>, <span class="string">'%d %b %Y'</span>)</span><br><span class="line">print(structTime)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果:</span></span><br><span class="line">time.struct_time(tm_year=<span class="number">2018</span>, tm_mon=<span class="number">11</span>, tm_mday=<span class="number">20</span>, tm_hour=<span class="number">0</span>, tm_min=<span class="number">0</span>, tm_sec=<span class="number">0</span>, tm_wday=<span class="number">1</span>, tm_yday=<span class="number">324</span>, tm_isdst=<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>

<h4 id="tzset-方法"><a href="#tzset-方法" class="headerlink" title="tzset()方法"></a>tzset()方法</h4><p>根据环境变量TZ重新初始化时间相关设置, 标准TZ环境变量格式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">std offset [dst [offset [,start[/time], end[/time]]]]</span><br></pre></td></tr></table></figure>

<ul>
<li><code>std</code> 和 <code>dst</code>: 三个或者多个时间的缩写字母。传递给 <code>time.tzname</code>.</li>
<li><code>offset</code>: 距<code>UTC</code>的偏移，格式： <code>[+|-]hh[:mm[:ss]] {h=0-23, m/s=0-59}</code>。</li>
<li><code>start[/time]</code>, <code>end[/time]</code>: <code>DST</code> 开始生效时的日期。格式为 <code>m.w.d</code> — 代表日期的月份、周数和日期。<code>w=1</code> 指月份中的第一周，而 <code>w=5</code> 指月份的最后一周。<code>start</code> 和 <code>end</code> 可以是以下格式之一：<ul>
<li><code>Jn</code>: 儒略日 <code>n (1 &lt;= n &lt;= 365)</code>。闰年日（2月29）不计算在内。</li>
<li><code>n</code>: 儒略日 <code>(0 &lt;= n &lt;= 365)</code>。 闰年日（2月29）计算在内</li>
<li><code>Mm.n.d</code>: 日期的月份、周数和日期。<code>w=1</code> 指月份中的第一周，而 <code>w=5</code> 指月份的最后一周。</li>
<li><code>time</code>:（可选）<code>DST</code> 开始生效时的时间（24 小时制）。默认值为 02:00（指定时区的本地时间）</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 没有返回值</span></span><br><span class="line">time.tzset()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">'TZ'</span>] = <span class="string">'EST+05EDT,M4.1.0,M10.5.0'</span></span><br><span class="line">time.tzset()</span><br><span class="line"><span class="keyword">print</span> time.strftime(<span class="string">'%X %x %Z'</span>)</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">'TZ'</span>] = <span class="string">'AEST-10AEDT-11,M10.5.0,M3.5.0'</span></span><br><span class="line">time.tzset()</span><br><span class="line"><span class="keyword">print</span> time.strftime(<span class="string">'%X %x %Z'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果为：</span></span><br><span class="line"><span class="number">13</span>:<span class="number">00</span>:<span class="number">40</span> <span class="number">02</span>/<span class="number">17</span>/<span class="number">09</span> EST</span><br><span class="line"><span class="number">05</span>:<span class="number">00</span>:<span class="number">40</span> <span class="number">02</span>/<span class="number">18</span>/<span class="number">09</span> AEDT</span><br></pre></td></tr></table></figure>

<h3 id="日历（Calendar）模块"><a href="#日历（Calendar）模块" class="headerlink" title="日历（Calendar）模块"></a>日历（Calendar）模块</h3><ul>
<li>此模块的函数都是日历相关的，例如打印某月的字符月历。</li>
<li>星期一是默认的每周第一天，星期天是默认的最后一天。</li>
<li>介绍一下<code>Calendar</code>模块的相关函数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回当前每周起始日期的设置, 默认情况下，首次载入caendar模块时返回0，即星期一</span></span><br><span class="line">print(calendar.firstweekday())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是闰年返回True，否则为false</span></span><br><span class="line"><span class="comment"># calendar.isleap(year)</span></span><br><span class="line">print(calendar.isleap(<span class="number">2016</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回在Y1，Y2两年之间的闰年总数</span></span><br><span class="line"><span class="comment"># calendar.leapdays(y1,y2)</span></span><br><span class="line">print(calendar.leapdays(<span class="number">2015</span>, <span class="number">2021</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回一个元组, 第一个元素是该月的第一天是星期几(0-6, 0是星期日), 第二个元素是该月有几天</span></span><br><span class="line"><span class="comment"># calendar.monthcalendar(year,month)</span></span><br><span class="line">print(calendar.monthrange(<span class="number">2018</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回给定日期是星期几(0-6, 0是星期一)</span></span><br><span class="line"><span class="comment"># calendar.weekday(year,month,day)</span></span><br><span class="line">print(calendar.weekday(<span class="number">2018</span>, <span class="number">4</span>, <span class="number">19</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置每周的起始日期</span></span><br><span class="line"><span class="comment"># calendar.setfirstweekday(weekday) 无返回值</span></span><br><span class="line">calendar.setfirstweekday(<span class="number">3</span>)</span><br><span class="line">print(calendar.firstweekday())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果:</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">(<span class="number">6</span>, <span class="number">30</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<h4 id="calendar-和-prcal方法"><a href="#calendar-和-prcal方法" class="headerlink" title="calendar 和 prcal方法"></a><code>calendar</code> 和 <code>prcal</code>方法</h4><p>返回一个多行字符串格式的year年年历，3个月一行，间隔距离为<code>c</code>。 每日宽度间隔为<code>w</code>字符。每行长度为<code>21* W+18+2* C</code>。<code>l</code>是每星期行数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">calendar.calendar(year,w=<span class="number">2</span>,l=<span class="number">1</span>,c=<span class="number">6</span>)</span><br><span class="line">calendar.prcal(year,w=<span class="number">2</span>,l=<span class="number">1</span>,c=<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">//使用</span><br><span class="line">year18 = calendar.calendar(<span class="number">2018</span>)</span><br><span class="line">print(year18)</span><br><span class="line"></span><br><span class="line">print(calendar.prcal(<span class="number">2018</span>))</span><br></pre></td></tr></table></figure>

<h4 id="month-和-prmonth方法"><a href="#month-和-prmonth方法" class="headerlink" title="month 和 prmonth方法"></a><code>month</code> 和 <code>prmonth</code>方法</h4><p>返回一个多行字符串格式的<code>year</code>年<code>month</code>月日历，两行标题，一周一行。每日宽度间隔为<code>w</code>字符。每行的长度为<code>7* w+6</code>。<code>l</code>是每星期的行数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">calendar.month(year,month,w=<span class="number">2</span>,l=<span class="number">1</span>)</span><br><span class="line">calendar.prmonth(year,month,w=<span class="number">2</span>,l=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">//使用</span><br><span class="line">monthTime = calendar.month(<span class="number">2018</span>, <span class="number">4</span>)</span><br><span class="line">print(monthTime)</span><br><span class="line"></span><br><span class="line">print(calendar.prmonth(<span class="number">2018</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure>

<h4 id="timegm方法"><a href="#timegm方法" class="headerlink" title="timegm方法"></a><code>timegm</code>方法</h4><p>和<code>time.gmtime</code>相反：接受一个时间元组形式，返回该时刻的时间戳（1970纪元后经过的浮点秒数）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">calendar.timegm(tupletime)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">print(calendar.timegm(time.localtime()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">1524150128</span></span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>到这里, <code>Python</code>相关的数据类型(数字, 字符串, 元组, 列表和字典)基本都介绍完毕了</li>
<li><code>Python</code>中的常用的时间格式和时间相关的模块(<code>time</code>和<code>calendar</code>)也都介绍完了</li>
<li>文章中有些地方可能也不是很全面, 会继续努力</li>
<li>另外, 在<code>Python</code>中，其他处理日期和时间的模块还有：<a href="https://docs.python.org/3/library/datetime.html#module-datetime" target="_blank" rel="noopener">datetime模块</a> 和 <a href="http://labix.org/python-dateutil" target="_blank" rel="noopener">dateutil模块</a></li>
<li>这两个模块这里也不再详细介绍了, <code>Python</code>相关文章后期会持续更新……</li>
</ul>
]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据类型</tag>
        <tag>List</tag>
        <tag>Tuple</tag>
        <tag>Calendar</tag>
      </tags>
  </entry>
  <entry>
    <title>Sign In with Apple</title>
    <url>/posts/de12f33/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/donxan/pics@master/upic/YbIFdW_202005142352.png" alt="YbIFdW_202005142352"></p>
<a id="more"></a>





<ul>
<li>原文博客地址: <a href="https://www.titanjun.top/" target="_blank" rel="noopener">Sign In With Apple</a></li>
<li>在之前的文章<a href="https://www.titanjun.top/iOS13%E9%80%82%E9%85%8D%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F(Dark%20Mode).html" target="_blank" rel="noopener">iOS13适配深色模式(Dark Mode)</a>中只是简单提到了关于<a href="https://www.titanjun.top/" target="_blank" rel="noopener">Sign In With Apple</a>的问题, 下面就着重介绍一下什么是<code>Apple</code>登录</li>
<li>对于很多应用都会有自己的账号登录体系, 但是一般都相对繁琐, 或者用户会忘记密码等, 为此一般都会接入微信、<code>QQ</code>登录, 国外应用也会有<code>Google</code>、<code>Facebook</code>等第三方登录方式</li>
<li>在<code>WWDC 2019</code>上, 苹果要求使用第三方登录的应用也必须接入苹果账号登录(2020年必须适配)</li>
<li>当然了如果你的<code>App</code>没有提供第三方登录，那就不用集成; 如果用到了第三方登录，那么需要提供<code>Sign in with Apple</code></li>
</ul>
<h2 id="Sign-in-with-Apple"><a href="#Sign-in-with-Apple" class="headerlink" title="Sign in with Apple"></a>Sign in with Apple</h2><blockquote>
<p>Sign in with Apple makes it easy for users to sign in to your apps and websites using their Apple ID. Instead of filling out forms, verifying email addresses, and choosing new passwords, they can use Sign in with Apple to set up an account and start using your app right away. All accounts are protected with two-factor authentication for superior security, and Apple will not track users’ activity in your app or website.</p>
</blockquote>
<blockquote>
<p>Make signing in easy</p>
</blockquote>
<ul>
<li><code>Sign In with Apple</code>为用户提供一种快速安全的登录方式, 用户可以轻松登录开发者的应用和网站</li>
<li>使用<code>Apple</code>登录可以让用户在系统中设置用户帐户，开发者可以获取到用户名称(<code>Name</code>), 用户唯一标识符(<code>ID</code>)以及经过验证的电子邮件地址(<code>email</code>)</li>
<li><code>Sign In with Apple</code>相关特性<ul>
<li>尊重用户隐私: 开发人员仅仅只能获取到用户的姓名和邮箱, 苹果也不会收集用户和应用交互的任何信息</li>
<li>系统内置的安全性：<code>2F</code>双重验证(<code>Face ID</code>或<code>Touch ID</code>)，从此登录不再需要密码</li>
<li>简化账号的创建和登录流程，无缝跨设备使用</li>
<li>开发者可以获取到已验证过的邮箱作为登录账号或者与用户进行通信（注：用户可以选择隐藏真实邮箱，并使用苹果提供的虚拟邮箱进行授权）</li>
<li>可跨平台使用, Apple登录支持<code>iOS</code>，<code>macOS</code>，<code>tvOS</code>和<code>watchOS</code>以及<code>JavaScript</code></li>
<li>更多信息可惨考<a href="https://developer.apple.com/sign-in-with-apple/" target="_blank" rel="noopener"><br>使用Apple登录</a></li>
</ul>
</li>
</ul>
<div class="note info"><p>在代码集成之前还需要做一些准备工作</p></div>


<ol>
<li>在开发者网站，在需要添加<code>Sign in with Apple</code>功能</li>
</ol>
<p><img src="https://titanjun.oss-cn-hangzhou.aliyuncs.com/ios/sign_apple.png" alt="image"></p>
<ol start="2">
<li>在<code>Xcode</code>里面开启<code>Sign in with Apple</code>功能</li>
</ol>
<p><img src="https://titanjun.oss-cn-hangzhou.aliyuncs.com/ios/applesign.png" alt="Xcode"></p>
<h2 id="登录按钮"><a href="#登录按钮" class="headerlink" title="登录按钮"></a>登录按钮</h2><p><code>Apple</code>苹果登录按钮, 需要使用<code>ASAuthorizationAppleIDButton</code>类创建添加, 该类是<code>iOS 13</code>苹果提供的创建<code>Apple</code>登录按钮的专属类</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@available</span>(iOS <span class="number">13.0</span>, *)</span><br><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">ASAuthorizationAppleIDButton</span> : <span class="title">UIControl</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(type: <span class="type">ASAuthorizationAppleIDButton</span>.<span class="type">ButtonType</span>, style: <span class="type">ASAuthorizationAppleIDButton</span>.<span class="type">Style</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(authorizationButtonType type: <span class="type">ASAuthorizationAppleIDButton</span>.<span class="type">ButtonType</span>, authorizationButtonStyle style: <span class="type">ASAuthorizationAppleIDButton</span>.<span class="type">Style</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置按钮的圆切角</span></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> cornerRadius: <span class="type">CGFloat</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>开始创建<code>Apple</code>登录按钮</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// apple登录按钮</span></span><br><span class="line"><span class="keyword">let</span> appleButton = <span class="type">ASAuthorizationAppleIDButton</span>(type: .<span class="keyword">continue</span>, style: .black)</span><br><span class="line">appleButton.frame = <span class="type">CGRect</span>(x: <span class="number">100</span>, y: showLabel.frame.maxY + <span class="number">40</span>, width: <span class="number">200</span>, height: <span class="number">50</span>)</span><br><span class="line">appleButton.cornerRadius = <span class="number">10</span></span><br><span class="line">appleButton.addTarget(<span class="keyword">self</span>, action: #selector(appleAction), <span class="keyword">for</span>: .touchUpInside)</span><br><span class="line">view.addSubview(appleButton)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>ASAuthorizationAppleIDButton</code>的初始化方法中有两个参数<code>type</code>和<code>style</code></li>
<li><code>type</code>是设置按钮的类型<code>ASAuthorizationAppleIDButton.ButtonType</code></li>
<li><code>style</code>设置按钮的样式<code>ASAuthorizationAppleIDButton.Style</code></li>
<li>可参考官网介绍<a href="https://developer.apple.com/design/human-interface-guidelines/sign-in-with-apple/overview/" target="_blank" rel="noopener">Sign In with Apple</a></li>
</ul>
<h3 id="ButtonType"><a href="#ButtonType" class="headerlink" title="ButtonType"></a>ButtonType</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ButtonType</span> : <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="comment">// signIn登录类型</span></span><br><span class="line">    <span class="keyword">case</span> signIn</span><br><span class="line">    <span class="comment">// continue类型</span></span><br><span class="line">    <span class="keyword">case</span> `<span class="keyword">continue</span>`</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">var</span> `<span class="keyword">default</span>`: <span class="type">ASAuthorizationAppleIDButton</span>.<span class="type">ButtonType</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不同<code>ButtonType</code>展示效果如下</p>
<p><img src="https://titanjun.oss-cn-hangzhou.aliyuncs.com/ios/sign_type.png" alt="ButtonType"></p>
<h3 id="Style"><a href="#Style" class="headerlink" title="Style"></a>Style</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@available</span>(iOS <span class="number">13.0</span>, *)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Style</span> : <span class="title">Int</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">case</span> white</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> whiteOutline</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> black</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不同<code>Style</code>展示效果和使用场景如下</p>
<p><img src="https://titanjun.oss-cn-hangzhou.aliyuncs.com/ios/sign_style.jpg" alt="Style"></p>
<h3 id="cornerRadius"><a href="#cornerRadius" class="headerlink" title="cornerRadius"></a>cornerRadius</h3><p>设置按钮的圆角大小</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认值大概5左右, 具体值不知</span></span><br><span class="line">appleButton.cornerRadius = <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h2 id="发起授权请求"><a href="#发起授权请求" class="headerlink" title="发起授权请求"></a>发起授权请求</h2><p>在创建好登录按钮后, 点击按钮的操作就是, 根据用户登录的<code>AppleID</code>发起授权请求, 并获得授权码</p>
<ul>
<li><code>iOS 13</code>系统给我们提供了一个<code>ASAuthorizationAppleIDProvider</code>类</li>
<li>该类就是一种基于用户的<code>AppleID</code>生成用户的授权请求的一种机制</li>
<li>在发起授权请求之前, 需要配置要获取的数据权限范围（例如：用户名、邮箱等）</li>
<li>为获取授权结果, 还需要设置回调代理, 并发起授权请求</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@objc</span> <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">appleAction</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 基于用户的Apple ID授权用户，生成用户授权请求的一种机制</span></span><br><span class="line">    <span class="keyword">let</span> appleIDProvider = <span class="type">ASAuthorizationAppleIDProvider</span>()</span><br><span class="line">    <span class="comment">// 创建新的AppleID授权请求</span></span><br><span class="line">    <span class="keyword">let</span> request = appleIDProvider.createRequest()</span><br><span class="line">    <span class="comment">// 所需要请求的联系信息</span></span><br><span class="line">    request.requestedScopes = [.fullName, .email]</span><br><span class="line">    <span class="comment">// 管理授权请求的控制器</span></span><br><span class="line">    <span class="keyword">let</span> controller = <span class="type">ASAuthorizationController</span>(authorizationRequests: [request])</span><br><span class="line">    <span class="comment">// 授权成功或者失败的代理</span></span><br><span class="line">    controller.delegate = <span class="keyword">self</span></span><br><span class="line">    <span class="comment">// 显示上下文的代理, 系统可以在上下文中向用户展示授权页面</span></span><br><span class="line">    controller.presentationContextProvider = <span class="keyword">self</span></span><br><span class="line">    <span class="comment">// 在控制器初始化期间启动授权流</span></span><br><span class="line">    controller.performRequests()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="delegate"><a href="#delegate" class="headerlink" title="delegate"></a>delegate</h3><p>设置授权控制器通知授权请求的成功与失败的代理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 代理</span><br><span class="line">weak open var delegate: ASAuthorizationControllerDelegate?</span><br><span class="line"></span><br><span class="line">// 代理方法如下</span><br><span class="line">@available(iOS 13.0, *)</span><br><span class="line">public protocol ASAuthorizationControllerDelegate : NSObjectProtocol &#123;</span><br><span class="line">    // 授权成功的回调</span><br><span class="line">    optional func authorizationController(controller: ASAuthorizationController, didCompleteWithAuthorization authorization: ASAuthorization)</span><br><span class="line"></span><br><span class="line">    // 授权失败的回调</span><br><span class="line">    optional func authorizationController(controller: ASAuthorizationController, didCompleteWithError error: Error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="presentationContextProvider"><a href="#presentationContextProvider" class="headerlink" title="presentationContextProvider"></a>presentationContextProvider</h3><p>需要向用户展示授权页面时, 需要遵循该协议</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 显示上下文的代理, 系统可以在上下文中向用户展示授权页面</span></span><br><span class="line"><span class="keyword">weak</span> <span class="keyword">open</span> <span class="keyword">var</span> presentationContextProvider: <span class="type">ASAuthorizationControllerPresentationContextProviding?</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 协议方法</span></span><br><span class="line"><span class="meta">@available</span>(iOS <span class="number">13.0</span>, *)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">ASAuthorizationControllerPresentationContextProviding</span> : <span class="title">NSObjectProtocol</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 该方法返回一个视图锚点, 告诉代理应该在哪个window 展示内容给用户</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">presentationAnchor</span><span class="params">(<span class="keyword">for</span> controller: ASAuthorizationController)</span></span> -&gt; <span class="type">ASPresentationAnchor</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法执行示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">presentationAnchor</span><span class="params">(<span class="keyword">for</span> controller: ASAuthorizationController)</span></span> -&gt; <span class="type">ASPresentationAnchor</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.view.window!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ASAuthorization"><a href="#ASAuthorization" class="headerlink" title="ASAuthorization"></a>ASAuthorization</h3><ul>
<li>在控制器获得授权的成功回调中, 协议方法提供了一个<code>ASAuthorization</code></li>
<li><code>ASAuthorization</code>是对控制器成功授权的封装, 包括两个属性</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@available</span>(iOS <span class="number">13.0</span>, *)</span><br><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">ASAuthorization</span> : <span class="title">NSObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建发起成功授权的发起者</span></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> provider: <span class="type">ASAuthorizationProvider</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成功授权后返回的相关凭证, 包含授权后的相关信息,是一个协议</span></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> credential: <span class="type">ASAuthorizationCredential</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ASAuthorizationCredential"><a href="#ASAuthorizationCredential" class="headerlink" title="ASAuthorizationCredential"></a>ASAuthorizationCredential</h3><p>是一个协议, 在处理授权成功的结果中, 需要使用遵循该协议的类, 有以下三个</p>
<ul>
<li><code>ASPasswordCredential</code>: 密码凭证</li>
<li><code>ASAuthorizationAppleIDCredential</code>: Apple ID身份验证成功产生的凭证</li>
<li><code>ASAuthorizationSingleSignOnCredential</code>: 单点登录（SSO）身份验证产生的凭据</li>
</ul>
<h4 id="ASPasswordCredential"><a href="#ASPasswordCredential" class="headerlink" title="ASPasswordCredential"></a>ASPasswordCredential</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@available</span>(iOS <span class="number">12.0</span>, *)</span><br><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">ASPasswordCredential</span> : <span class="title">NSObject</span>, <span class="title">ASAuthorizationCredential</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(user: <span class="type">String</span>, password: <span class="type">String</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户名</span></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> user: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户密码</span></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> password: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ASAuthorizationAppleIDCredential"><a href="#ASAuthorizationAppleIDCredential" class="headerlink" title="ASAuthorizationAppleIDCredential"></a>ASAuthorizationAppleIDCredential</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@available</span>(iOS <span class="number">13.0</span>, *)</span><br><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">ASAuthorizationAppleIDCredential</span> : <span class="title">NSObject</span>, <span class="title">ASAuthorizationCredential</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 和用户AppleID关联的用户ID(标识符)</span></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> user: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传送给ASAuthorizationRequest的字符串</span></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> state: <span class="type">String?</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户授权的可访问的联系信息的种类</span></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> authorizedScopes: [<span class="type">ASAuthorization</span>.<span class="type">Scope</span>] &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为APP提供的授权证明的有效token</span></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> authorizationCode: <span class="type">Data?</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// JSON Web Token (JWT), 用于以安全的方式向应用程序传递关于用户身份的信息</span></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> identityToken: <span class="type">Data?</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户的email</span></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> email: <span class="type">String?</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户名</span></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> fullName: <span class="type">PersonNameComponents?</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户是否是真实用户的状态</span></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> realUserStatus: <span class="type">ASUserDetectionStatus</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户是否是真实用户的枚举值</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ASUserDetectionStatus</span> : <span class="title">Int</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> unsupported</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> unknown</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> likelyReal</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ASAuthorizationSingleSignOnCredential"><a href="#ASAuthorizationSingleSignOnCredential" class="headerlink" title="ASAuthorizationSingleSignOnCredential"></a>ASAuthorizationSingleSignOnCredential</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@available</span>(iOS <span class="number">13.0</span>, *)</span><br><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">ASAuthorizationSingleSignOnCredential</span> : <span class="title">NSObject</span>, <span class="title">ASAuthorizationCredential</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// AuthenticationServices返回的字符串</span></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> state: <span class="type">String?</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户获取授权范围的token</span></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> accessToken: <span class="type">Data?</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// JSON Web Token (JWT), 用于以安全的方式向应用程序传递关于用户身份的信息</span></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> identityToken: <span class="type">Data?</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户授权的可访问的联系信息的种类</span></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> authorizedScopes: [<span class="type">ASAuthorization</span>.<span class="type">Scope</span>] &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 完整的身份验证响应信息</span></span><br><span class="line">    <span class="meta">@NSCopying</span> <span class="keyword">open</span> <span class="keyword">var</span> authenticatedResponse: <span class="type">HTTPURLResponse?</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="授权成功"><a href="#授权成功" class="headerlink" title="授权成功"></a>授权成功</h3><p>上面有提到, 在<code>ASAuthorizationControllerDelegate</code>有两个协议方法, 分别是授权成功和失败的回调, 下面就具体看看</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">SignViewController</span>: <span class="title">ASAuthorizationControllerDelegate</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 处理成功的授权</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">authorizationController</span><span class="params">(controller: ASAuthorizationController, didCompleteWithAuthorization authorization: ASAuthorization)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"授权成功"</span>)</span><br><span class="line">        <span class="comment">// 成功的Apple ID身份验证信息</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> appleIDCreden = authorization.credential <span class="keyword">as</span>? <span class="type">ASAuthorizationAppleIDCredential</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> userIdentifier = appleIDCreden.user</span><br><span class="line">            <span class="keyword">let</span> fullName = appleIDCreden.fullName</span><br><span class="line">            <span class="keyword">let</span> email = appleIDCreden.email</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 这里需要我们在系统中创建一个账户, 用于存储用户的唯一标识userIdentifier</span></span><br><span class="line">            <span class="comment">// 可以在系统的钥匙串中存储</span></span><br><span class="line">            <span class="keyword">let</span> webVC = <span class="type">WebViewController</span>()</span><br><span class="line">            webVC.user = userIdentifier</span><br><span class="line">            webVC.giveName = fullName?.givenName ?? <span class="string">""</span></span><br><span class="line">            webVC.familyName = fullName?.familyName ?? <span class="string">""</span></span><br><span class="line">            webVC.email = email ?? <span class="string">""</span></span><br><span class="line">            navigationController?.pushViewController(webVC, animated: <span class="literal">true</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> passwordCreden = authorization.credential <span class="keyword">as</span>? <span class="type">ASPasswordCredential</span> &#123;</span><br><span class="line">            <span class="comment">// 密码凭证用户的唯一标识</span></span><br><span class="line">            <span class="keyword">let</span> userIdentifiler = passwordCreden.user</span><br><span class="line">            <span class="comment">// 密码凭证的密码</span></span><br><span class="line">            <span class="keyword">let</span> password = passwordCreden.password</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 显示相关信息</span></span><br><span class="line">            <span class="keyword">let</span> message = <span class="string">"APP已经收到您选择的秘钥凭证\nUsername: \(userIdentifiler)\n Password: \(password)"</span></span><br><span class="line">            showLabel.text = message</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            showLabel.text = <span class="string">"授权信息均不符"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理授权错误</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">authorizationController</span><span class="params">(controller: ASAuthorizationController, didCompleteWithError error: Error)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"授权错误: \(error)"</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> showText = <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> authError = error <span class="keyword">as</span>? <span class="type">ASAuthorizationError</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> code = authError.code</span><br><span class="line">            <span class="keyword">switch</span> code &#123;</span><br><span class="line">            <span class="keyword">case</span> .canceled:</span><br><span class="line">                showText = <span class="string">"用户取消了授权请求"</span></span><br><span class="line">            <span class="keyword">case</span> .failed:</span><br><span class="line">                showText = <span class="string">"授权请求失败"</span></span><br><span class="line">            <span class="keyword">case</span> .invalidResponse:</span><br><span class="line">                showText = <span class="string">"授权请求响应无效"</span></span><br><span class="line">            <span class="keyword">case</span> .notHandled:</span><br><span class="line">                showText = <span class="string">"未能处理授权请求"</span></span><br><span class="line">            <span class="keyword">case</span> .unknown:</span><br><span class="line">                showText = <span class="string">"授权请求失败, 未知的错误原因"</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                showText = <span class="string">"其他未知的错误原因"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        showLabel.text = showText</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note success"><p>做好了上面配置, 就可以看到下面的登录页面</p></div>



<p><img src="https://titanjun.oss-cn-hangzhou.aliyuncs.com/ios/sign_sign.jpeg?x-oss-process=image/resize,m_lfit,h_500" alt="image"></p>
<ul>
<li>如果不修改姓名, 授权成功后将获取到用户的姓名</li>
<li>如果选择共享我的电子邮件, 授权成功将获取到用户的电子邮件地址</li>
<li>如果选择隐藏邮件地址, 授权成功将获取到一个虚拟的电子邮件地址</li>
<li>点击姓名右侧的清除按钮可以修改用户名, 如下页面</li>
</ul>
<p><img src="https://titanjun.oss-cn-hangzhou.aliyuncs.com/ios/sign_name.jpeg?x-oss-process=image/resize,m_lfit,h_500" alt="name"></p>
<ul>
<li>如果登录用户修改了用户名, 那么授权成功后获取到的用户名就是修改后的</li>
<li>使用过<code>AppleID</code>登录过<code>App</code>，进入应用的时候会提示使用<code>TouchID</code>登录的场景如下</li>
</ul>
<p><img src="https://titanjun.oss-cn-hangzhou.aliyuncs.com/ios/sign_has.jpeg?x-oss-process=image/resize,m_lfit,h_500" alt="image"></p>
<ul>
<li>如果使用指纹登录三次失败后, 下面会有一个使用密码继续的按钮, 可以使用手机密码继续登录</li>
<li>如果手机没有设置<code>Apple ID</code>, 使用苹果登录, 将会有弹窗提示, </li>
</ul>
<p><img src="https://titanjun.oss-cn-hangzhou.aliyuncs.com/ios/sign_noid.png" alt="image"></p>
<h2 id="监听授权状态"><a href="#监听授权状态" class="headerlink" title="监听授权状态"></a>监听授权状态</h2><p>在特殊情况下我们还需要监听授权状态的改变, 并进行相应的处理</p>
<ul>
<li>用户终止在该<code>App</code>中使用<code>Sign in with Apple</code>功能</li>
<li>用户在设置里注销了<code>Apple ID</code></li>
<li>针对类似这种情况, <code>App</code>需要获取到这些状态，然后做退出登录操作</li>
<li>我们需要在<code>App</code>启动的时候，来获取当前用户的授权状态</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ASAuthorizationAppleIDProvider提供了一个获取用户授权状态和授权凭据是否有效</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getCredentialState</span><span class="params">(forUserID: String, completion: <span class="params">(ASAuthorizationAppleIDProvider.CredentialState, Error?)</span></span></span> -&gt; <span class="type">Void</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ASAuthorizationAppleIDProvider.CredentialState的所有枚举值</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">CredentialState</span> : <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> revoked</span><br><span class="line">    <span class="keyword">case</span> authorized</span><br><span class="line">    <span class="keyword">case</span> notFound</span><br><span class="line">    <span class="keyword">case</span> transferred</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note success"><p>示例代码如下</p></div>



<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: <span class="keyword">Any</span>]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> #available(iOS <span class="number">13.0</span>, *) &#123;</span><br><span class="line">        <span class="comment">// 钥匙串中取出的</span></span><br><span class="line">        <span class="keyword">let</span> userIdentifier = <span class="string">"userIdentifier"</span></span><br><span class="line">        <span class="keyword">if</span> (!userIdentifier.isEmpty) &#123;</span><br><span class="line">            <span class="comment">// 基于用户的Apple ID授权用户，生成用户授权请求的一种机制</span></span><br><span class="line">            <span class="keyword">let</span> appleIDProvider = <span class="type">ASAuthorizationAppleIDProvider</span>()</span><br><span class="line">            <span class="comment">// 返回完成处理程序中给定用户的凭据状态</span></span><br><span class="line">            appleIDProvider.getCredentialState(forUserID: userIdentifier) &#123; (state, error) <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">switch</span> state &#123;</span><br><span class="line">                <span class="keyword">case</span> .authorized:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"授权状态有效"</span>)</span><br><span class="line">                <span class="keyword">case</span> .notFound:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"授权凭证缺失（可能是使用AppleID 登录过App）"</span>)</span><br><span class="line">                <span class="keyword">case</span> .revoked:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"上次使用苹果账号登录的凭据已被移除，需解除绑定并重新引导用户使用苹果登录"</span>)</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"未知状态"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除此之外还可以通过通知方法来监听<code>revoked</code>状态, 在<code>ASAuthorizationAppleIDProvider</code>中增加了一个属性, 用于监听<code>revoked</code>状态</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@available</span>(iOS <span class="number">13.0</span>, *)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">let</span> <span class="title">credentialRevokedNotification</span>: <span class="title">NSNotification</span>.<span class="title">Name</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// 使用方法</span></span><br><span class="line"><span class="class"><span class="title">fileprivate</span> <span class="title">func</span> <span class="title">observeAppleSignInState</span>() </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> #available(iOS <span class="number">13.0</span>, *) &#123;</span><br><span class="line">        <span class="keyword">let</span> center = <span class="type">NotificationCenter</span>.<span class="keyword">default</span></span><br><span class="line">        center.addObserver(<span class="keyword">self</span>, selector: #selector(handleStateChange(noti:)), name: <span class="type">ASAuthorizationAppleIDProvider</span>.credentialRevokedNotification, object: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@objc</span> <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">handleStateChange</span><span class="params">(noti: <span class="keyword">Any</span>)</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"授权状态发生改变"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><code>Sign In with Apple</code>涉及到的相关资料文档如下</p>
<ul>
<li><a href="https://developer.apple.com/documentation/authenticationservices" target="_blank" rel="noopener">Sign In with Apple Entitlement</a></li>
<li><a href="https://developer.apple.com/documentation/signinwithapplerestapi/generate_and_validate_tokens" target="_blank" rel="noopener">Generate and validate tokens</a></li>
<li><a href="https://developer.apple.com/documentation/authenticationservices/adding_the_sign_in_with_apple_flow_to_your_app" target="_blank" rel="noopener">Adding the Sign In with Apple Flow to Your App</a></li>
<li><a href="https://docs-assets.developer.apple.com/published/8f9ca51349/AddingTheSignInWithAppleFlowToYourApp.zip" target="_blank" rel="noopener">Sign In With Apple官方Demo(Swift版)</a></li>
<li><a href="https://blog.csdn.net/wpf199402076118/article/details/99677412" target="_blank" rel="noopener">Sign In with Apple后台配置</a></li>
</ul>
]]></content>
      <categories>
        <category>iOS进阶指南</category>
      </categories>
      <tags>
        <tag>iOS13</tag>
        <tag>iOS</tag>
        <tag>Swift5.0</tag>
        <tag>Xcode11</tag>
      </tags>
  </entry>
  <entry>
    <title>Ceph详解</title>
    <url>/posts/fdf20d39/</url>
    <content><![CDATA[<hr>
<p>title: Ceph 常用操作<br>date: 2019-09-03<br>updated: 2020-03-22<br>layout: post<br>comments: true<br>categories: Ceph<br>tags: [Linux, Ceph]<br>keywords: Ceph<br>description: 本文记录使用 Ceph 过程中常用的命令。</p>
<hr>
<hr>
<h4 id="删除-rbd-image-时提示有-watcher"><a href="#删除-rbd-image-时提示有-watcher" class="headerlink" title="删除 rbd image 时提示有 watcher"></a>删除 rbd image 时提示有 watcher</h4><p>查看该 image 信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@openstack-compute-02:~<span class="comment"># rbd info vm-109-cloudinit --pool cloud-disk</span></span><br><span class="line">rbd image <span class="string">'vm-109-cloudinit'</span>:</span><br><span class="line">        size 4 MiB <span class="keyword">in</span> 1 objects</span><br><span class="line">        order 22 (4 MiB objects)</span><br><span class="line">        snapshot_count: 0</span><br><span class="line">        id: 85a71142d8c136</span><br><span class="line">        block_name_prefix: rbd_data.85a71142d8c136</span><br><span class="line">        format: 2</span><br><span class="line">        features: layering, exclusive-lock, object-map, fast-diff, deep-flatten</span><br><span class="line">        op_features:</span><br><span class="line">        flags:</span><br><span class="line">        create_timestamp: Wed Aug 28 10:04:09 2019</span><br><span class="line">        access_timestamp: Mon Sep  2 13:59:31 2019</span><br><span class="line">        modify_timestamp: Mon Sep  2 13:59:31 2019</span><br></pre></td></tr></table></figure>

<p>从 info 中  block_name_prefix: rbd_data.85a71142d8c136 获知 rados 对象名称为 rbd_header.85a71142d8c136 ，然后列出对象所有 watcher：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@openstack-compute-02:~<span class="comment"># rados listwatchers --pool cloud-disk rbd_header.85a71142d8c136</span></span><br><span class="line">watcher=192.168.180.116:0/2072981162 client.27537920 cookie=139876735669120</span><br></pre></td></tr></table></figure>

<p>或者直接通过 rbd 命令列出 watcher：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@openstack-compute-02:~<span class="comment"># rbd status --pool cloud-disk vm-109-cloudinit</span></span><br><span class="line">Watchers:</span><br><span class="line">        watcher=192.168.180.116:0/2072981162 client.27537920 cookie=139876735669120</span><br></pre></td></tr></table></figure>

<p>将 watcher 加入黑名单：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ceph osd blacklist add 192.168.180.116:0/2072981162</span><br></pre></td></tr></table></figure>

<p>此时再次查看 image 的 watcher ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@openstack-compute-02:~<span class="comment"># rbd status --pool cloud-disk vm-109-cloudinit</span></span><br><span class="line">Watchers: none</span><br></pre></td></tr></table></figure>

<p>没有了 watcher 我们就可以继续删除该 image ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rbd rm --pool cloud-disk vm-109-cloudinit</span><br></pre></td></tr></table></figure>

<p>然后将 watcher 从黑名单剔除或者不手动操作，默认 1 个小时后自动恢复：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@openstack-compute-02:~<span class="comment"># ceph osd blacklist ls</span></span><br><span class="line">listed 1 entries</span><br><span class="line">192.168.180.116:0/2072981162 2019-09-03 11:19:24.466205</span><br><span class="line">root@openstack-compute-02:~<span class="comment"># ceph osd blacklist rm 192.168.180.116:0/2072981162</span></span><br><span class="line">un-blacklisting 192.168.180.116:0/2072981162</span><br><span class="line">root@openstack-compute-02:~<span class="comment"># ceph osd blacklist clear</span></span><br><span class="line"> removed all blacklist entries</span><br><span class="line">root@openstack-compute-02:~<span class="comment"># ceph osd blacklist ls</span></span><br><span class="line">listed 0 entries</span><br></pre></td></tr></table></figure>

<h4 id="scrub-errors-修复"><a href="#scrub-errors-修复" class="headerlink" title="scrub errors 修复"></a>scrub errors 修复</h4><p>错误如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@umstor21:~<span class="comment"># ceph -s</span></span><br><span class="line">  cluster:</span><br><span class="line">    id:     d6aadfd6-9e08-4000-98bd-a5a14f59ef97</span><br><span class="line">    health: HEALTH_ERR</span><br><span class="line">            30 scrub errors</span><br><span class="line">            Reduced data availability: 25 pgs inactive</span><br><span class="line">            Possible data damage: 1 pg inconsistent</span><br><span class="line">            Degraded data redundancy: 60273/2821944 objects degraded (2.136%), 68 pgs degraded, 57 pgs undersized</span><br><span class="line"></span><br><span class="line">  services:</span><br><span class="line">    mon: 3 daemons, quorum openstack-compute-04,openstack-compute-02,openstack-compute-03 (age 63m)</span><br><span class="line">    mgr: openstack-compute-02(active, since 8d), standbys: openstack-compute-04, openstack-compute-03</span><br><span class="line">    mds: cephfs:1 &#123;0=openstack-compute-04=up:active&#125; 2 up:standby</span><br><span class="line">    osd: 19 osds: 18 up (since 8m), 18 <span class="keyword">in</span> (since 53m); 57 remapped pgs</span><br><span class="line"></span><br><span class="line">  data:</span><br><span class="line">    pools:   12 pools, 1076 pgs</span><br><span class="line">    objects: 1.41M objects, 5.3 TiB</span><br><span class="line">    usage:   4.9 TiB used, 11 TiB / 16 TiB avail</span><br><span class="line">    pgs:     2.323% pgs not active</span><br><span class="line">             60273/2821944 objects degraded (2.136%)</span><br><span class="line">             1006 active+clean</span><br><span class="line">             32   active+undersized+degraded+remapped+backfill_wait</span><br><span class="line">             18   undersized+degraded+remapped+backfill_wait+peered</span><br><span class="line">             11   active+recovery_wait+degraded</span><br><span class="line">             7    undersized+degraded+remapped+backfilling+peered</span><br><span class="line">             1    active+recovery_wait</span><br><span class="line">             1    active+clean+inconsistent</span><br><span class="line"></span><br><span class="line">  io:</span><br><span class="line">    recovery: 40 MiB/s, 21 objects/s</span><br></pre></td></tr></table></figure>

<p>查看详细信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@umstor21:~<span class="comment"># ceph health detail</span></span><br><span class="line">HEALTH_ERR 30 scrub errors; Reduced data availability: 25 pgs inactive; Possible data damage: 1 pg inconsistent; Degraded data redundancy: 59572/2821944 objects degraded (2.111%), 68 pgs degraded, 57 pgs undersized</span><br><span class="line">OSD_SCRUB_ERRORS 30 scrub errors</span><br><span class="line">PG_AVAILABILITY Reduced data availability: 25 pgs inactive</span><br><span class="line">    pg 1.1 is stuck inactive <span class="keyword">for</span> 3867.682789, current state undersized+degraded+remapped+backfill_wait+peered, last acting [26]</span><br><span class="line">    pg 1.1b is stuck inactive <span class="keyword">for</span> 3867.800588, current state undersized+degraded+remapped+backfill_wait+peered, last acting [24]</span><br><span class="line">    pg 1.26 is stuck inactive <span class="keyword">for</span> 3867.806862, current state undersized+degraded+remapped+backfill_wait+peered, last acting [6]</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>修复 pg</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ceph pg repair &lt;pg_id&gt;</span><br></pre></td></tr></table></figure>

<h4 id="删除-Monitor"><a href="#删除-Monitor" class="headerlink" title="删除 Monitor"></a>删除 Monitor</h4><p>更复杂情况参考：<a href="https://www.jianshu.com/p/b78cf33e558f" target="_blank" rel="noopener">https://www.jianshu.com/p/b78cf33e558f</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl stop ceph-mon@openstack-compute-02.service</span><br><span class="line">// 如果停止一个 ceph-mon 后无法执行 ceph 命令，则应当先删除 mon 再停止 ceph-mon 服务</span><br><span class="line">ceph mon remove openstack-compute-02</span><br><span class="line">// 移除 ceph.conf 中的相关信息</span><br></pre></td></tr></table></figure>

<h4 id="添加-Monitor"><a href="#添加-Monitor" class="headerlink" title="添加 Monitor"></a>添加 Monitor</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 预先安装 ceph-common ，再安装 ceph-mon</span><br><span class="line">yum -y install ceph-common</span><br><span class="line">// 在目标节点上创建 mon 目录，一般使用 hostname 作为 mon-id</span><br><span class="line">mkdir -p /var/lib/ceph/mon/ceph-`hostname`</span><br><span class="line">// 从已有 ceph 节点复制 ceph 配置</span><br><span class="line">scp 192.168.180.7:/etc/ceph/* /etc/ceph/</span><br><span class="line">// 获取 mon keyring</span><br><span class="line">ceph auth get mon. -o /tmp/mon.keyring</span><br><span class="line">// 获取 mon map</span><br><span class="line">ceph mon getmap -o /tmp/mon.map</span><br><span class="line">// 格式化 mon 数据目录</span><br><span class="line">ceph-mon -i `hostname` --mkfs --monmap /tmp/mon.map --keyring /tmp/mon.keyring</span><br><span class="line">// 更改目录所属用户为 ceph</span><br><span class="line">chown -R ceph:ceph /etc/ceph /var/lib/ceph</span><br><span class="line">// 启动 ceph-mon 服务</span><br><span class="line">systemctl enable --now ceph-mon@`hostname`</span><br></pre></td></tr></table></figure>

<h4 id="ceph-ansible-部署"><a href="#ceph-ansible-部署" class="headerlink" title="ceph-ansible 部署"></a>ceph-ansible 部署</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ceph/ceph-ansible.git</span><br><span class="line">git checkout v4.0.9</span><br><span class="line">// 在部署节点安装</span><br><span class="line">yum install -y python-paramiko sshpass</span><br><span class="line">rpm -i https://releases.ansible.com/ansible/rpm/release/epel-7-x86_64/ansible-2.8.9-1.el7.ans.noarch.rpm</span><br><span class="line">// 在所有 ceph 节点安装</span><br><span class="line">yum install -y python-netaddr</span><br></pre></td></tr></table></figure>

<p>cd  到 ceph-ansible ， 创建 hosts 文件如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[CephGroup:children]</span><br><span class="line">mons</span><br><span class="line">osds</span><br><span class="line"><span class="comment">#mdss</span></span><br><span class="line">mgrs</span><br><span class="line">rgws</span><br><span class="line">[CephGroup:vars]</span><br><span class="line">ansible_ssh_user=root</span><br><span class="line">ansible_ssh_pass=<span class="built_in">test</span></span><br><span class="line">ansible_port=22</span><br><span class="line"></span><br><span class="line">[mons]</span><br><span class="line">ceph-csi-01 ansible_host=10.8.107.149</span><br><span class="line">ceph-csi-02 ansible_host=10.8.185.232</span><br><span class="line">ceph-csi-03 ansible_host=10.8.143.178</span><br><span class="line">[osds]</span><br><span class="line">ceph-csi-01 ansible_host=10.8.107.149</span><br><span class="line">ceph-csi-02 ansible_host=10.8.185.232</span><br><span class="line">ceph-csi-03 ansible_host=10.8.143.178</span><br><span class="line"><span class="comment">#[mdss]</span></span><br><span class="line"><span class="comment">#ceph-csi-01 ansible_host=10.8.107.149</span></span><br><span class="line"><span class="comment">#ceph-csi-02 ansible_host=10.8.185.232</span></span><br><span class="line"><span class="comment">#ceph-csi-03 ansible_host=10.8.143.178</span></span><br><span class="line">[mgrs]</span><br><span class="line">ceph-csi-01 ansible_host=10.8.107.149</span><br><span class="line">ceph-csi-02 ansible_host=10.8.185.232</span><br><span class="line">ceph-csi-03 ansible_host=10.8.143.178</span><br><span class="line">[rgws]</span><br><span class="line">ceph-csi-01 ansible_host=10.8.107.149</span><br><span class="line">ceph-csi-02 ansible_host=10.8.185.232</span><br><span class="line">ceph-csi-03 ansible_host=10.8.143.178</span><br><span class="line">[grafana-server]</span><br><span class="line">ceph-csi-01 ansible_host=10.8.107.149</span><br><span class="line">ceph-csi-02 ansible_host=10.8.185.232</span><br><span class="line">ceph-csi-03 ansible_host=10.8.143.178</span><br></pre></td></tr></table></figure>

<p>cd 到  group_vars 目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp all.yml.sample all.yml</span><br><span class="line">// 填入以下内容并修改 public_network 与当前网络匹配</span><br><span class="line">ceph_origin: repository</span><br><span class="line">ceph_repository: community</span><br><span class="line">ceph_mirror: https://mirrors.aliyun.com/ceph</span><br><span class="line">ceph_stable_key: https://mirrors.aliyun.com/ceph/keys/release.asc</span><br><span class="line">ceph_stable_release: nautilus</span><br><span class="line">monitor_interface: eth0</span><br><span class="line">public_network: 10.23.0.0/16</span><br><span class="line">radosgw_interface: eth0</span><br><span class="line"></span><br><span class="line">cp osds.yml.sample osds.yml</span><br><span class="line">// 添加安装盘信息</span><br><span class="line">devices:</span><br><span class="line">  - /dev/vdb</span><br><span class="line">  - /dev/vdc</span><br><span class="line">  - /dev/vdd</span><br></pre></td></tr></table></figure>

<p>回到项目根目录执行安装:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp site.yml.sample site.yml</span><br><span class="line">ansible-playbook -i hosts -v site.yml</span><br></pre></td></tr></table></figure>

<p>删除集群：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible-playbook -i hosts infrastructure-playbooks/purge-cluster.yml</span><br></pre></td></tr></table></figure>

<h4 id="ceph-ansible-添加-osd"><a href="#ceph-ansible-添加-osd" class="headerlink" title="ceph-ansible 添加 osd"></a>ceph-ansible 添加 osd</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /opt/ceph-ansible</span><br><span class="line">cp infrastructure-playbooks/add-osd.yml ./</span><br><span class="line">// 修改 group_vars/all.yml 磁盘信息</span><br><span class="line">ansible-playbook -vv -i hosts --limit 192.168.203.143 add-osd.yml</span><br><span class="line">// 新增一个 osd 宿主节点和在已有的 osd 节点上增加一块盘步骤一样</span><br><span class="line">// 添加完 osd 如果卡在 restart osd daemon 可通过执行以下命令解决</span><br><span class="line">ceph osd unset noup</span><br></pre></td></tr></table></figure>

<h4 id="rbd-image-使用"><a href="#rbd-image-使用" class="headerlink" title="rbd image 使用"></a>rbd image 使用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 创建大小为 1G 的 image</span><br><span class="line">rbd create rbd/myimage --size 1024</span><br><span class="line">rbd map rbd/myimage</span><br><span class="line">mkfs.xfs /dev/rbd0</span><br><span class="line">mkdir /data</span><br><span class="line">mount /dev/rbd0 /data</span><br><span class="line">// 扩容</span><br><span class="line">rbd resize --image=rbd/myimage --size 10G</span><br><span class="line">xfs_growfs /data</span><br><span class="line">// 卸载</span><br><span class="line">umount /data</span><br><span class="line">// 检查占用设备的进程</span><br><span class="line">fuser -m -v /dev/rbd0</span><br><span class="line">rbd unmap /dev/rbd0</span><br><span class="line">rbd rm rbd/myimage</span><br><span class="line">// rbd image 转换 format，也可用于 image 复制</span><br><span class="line">rbd export rbd/myrbd - | rbd import --image-format 2 - rbd/myrbd_v2</span><br><span class="line">// rbd bench</span><br><span class="line">rados bench -p rbd 20 -b 4K write -t 1 --no-cleanup</span><br><span class="line">rbd create --size 4G test</span><br><span class="line">rbd bench-write test</span><br></pre></td></tr></table></figure>

<h4 id="Cinder-创建-Volume-副本并-Boot-with-it"><a href="#Cinder-创建-Volume-副本并-Boot-with-it" class="headerlink" title="Cinder 创建 Volume 副本并 Boot with it"></a>Cinder 创建 Volume 副本并 Boot with it</h4><p>OpenStack: import existing Ceph volumes in Cinder：<a href="https://ceph.com/geen-categorie/openstack-import-existing-ceph-volumes-in-cinder/" target="_blank" rel="noopener">https://ceph.com/geen-categorie/openstack-import-existing-ceph-volumes-in-cinder/</a></p>
<h4 id="查看并修改-crushmap"><a href="#查看并修改-crushmap" class="headerlink" title="查看并修改 crushmap"></a>查看并修改 crushmap</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 获取集群 crushmap</span><br><span class="line">ceph osd getcrushmap -o &#123;file1&#125;</span><br><span class="line">&#123;file1&#125; 为自定义的文件名，该文件为二进制文件，不可编辑。要想编辑此文件，需要用工具将其反编译解析，如 crushtool 工具。</span><br><span class="line"></span><br><span class="line">2 反编译 crushmap</span><br><span class="line">crushtool -d &#123;file1&#125; -o &#123;file2&#125;</span><br><span class="line">反编译二进制文件 &#123;file1&#125; 得到可编辑文件 &#123;file2&#125;</span><br><span class="line"></span><br><span class="line">3. 编辑 crushmap</span><br><span class="line">按自我需求修改可编辑文件 &#123;file2&#125;</span><br><span class="line"></span><br><span class="line">4. 编译 crushmap</span><br><span class="line">要想编辑后的文件机器能够识别，必须用工具编译它生成二进制文件。</span><br><span class="line">crushtool -c &#123;file2&#125; -o &#123;file3&#125;</span><br><span class="line"></span><br><span class="line">5. 注入 crushmap</span><br><span class="line">要想新的 crushmap 在集群中生效，必须将其注入要集群。</span><br><span class="line">ceph osd setcrushmap -i &#123;file3&#125;</span><br></pre></td></tr></table></figure>

<p>基本理解：<a href="https://www.dovefi.com/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3crush1%E7%90%86%E8%A7%A3crush_map%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">深入理解 ceph crush (1)—- 理解 crush map 文件</a>／Crush 算法：<a href="http://www.xuxiaopang.com/2016/11/08/easy-ceph-CRUSH/" target="_blank" rel="noopener">大话 Ceph–CRUSH 那点事儿</a>／Crush 查看：<a href="https://www.jianshu.com/p/2355701459e9" target="_blank" rel="noopener">Ceph 实践之 Crushmap 相关</a>。</p>
<h4 id="OSD-过度使用内存"><a href="#OSD-过度使用内存" class="headerlink" title="OSD 过度使用内存"></a>OSD 过度使用内存</h4><p>在使用  Bluestore 时，bluestore_cache_autotune 默认已经启用，Bluestore 会将 OSD 堆内存使用量保持在指定的大小之下，通过配置选项 osd_memory_target 来控制，默认为 4G。对于内存较少但 OSD 节点较多的情况，仍然会可能造成内存几乎全部被 OSD 所用，最终致使宿主机死机。可以通过两种方式来缓解这种情况，一种是在启用自动配置时调小 osd_memory_target 值，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[osd]</span><br><span class="line">osd memory target = 2147483648</span><br></pre></td></tr></table></figure>

<p>另一种是禁用自动配置并手动指定缓存大小：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[osd]</span><br><span class="line">bluestore_cache_autotune = False</span><br><span class="line">bluestore_min_alloc_size_ssd = 32768</span><br><span class="line">bluestore_min_alloc_size_hdd = 32768</span><br><span class="line">bluestore_min_alloc_size = 32768</span><br><span class="line">bluestore_cache_kv_max = 6442450944</span><br><span class="line">bluestore_cache_kv_ratio = 0.990000</span><br><span class="line">bluestore_cache_meta_ratio = 0.010000</span><br><span class="line">bluestore_cache_size = 12884901888</span><br><span class="line">bluestore_cache_size_hdd = 12884901888</span><br><span class="line">bluestore_cache_size_ssd = 12884901888</span><br></pre></td></tr></table></figure>

<h4 id="ceph-查看存储池-IO"><a href="#ceph-查看存储池-IO" class="headerlink" title="ceph 查看存储池 IO"></a>ceph 查看存储池 IO</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ceph osd pool stats</span><br></pre></td></tr></table></figure>

<h4 id="ceph-总体及各存储池使用量"><a href="#ceph-总体及各存储池使用量" class="headerlink" title="ceph 总体及各存储池使用量"></a>ceph 总体及各存储池使用量</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ceph df detail</span><br></pre></td></tr></table></figure>

<h4 id="删除存储池"><a href="#删除存储池" class="headerlink" title="删除存储池"></a>删除存储池</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ceph tell mon.\* injectargs <span class="string">'--mon-allow-pool-delete=true'</span></span><br><span class="line"><span class="comment">## The following will delete the pool</span></span><br><span class="line">$ ceph osd pool delete &lt;pool-name&gt; &lt;pool-name&gt; --yes-i-really-really-mean-it</span><br><span class="line">$ ceph tell mon.\* injectargs <span class="string">'--mon-allow-pool-delete=false'</span></span><br></pre></td></tr></table></figure>

<h4 id="rados-对象操作"><a href="#rados-对象操作" class="headerlink" title="rados 对象操作"></a>rados 对象操作</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 上传文件</span><br><span class="line">rados -p &lt;pool-name&gt; put &lt;object-name&gt; &lt;file&gt;</span><br><span class="line">// 下载文件</span><br><span class="line">rados -p &lt;pool-name&gt; get &lt;object-name&gt; &lt;file&gt;</span><br><span class="line">// 列出文件</span><br><span class="line">rados -p &lt;pool-name&gt; ls</span><br><span class="line">// 删除文件</span><br><span class="line">rados -p &lt;pool-name&gt; rm &lt;object-name&gt;</span><br></pre></td></tr></table></figure>

<h4 id="挂载-cephfs-到本地"><a href="#挂载-cephfs-到本地" class="headerlink" title="挂载 cephfs 到本地"></a>挂载 cephfs 到本地</h4><p>用户态挂载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install ceph-fuse -y</span><br><span class="line">mkdir -p /mnt/cephfs</span><br><span class="line">ceph-fuse -n client.admin --key AQBvN8lbCuTBFhAAJPMWYwu+Jho8B1QGt80jAA== --host 10.23.229.102,10.23.109.25 /mnt/cephfs</span><br></pre></td></tr></table></figure>

<p>内核态挂载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount -t ceph 192.168.0.1:6789,192.168.0.2:6789:/ /mnt/cephfs -o name=admin,secret=AQATSKdNGBnwLhAAnNDKnH65FmVKpXZJVasUeQ==</span><br></pre></td></tr></table></figure>

<p>写入到 fstab 中，开机自动挂载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">192.168.180.125:6789,192.168.180.115:6789:/ /mnt/cephfs ceph name=admin,secret=AQAoDAZdss8dEhAA1IQSOpkYbJrUN8vTceYKMw==,_netdev,noatime     0 0</span><br></pre></td></tr></table></figure>

<h4 id="开启存储池-pg-num-自动调整"><a href="#开启存储池-pg-num-自动调整" class="headerlink" title="开启存储池 pg_num 自动调整"></a>开启存储池 pg_num 自动调整</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 启用自动调整模块</span><br><span class="line">ceph mgr module enable pg_autoscaler</span><br><span class="line">// 为已经存在的存储池开启自动调整</span><br><span class="line">ceph osd pool ls | xargs -I &#123;&#125; ceph osd pool set &#123;&#125; pg_autoscale_mode on</span><br><span class="line">// 为后续新创建的存储池默认开启</span><br><span class="line">ceph config set global osd_pool_default_pg_autoscale_mode on</span><br><span class="line">// 查看自动增加的 pg 数量</span><br><span class="line">ceph osd pool autoscale-status</span><br></pre></td></tr></table></figure>

<h4 id="删除-OSD-节点"><a href="#删除-OSD-节点" class="headerlink" title="删除 OSD 节点"></a>删除 OSD 节点</h4><p>参考先删后增节点时如何减少数据迁移：<a href="https://www.cnblogs.com/schangech/p/8036191.html" target="_blank" rel="noopener">https://www.cnblogs.com/schangech/p/8036191.html</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 停止指定 OSD 进程</span><br><span class="line">systemctl stop ceph-osd@15</span><br><span class="line">// out 指定 OSD</span><br><span class="line">ceph osd out 15</span><br><span class="line">// crush remove 指定 OSD</span><br><span class="line">ceph osd crush remove osd.15</span><br><span class="line">// 删除 osd 对应的 auth</span><br><span class="line">ceph auth del osd.15</span><br><span class="line">// 删除 osd</span><br><span class="line">ceph osd rm 15</span><br><span class="line">// 按照上述步骤删除节点上所有 osd 后，crush remove 指定节点</span><br><span class="line">ceph osd crush rm osd-host</span><br></pre></td></tr></table></figure>

<h4 id="CentOS-安装-ceph-common"><a href="#CentOS-安装-ceph-common" class="headerlink" title="CentOS 安装 ceph-common"></a>CentOS 安装 ceph-common</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -Uvh https://download.ceph.com/rpm-nautilus/el7/noarch/ceph-release-1-1.el7.noarch.rpm</span><br><span class="line">// 或使用镜像源</span><br><span class="line">rpm -Uvh https://mirrors.tuna.tsinghua.edu.cn/ceph/rpm-nautilus/el7/noarch/ceph-release-1-1.el7.noarch.rpm</span><br><span class="line">sed -i &apos;s+download.ceph.com+mirrors.tuna.tsinghua.edu.cn/ceph+&apos; /etc/yum.repos.d/ceph.repo</span><br><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install ceph-common</span><br></pre></td></tr></table></figure>

<h4 id="查看使用-ceph-volume-创建的-osd-信息"><a href="#查看使用-ceph-volume-创建的-osd-信息" class="headerlink" title="查看使用 ceph-volume 创建的 osd 信息"></a>查看使用 ceph-volume 创建的 osd 信息</h4><p>ceph-volume 使用逻辑卷创建 osd，ceph-disk 使用物理盘创建 osd，物理盘创建的 osd 与 盘符对应关系往往一目了然，逻辑卷创建的 osd 与盘符的对应关系需要执行以下命令查询：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ceph-volume inventory /dev/sda</span><br></pre></td></tr></table></figure>

<h4 id="var-lib-ceph-osd-ceph-x-使用内存盘"><a href="#var-lib-ceph-osd-ceph-x-使用内存盘" class="headerlink" title="/var/lib/ceph/osd/ceph-x 使用内存盘"></a>/var/lib/ceph/osd/ceph-x 使用内存盘</h4><p>使用 bluestore 的 OSD，所有需要持久化的数据均存储在 LVM metadata 中，所以  /var/lib/ceph/osd/ceph-x 使用 tmpfs 是预期行为， OSD 启动时会从 metadata 中取出相关数据填充到 tmpfs 文件中。参见：<a href="http://lists.ceph.com/pipermail/ceph-users-ceph.com/2019-February/032797.html" target="_blank" rel="noopener">http://lists.ceph.com/pipermail/ceph-users-ceph.com/2019-February/032797.html</a></p>
<h4 id="osd-near-full-的解决方法"><a href="#osd-near-full-的解决方法" class="headerlink" title="osd (near) full 的解决方法"></a>osd (near) full 的解决方法</h4><p>根本解决之道是添加 osd，临时解决方法是删除无用数据，osd full 时所有的读写操作都无法进行，可通过两种方法恢复读写后再执行删除数据的命令：</p>
<ul>
<li>一是调整 full osd 的权重：<code>ceph osd crush reweight osd.33 0.7</code> 或者 <code>ceph osd reweight-by-utilization</code></li>
<li>二是调高 full 的上限：<code>ceph osd set-full-ratio 0.98</code>，参见：<a href="https://docs.ceph.com/docs/master/rados/troubleshooting/troubleshooting-osd/#no-free-drive-space" target="_blank" rel="noopener">no-free-drive-space</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>打造 Mac 下高颜值好用的终端环境</title>
    <url>/posts/e5759cfd/</url>
    <content><![CDATA[<hr>
<p>title: “打造 Mac 下高颜值好用的终端环境”<br>tags: [Macos, iTerm2, terminal]<br>categories: Macos<br>date: 2017-02-7 15:13:59</p>
<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如果你觉得当前的终端操作不符合你的气质，可以看看我今天来介绍的 Mac 终端利器，不过不会介绍太多细节操作。</p>
<p><a href="https://cdn.jsdelivr.net/gh/donxan/pics/20200331105116.png" target="_blank" rel="noopener"><img src="https://blog-biezhi-me-1251171175.cos.ap-shanghai.myqcloud.com/public/images/2018/11/biezhi_iterm2.png#align=left&display=inline&height=1054&originHeight=1054&originWidth=1780&status=done&style=none&width=1780" alt></a></p>
<h1 id="它们是谁？"><a href="#它们是谁？" class="headerlink" title="它们是谁？"></a>它们是谁？</h1><ul>
<li>iTerm2：号称 Mac 下最好的终端工具（嗯，我也这么认为，毕竟我不会别的了）</li>
<li>zsh：一款强大的终端工具，能帮助你更高效地编写和执行命令。</li>
</ul>
<h1 id="安装-iTerm2"><a href="#安装-iTerm2" class="headerlink" title="安装 iTerm2"></a>安装 iTerm2</h1><p>下面的安装我几乎都用  <a href="https://brew.sh/" target="_blank" rel="noopener">brew</a>   方式了，如果你还不懂什么是 brew 可以看看  <a href="http://zhailiange.com/2016/06/04/Homebrew/" target="_blank" rel="noopener">这个</a>。</p>
<p>所以下面我假设你已经安装了  <code>Homebrew</code>。</p>
<p>如果你从来没有运行过  <code>brew cask</code>   命令，可以先执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew tap caskroom/cask</span><br></pre></td></tr></table></figure>

<blockquote>
<p>多执行也不会怀孕的，放心！</p>
</blockquote>
<p>然后开始安装  <code>iTerm2</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew cask install iterm2</span><br></pre></td></tr></table></figure>

<p>安装成功后在 Launchpad 中可以看到有一个新图标出现，打开 iTerm2。</p>
<h2 id="代码配色"><a href="#代码配色" class="headerlink" title="代码配色"></a>代码配色</h2><p>默认的界面还是略显丑陋的，我们来设置一下代码配色吧。</p>
<p><a href="https://cdn.jsdelivr.net/gh/donxan/pics/20200331105312.pnges/2018/11/open_settings.png" target="_blank" rel="noopener"><img src="https://blog-biezhi-me-1251171175.cos.ap-shanghai.myqcloud.com/public/images/2018/11/open_settings.png#align=left&display=inline&height=516&originHeight=516&originWidth=536&status=done&style=none&width=536" alt></a></p>
<p>先检查下终端颜色配置为  <code>xterm-256color</code>，位置在  <code>iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Terminal</code>。</p>
<p><a href="https://cdn.jsdelivr.net/gh/donxan/pics/20200331105357.png" target="_blank" rel="noopener"><img src="https://blog-biezhi-me-1251171175.cos.ap-shanghai.myqcloud.com/public/images/2018/11/iterm_terminal_color.png#align=left&display=inline&height=1140&originHeight=1140&originWidth=1874&status=done&style=none&width=1874" alt></a></p>
<p>然后就可以设置配色了，默认情况下  <code>iTerm2</code>   只有 7 种自带的配色，当然满足不了我们高颜值的需求了。有人就开源了一款叫  <a href="https://github.com/mbadolato/iTerm2-Color-Schemes" target="_blank" rel="noopener">iTerm2-Color-Schemes</a>   的配色合集，里面有各种经典、常用的配色方案，来使用 Git 下载到本地。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir ~/.iterm2 &amp;&amp; cd ~/.iterm2</span><br><span class="line"></span><br><span class="line">git clone https://github.com/mbadolato/iTerm2-Color-Schemes</span><br></pre></td></tr></table></figure>

<p>这里我创建了一个  <code>~/.iterm2</code>   的目录，放在别的目录都可以，它的目录结构是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> ~/.iterm2/iTerm2-Color-Schemes $ ls -la</span><br><span class="line">total 72</span><br><span class="line">-rw-r--r--    1 biezhi  staff  34131 Nov  6 11:34 README.md</span><br><span class="line">drwxr-xr-x  198 biezhi  staff   6336 Nov  6 11:34 Xresources</span><br><span class="line">drwxr-xr-x    3 biezhi  staff     96 Nov  6 11:34 backgrounds</span><br><span class="line">drwxr-xr-x  198 biezhi  staff   6336 Nov  6 11:34 konsole</span><br><span class="line">drwxr-xr-x  198 biezhi  staff   6336 Nov  6 11:34 putty</span><br><span class="line">drwxr-xr-x  198 biezhi  staff   6336 Nov  6 11:34 remmina</span><br><span class="line">drwxr-xr-x  198 biezhi  staff   6336 Nov  6 11:34 schemes</span><br><span class="line">drwxr-xr-x  200 biezhi  staff   6400 Nov  6 11:34 screenshots</span><br><span class="line">drwxr-xr-x  180 biezhi  staff   5760 Nov  6 11:34 terminal</span><br><span class="line">drwxr-xr-x  198 biezhi  staff   6336 Nov  6 11:34 terminator</span><br><span class="line">drwxr-xr-x  199 biezhi  staff   6368 Nov  6 11:34 termite</span><br><span class="line">drwxr-xr-x  162 biezhi  staff   5184 Nov  6 11:34 tilda</span><br><span class="line">drwxr-xr-x   19 biezhi  staff    608 Nov  6 11:34 tools</span><br><span class="line">drwxr-xr-x    3 biezhi  staff     96 Nov  6 11:34 xfce4terminal</span><br><span class="line">drwxr-xr-x  198 biezhi  staff   6336 Nov  6 11:34 xrdb</span><br></pre></td></tr></table></figure>

<p>下面需要导入配色方案。</p>
<p><a href="https://cdn.jsdelivr.net/gh/donxan/pics/20200331105423.png" target="_blank" rel="noopener"><img src="https://blog-biezhi-me-1251171175.cos.ap-shanghai.myqcloud.com/public/images/2018/11/import_color_schemes.png#align=left&display=inline&height=1284&originHeight=1284&originWidth=1846&status=done&style=none&width=1846" alt></a></p>
<p><a href="https://cdn.jsdelivr.net/gh/donxan/pics/20200331105446.png" target="_blank" rel="noopener"><img src="https://blog-biezhi-me-1251171175.cos.ap-shanghai.myqcloud.com/public/images/2018/11/choose_color_schemes.png#align=left&display=inline&height=896&originHeight=896&originWidth=1598&status=done&style=none&width=1598" alt></a></p>
<blockquote>
<p>选择  <code>schemes</code>   文件夹内的所有配色方案。</p>
</blockquote>
<p>导入成功后就可以选择一些流行的配色方案了。</p>
<p><a href="https://cdn.jsdelivr.net/gh/donxan/pics/20200331105506.png" target="_blank" rel="noopener"><img src="https://blog-biezhi-me-1251171175.cos.ap-shanghai.myqcloud.com/public/images/2018/11/select_color_scheme.png#align=left&display=inline&height=782&originHeight=782&originWidth=1228&status=done&style=none&width=1228" alt></a></p>
<p>选择配色后再去你的 iTerm 里面看会发现，已经好看了那么一点。</p>
<h2 id="安装字体"><a href="#安装字体" class="headerlink" title="安装字体"></a>安装字体</h2><p>为什么要安装字体呢？我们电脑的字体其实是可以用的，但是想要图标的这种字体就没法儿了：</p>
<p><a href="https://cdn.jsdelivr.net/gh/donxan/pics/20200331105528.png" target="_blank" rel="noopener"><img src="https://blog-biezhi-me-1251171175.cos.ap-shanghai.myqcloud.com/public/images/2018/11/hack_font.png#align=left&display=inline&height=166&originHeight=166&originWidth=1380&status=done&style=none&width=1380" alt></a></p>
<p>而这些图标字体其实是非  <code>ASCII</code>   码字体，在 iTerm2 中可以进行配置，所以先要安装这个字体。这款字体叫  <a href="https://github.com/ryanoasis/nerd-fonts" target="_blank" rel="noopener">nerd-fonts</a>，它支持下面这么多种图标。</p>
<p><a href="https://cdn.jsdelivr.net/gh/donxan/pics/20200331105636.png" target="_blank" rel="noopener"><img src="https://blog-biezhi-me-1251171175.cos.ap-shanghai.myqcloud.com/public/images/2018/11/sankey-glyphs-combined-diagram.svg#align=left&display=inline&height=604&originHeight=604&originWidth=956&status=done&style=none&width=956" alt></a></p>
<p>使用 brew 安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew tap caskroom/fonts</span><br><span class="line">brew cask install font-hack-nerd-font</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：安装的时候会去 Github 下载字体，如果你下载失败可能是被墙了。<br>那么可以通过  <code>https_proxy=127.0.0.1:1087 brew cask reinstall font-hack-nerd-font</code>   的方式安装，前提是你开启了代理。</p>
</blockquote>
<p>安装成功后需要在 iTerm2 中配置一下，在  <code>iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Text -&gt; Font -&gt; Change Font</code>   栏位中，Text 下面勾选  <code>Use a different font for non-ASCII text</code>，然后在  <code>Non-ASCII font</code>点击  <code>Change font</code>   修改：</p>
<p><a href="https://cdn.jsdelivr.net/gh/donxan/pics/20200331105735.png" target="_blank" rel="noopener"><img src="https://blog-biezhi-me-1251171175.cos.ap-shanghai.myqcloud.com/public/images/2018/11/settings_hack_font.png#align=left&display=inline&height=958&originHeight=958&originWidth=1836&status=done&style=none&width=1836" alt></a></p>
<p><a href="https://cdn.jsdelivr.net/gh/donxan/pics/20200331105824.png" target="_blank" rel="noopener"><img src="https://blog-biezhi-me-1251171175.cos.ap-shanghai.myqcloud.com/public/images/2018/11/choose_font.png#align=left&display=inline&height=662&originHeight=662&originWidth=1054&status=done&style=none&width=1054" alt></a></p>
<p>这里选择的字体是非 ASCII 码字符的字体，不要设置错了！选择好之后关闭即可。</p>
<h1 id="安装-zsh"><a href="#安装-zsh" class="headerlink" title="安装 zsh"></a>安装 zsh</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install zsh</span><br></pre></td></tr></table></figure>

<p><a href="https://cdn.jsdelivr.net/gh/donxan/pics/20200331110001.png" target="_blank" rel="noopener"><img src="https://blog-biezhi-me-1251171175.cos.ap-shanghai.myqcloud.com/public/images/2018/11/install_zsh.png#align=left&display=inline&height=1304&originHeight=1304&originWidth=1780&status=done&style=none&width=1780" alt></a></p>
<p>默认的 shell 是 bash，需要修改为 zsh：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo sh -c &quot;echo $(which zsh) &gt;&gt; /etc/shells&quot;</span><br><span class="line">chsh -s $(which zsh)</span><br></pre></td></tr></table></figure>

<p>修改时会提示你输入密码。</p>
<p>现在 zsh 安装完成了，安装虽简单，可配置麻烦啊，这你能忍吗？？当然不能！</p>
<p>于是，<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh-my-zsh</a>   出现了，有了它 zsh 配置起来就方便多了，来安装一下它。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure>

<p><a href="https://cdn.jsdelivr.net/gh/donxan/pics/20200331110029.png" target="_blank" rel="noopener"><img src="https://blog-biezhi-me-1251171175.cos.ap-shanghai.myqcloud.com/public/images/2018/11/install_oh_my_zsh.png#align=left&display=inline&height=1304&originHeight=1304&originWidth=1780&status=done&style=none&width=1780" alt></a></p>
<p>安装好之后可以看到界面发生了一点点变化，同时会产生一个名为  <code>.zshrc</code>   的配置文件，在用户家目录下面，我们以后主要就是修改它了。</p>
<h1 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h1><p>上面看到界面发生变化是因为  <code>oh-my-zsh</code>   默认帮我们配置了一个终端主题，你可以打开  <code>~/.zshrc</code>   文件看看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ZSH_THEME=&quot;robbyrussell&quot;</span><br></pre></td></tr></table></figure>

<p>这些主题文件存储在  <code>~/.oh-my-zsh/themes</code>   目录下，你也可以使用其他的。</p>
<p>为了实现前面想要的酷炫的终端主题，有人写了一个名为  <a href="https://github.com/bhilburn/powerlevel9k" target="_blank" rel="noopener">powerlevel9k</a>   的高颜值主题。</p>
<p><a href="https://blog-biezhi-me-1251171175.cos.ap-shanghai.myqcloud.com/public/images/2018/11/powerlevel9k.gif" target="_blank" rel="noopener"><img src="https://blog-biezhi-me-1251171175.cos.ap-shanghai.myqcloud.com/public/images/2018/11/powerlevel9k.gif#align=left&display=inline&height=514&originHeight=514&originWidth=1388&status=done&style=none&width=1388" alt></a></p>
<p>看到这么骚的操作，赶紧来安装吧！先将主题下载到本地的主题目录中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k</span><br></pre></td></tr></table></figure>

<p>然后修改  <code>zsh</code>   主题配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ZSH_THEME=<span class="string">"powerlevel9k/powerlevel9k"</span></span><br></pre></td></tr></table></figure>

<p>修改配置文件后一定要记得让配置生效，使用  <code>source</code>   命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>现在来看看终端变成什么样子了！</p>
<p><a href="https://cdn.jsdelivr.net/gh/donxan/pics/20200331110636.png" target="_blank" rel="noopener"><img src="https://blog-biezhi-me-1251171175.cos.ap-shanghai.myqcloud.com/public/images/2018/11/powerlevel9k.png#align=left&display=inline&height=1054&originHeight=1054&originWidth=1780&status=done&style=none&width=1780" alt></a></p>
<blockquote>
<p>我这里 iTerm2 的代码配色选择的是：<strong>Dracula</strong></p>
</blockquote>
<p>如果你喜欢这个风格的话可以不用进行其他主题设置了，为了让它看起来简洁一点，我在  <code>.zshrc</code>   配置中又添加了几行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POWERLEVEL9K_MODE=<span class="string">"nerdfont-complete"</span></span><br><span class="line"><span class="comment"># Customise the Powerlevel9k prompts</span></span><br><span class="line">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(ssh dir vcs newline status)</span><br><span class="line">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=()</span><br><span class="line">POWERLEVEL9K_PROMPT_ADD_NEWLINE=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>POWERLEVEL9K_MODE</code>：设置 powerlevel9k 的字体是我们前面下载的</li>
<li><code>POWERLEVEL9K_LEFT_PROMPT_ELEMENTS</code>：将前面居右的几个元素放在左边了</li>
<li><code>POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS</code>：右边不放置任何元素（如果你喜欢在右边也可以加）</li>
<li><code>POWERLEVEL9K_PROMPT_ADD_NEWLINE</code>：在每个提示之前添加换行符</li>
</ul>
<p>现在它变成这样了</p>
<p><a href="https://cdn.jsdelivr.net/gh/donxan/pics/20200331111124.png" target="_blank" rel="noopener"><img src="https://blog-biezhi-me-1251171175.cos.ap-shanghai.myqcloud.com/public/images/2018/11/simple_powerlevel9k.png#align=left&display=inline&height=1054&originHeight=1054&originWidth=1780&status=done&style=none&width=1780" alt></a></p>
<p>更详细的配置可以参考  <a href="https://github.com/bhilburn/powerlevel9k#prompt-customization" target="_blank" rel="noopener">Prompt Customization</a>   和  <a href="https://github.com/bhilburn/powerlevel9k/wiki/Stylizing-Your-Prompt" target="_blank" rel="noopener">Stylizing Your Prompt</a>。</p>
<h1 id="别名设置"><a href="#别名设置" class="headerlink" title="别名设置"></a>别名设置</h1><p>装好 zsh 之后顺手就添加一下我自己常用的别名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alias cls=&apos;clear&apos;</span><br><span class="line">alias ll=&apos;ls -l&apos;</span><br><span class="line">alias la=&apos;ls -a&apos;</span><br><span class="line">alias vi=&apos;vim&apos;</span><br><span class="line">alias ssr=&quot;http_proxy=http://127.0.0.1:1087 https_proxy=http://127.0.0.1:1087&quot;</span><br><span class="line">alias grep=&apos;grep --color=auto&apos;</span><br></pre></td></tr></table></figure>

<p>这样我们只需要输入较短的命令就可以干大事情了！当然这里你可以设置更多自己熟悉的一些操作，比如和编程语言相关的等等。</p>
<h1 id="zsh-插件推荐"><a href="#zsh-插件推荐" class="headerlink" title="zsh 插件推荐"></a>zsh 插件推荐</h1><p>zsh 那些酷插件可多了去了，我只推荐几个我认为比较实用的。</p>
<h2 id="extract"><a href="#extract" class="headerlink" title="extract"></a>extract</h2><p>这个插件是用于解压的，解压各种包命令多可能会手误，用它只需要输入  <code>x biezhi.zip</code>   即可。</p>
<p>在  <code>.zshrc</code>   的 plugins 中添加  <code>extract</code>   配置即可，它支持解压  <a href="https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/extract" target="_blank" rel="noopener">这些</a>   文件。</p>
<h2 id="autojump"><a href="#autojump" class="headerlink" title="autojump"></a>autojump</h2><p>这个插件主要帮助我们记住目录，一键直达。只要你脑海里有目录的几个字母，然后使用  <code>j [你知道的]</code>   按下 tab 即可，不用  <code>cd cd cd</code>   慢慢找。举个栗子：</p>
<p>我使用  <code>cd</code>   进入了  <code>blog</code>   这个目录，还进入了  <code>gitmoji</code>   目录。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd workspace/projects/github/blog</span><br></pre></td></tr></table></figure>

<p>如果用  <code>autojump</code>   的话，现在想进入  <code>blog</code>   目录只需要  <code>j blog</code>   即可，一般我们都会按下  <code>tab</code>   确定目录位置，当遇到多个类似的目录名的时候它会提示你输入数字进入。</p>
<p><strong>安装</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install autojump</span><br></pre></td></tr></table></figure>

<p>安装后添加到  <code>autojump</code>   到  <code>zsh</code>   的 插件配置（plugins）里，再追加一句命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] &amp;&amp; . $(brew --prefix)/etc/profile.d/autojump.sh</span><br></pre></td></tr></table></figure>

<p>让配置文件生效即可。</p>
<h2 id="zsh-syntax-highlighting"><a href="#zsh-syntax-highlighting" class="headerlink" title="zsh-syntax-highlighting"></a>zsh-syntax-highlighting</h2><p>zsh-syntax-highlighting 用于高亮你的 zsh 可用命令，比如输入  <code>sleep</code>、<code>cat</code>   这些命令的时候就会高亮（功能上确实没啥乱用）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>

<p>安装好就行了，不用在 plugins 中追加。</p>
<h2 id="zsh-autosuggestions"><a href="#zsh-autosuggestions" class="headerlink" title="zsh-autosuggestions"></a>zsh-autosuggestions</h2><p>这是一个神奇的终端自动提示插件，当你输入  <code>ps</code>   的时候它可能会出现  <code>ps -ef | grep helloworld</code>。是因为它会记住你曾经输入过的命令，当你再次输入前几个命令的时候帮你自动匹配，让你工作更高效。下面是一个演示：</p>
<p>你可以直接使用 brew 安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install zsh-autosuggestions</span><br></pre></td></tr></table></figure>

<h2 id="colors"><a href="#colors" class="headerlink" title="colors"></a>colors</h2><p><a href="https://github.com/athityakumar/colorls" target="_blank" rel="noopener">colors</a>   是一个 Ruby 实现的脚本，它可以配合 powerlevel9k 显示电脑上的文件图标（应该是通过后缀判断的），使用的效果如下：</p>
<p><a href="https://blog-biezhi-me-1251171175.cos.ap-shanghai.myqcloud.com/public/images/2018/11/colors.png" target="_blank" rel="noopener"><img src="https://blog-biezhi-me-1251171175.cos.ap-shanghai.myqcloud.com/public/images/2018/11/colors.png#align=left&display=inline&height=159&originHeight=159&originWidth=1154&status=done&style=none&width=1154" alt></a></p>
<p>安装后就可以使用了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gem install colorls</span><br></pre></td></tr></table></figure>

<h1 id="其他技巧"><a href="#其他技巧" class="headerlink" title="其他技巧"></a>其他技巧</h1><ul>
<li>连续按两次  <code>tab</code>   会补全列表，补全项可以使用  <code>ctrl+n/p/f/b</code>   上下左右切换</li>
<li>输入目录名即可进入，不用  <code>cd</code>   了，输入  <code>..</code>   即可到上级目录，返回上次目录输入  <code>-</code></li>
<li>输入  <code>d</code>   即可看到目录列表</li>
<li>智能的命令纠错功能（需开启  <code>ENABLE_CORRECTION</code>   配置）</li>
</ul>
<h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><p>这样配置后打开 VSCode 就变成这幅样子：</p>
<p><a href="https://cdn.jsdelivr.net/gh/donxan/pics/20200331111154.png" target="_blank" rel="noopener"><img src="https://blog-biezhi-me-1251171175.cos.ap-shanghai.myqcloud.com/public/images/2018/11/vscode_font.png#align=left&display=inline&height=186&originHeight=186&originWidth=1050&status=done&style=none&width=1050" alt></a></p>
<p>如何修复呢？只需要在 vscode 的配置文件中加入下面的配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;terminal.integrated.fontFamily&quot;: &quot;Hack Nerd Font&quot;,</span><br><span class="line">&quot;terminal.integrated.fontSize&quot;: 14,</span><br></pre></td></tr></table></figure>

<p>这样就会变成下面这个样子了。</p>
<p><a href="https://cdn.jsdelivr.net/gh/donxan/pics/20200331111212.png" target="_blank" rel="noopener"><img src="https://blog-biezhi-me-1251171175.cos.ap-shanghai.myqcloud.com/public/images/2018/11/vscode_new_font.png#align=left&display=inline&height=324&originHeight=324&originWidth=1986&status=done&style=none&width=1986" alt></a></p>
]]></content>
  </entry>
  <entry>
    <title>JavaScript基本语法01</title>
    <url>/posts/e1be9692/</url>
    <content><![CDATA[<p><img src="https://titanjun.oss-cn-hangzhou.aliyuncs.com/javascript/javascropt.jpeg" alt="JavaScript"></p>
<a id="more"></a>





<ul>
<li><code>JavaScript</code>是一种属于网络的脚本语言,已经被广泛用于Web应用开发,常用来为网页添加各式各样的动态功能,为用户提供更流畅美观的浏览效果</li>
<li>通常<code>JavaScript</code>脚本是通过嵌入在<code>HTML</code>中来实现自身的功能的<ul>
<li><code>JavaScript</code>是一种解释性脚本语言（代码不进行预编译）</li>
<li>主要用来向<code>HTML</code>（标准通用标记语言下的一个应用）页面添加交互行为 </li>
<li>可以直接嵌入<code>HTML</code>页面，但写成单独的js文件有利于结构和行为的分离 </li>
<li>跨平台特性，在绝大多数浏览器的支持下，可以在多种平台下运行（如<code>Windows</code>、<code>Linux</code>、<code>Mac</code>、<code>Android</code>、<code>iOS</code>等）。</li>
</ul>
</li>
<li><code>Javascript</code>脚本语言同其他语言一样，有它自身的基本数据类型，表达式和算术运算符及程序的基本程序框架</li>
</ul>
<h2 id="Javascript数据类型"><a href="#Javascript数据类型" class="headerlink" title="Javascript数据类型"></a><code>Javascript</code>数据类型</h2><ul>
<li><p>基本数据类型</p>
<ul>
<li>1、数字(Number)：包括浮点数与整数</li>
<li>2、字符串(String)：包括由任意数量字符组成的序列</li>
<li>3、布尔值(Boolean)：包括true和false</li>
<li>4、<code>Undefined</code>：当我们试图访问一个不存在的变量时，就会得到一个特殊的值<code>undefined</code>。除此之外，使用已定义却未赋值的变量也会如此，以为js会自动将变量在初始化之前的值设定为<code>undefined</code>。而<code>Undefined</code>类型的值只有一个，那就是undefined</li>
<li>5、<code>Null</code>：只包含一个值的特殊数据类型。所谓的<code>null</code>值，通常是没有值或空值，不代表任何东西。<code>null</code>与<code>undefined</code>最大的不同在于，被赋予<code>null</code>的变量通常被认为是已经定义了的，只不过它不代表任何东西。</li>
<li>6、<code>Symbol</code>: 是 ES6 引入了一种新的原始数据类型，表示独一无二的值</li>
</ul>
</li>
<li><p>引用数据类型</p>
<ul>
<li>对象(Object)、</li>
<li>数组(Array)、</li>
<li>函数(Function)</li>
</ul>
</li>
</ul>
<h2 id="JavaScript语法"><a href="#JavaScript语法" class="headerlink" title="JavaScript语法"></a>JavaScript语法</h2><h3 id="JavaScript输出"><a href="#JavaScript输出" class="headerlink" title="JavaScript输出"></a>JavaScript输出</h3><ul>
<li><code>JavaScript</code>可以通过不同的方式来输出数据：<ul>
<li>使用 <code>window.alert()</code> 弹出警告框。</li>
<li>使用 <code>document.write()</code> 方法将内容写到 HTML 文档中。</li>
<li>使用 <code>innerHTML</code> 写入到 HTML 元素。</li>
<li>使用 <code>console.log()</code> 写入到浏览器的控制台。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 使用 window.alert()</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 弹出警告框来显示数据</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.alert(<span class="number">5</span> + <span class="number">6</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 写到 HTML 文档</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="built_in">Date</span>());</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 操作 HTML 元素</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 使用 "id" 属性来标识 HTML 元素，并 innerHTML 来获取或插入元素内容</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">"段落已修改。"</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 在控制台打印数据</span></span></span><br><span class="line">    a = 5;</span><br><span class="line">    b = 6;</span><br><span class="line">    c = a + b;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(c);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="JavaScript注释"><a href="#JavaScript注释" class="headerlink" title="JavaScript注释"></a><code>JavaScript</code>注释</h3><ul>
<li><code>JavaScript</code>不会执行注释中的代码</li>
<li><code>JavaScript</code>中的注释语句和<code>iOS</code>中的一样<ul>
<li>单行注释以 <code>//</code> 开头</li>
<li>多行注释以 <code>/*</code> 开始，以 <code>*/</code> 结尾</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是单行注释</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这是多行注释</span></span><br><span class="line"><span class="comment">代码不会执行</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="分号"><a href="#分号" class="headerlink" title="分号;"></a>分号<code>;</code></h3><ul>
<li>分号用于分隔 JavaScript 语句。</li>
<li>通常我们在每条可执行的语句结尾添加分号。</li>
<li>使用分号的另一用处是在一行中编写多条语句</li>
<li>也可能看到不带有分号的案例, 在<code>JavaScript</code>中，用分号来结束语句是可选的, 不加分号亦可</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 有分号的情况</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不加分号的情况</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">5</span></span><br><span class="line"><span class="built_in">console</span>.log(num1)</span><br></pre></td></tr></table></figure>

<h2 id="数字Number"><a href="#数字Number" class="headerlink" title="数字Number"></a>数字<code>Number</code></h2><ul>
<li><code>JavaScript</code>中不区分整数值和浮点数值，所有数字均用浮点数值表示</li>
<li>JS采用<code>IEEE754</code>标准定义的64位浮点格式表示数字，这意味着它能表示的最大值是±1.7976031348623157×10308，最小值是±5×10-324</li>
<li>按照JS中的数字格式，能够表示的整数范围是-9007199254740992<del>9007199254740992（即 -253</del>253）</li>
<li>需要注意的是，JS中实际的操作（比如数组索引，位操作符）则是基于32位整数。</li>
</ul>
<h3 id="类型操作符typeof"><a href="#类型操作符typeof" class="headerlink" title="类型操作符typeof"></a>类型操作符<code>typeof</code></h3><p>当以下num定义后没有任何赋值的情况下num的类型是<code>Undefined</code>，值为<code>undefined</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义了一个名为num的变量</span></span><br><span class="line"><span class="keyword">var</span> num;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印变量num的值</span></span><br><span class="line"><span class="built_in">console</span>.log(num);  <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印变量的数据类型</span></span><br><span class="line"><span class="comment">//查看类型操作符typeof</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num);  <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>

<h3 id="进制数"><a href="#进制数" class="headerlink" title="进制数"></a>进制数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//八进制数以0开头</span></span><br><span class="line">num1 = <span class="number">0377</span>;</span><br><span class="line"><span class="comment">//打印出的是八进制0377的十进制形式</span></span><br><span class="line"><span class="built_in">console</span>.log(num1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//十六进制数以0x开头</span></span><br><span class="line">num1 = <span class="number">0xff</span>;</span><br><span class="line"><span class="comment">//打印出的是十六进制0xff的十进制形式</span></span><br><span class="line"><span class="built_in">console</span>.log(num1);</span><br></pre></td></tr></table></figure>

<h3 id="特殊值"><a href="#特殊值" class="headerlink" title="特殊值"></a>特殊值</h3><ul>
<li><code>Infinity</code>：代表的是超出js处理范围的数值，但它依然是一个数字<ul>
<li>任何数除以0结果为<code>Infinity</code></li>
<li><code>Infinity</code>与其他任何操作数执行任何算术运算的结果也是<code>Infinity</code></li>
</ul>
</li>
<li><code>NaN</code>：表示不是数字，但事实上它依然属于数字类型，只不过是一种特殊的数字罢了<ul>
<li>如果我们在算术运算中使用了不恰当的操作数，导致运算失败，就会得到<code>NaN</code></li>
<li><code>NaN</code>具有传染性，只要算术运算中存在一个<code>NaN</code>，整个运算就会失败</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">num1 = <span class="number">1e308</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num1); <span class="comment">//1e+308</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//超出表示范围</span></span><br><span class="line">num1 = <span class="number">1e309</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num1);  <span class="comment">//Infinity</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//任何数除以0结果为Infinity</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> / <span class="number">0</span>);  <span class="comment">//Infinity</span></span><br><span class="line"><span class="comment">//Infinity与其他任何操作数执行任何算术运算的结果也是Infinity</span></span><br><span class="line"><span class="built_in">console</span>.log(num1 * <span class="number">2</span>);  <span class="comment">//Infinity</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//正负Infinity相加的结果？</span></span><br><span class="line"><span class="comment">//结果为NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">Infinity</span> + (-<span class="literal">Infinity</span>));  <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">NaN</span>);  <span class="comment">//number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果我们在算术运算中使用了不恰当的操作数，导致运算失败，就会得到NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> * <span class="string">'f'</span>);  <span class="comment">//NaN</span></span><br><span class="line"><span class="comment">//NaN具有传染性，只要算术运算中存在一个NaN，整个运算就会失败</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> + <span class="number">2</span> + <span class="literal">NaN</span>);  <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure>

<h3 id="Math运算"><a href="#Math运算" class="headerlink" title="Math运算"></a><code>Math</code>运算</h3><p><code>JavaScript</code>用<code>Math</code>对象实现复杂的运算</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">3</span>)   <span class="comment">//8；2的3次幂</span></span><br><span class="line"><span class="built_in">Math</span>.round(<span class="number">.6</span>)  <span class="comment">//1.0；四舍五入</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">.6</span>)   <span class="comment">//1.0；向上取整</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="number">.6</span>)  <span class="comment">//0.0；向下取整</span></span><br><span class="line"><span class="built_in">Math</span>.abs(<span class="number">-5</span>)    <span class="comment">//5；求绝对值</span></span><br><span class="line"><span class="built_in">Math</span>.max(x,y,z) <span class="comment">//返回最大值</span></span><br><span class="line"><span class="built_in">Math</span>.min(x,y,z) <span class="comment">//返回最小值</span></span><br><span class="line"><span class="built_in">Math</span>.random()   <span class="comment">//生成一个大于等于0小于1.0的伪随机数</span></span><br><span class="line"><span class="built_in">Math</span>.PI         <span class="comment">//π；圆周率</span></span><br><span class="line"><span class="built_in">Math</span>.E          <span class="comment">//e；自然对数的底数</span></span><br><span class="line"><span class="built_in">Math</span>.sqrt(<span class="number">3</span>)    <span class="comment">//3的平方根</span></span><br><span class="line"><span class="built_in">Math</span>.pow(<span class="number">3</span>,<span class="number">1</span>/<span class="number">3</span>) <span class="comment">//3的立方根</span></span><br><span class="line"><span class="built_in">Math</span>.sin(<span class="number">0</span>)     <span class="comment">//三角函数。Math.cos(),Math.tan(),Math.sin(30/180*Math.PI)</span></span><br><span class="line"><span class="built_in">Math</span>.log(<span class="number">10</span>)    <span class="comment">//10的自然对数</span></span><br><span class="line"><span class="built_in">Math</span>.log(<span class="number">100</span>)/<span class="built_in">Math</span>.LN10 <span class="comment">//以10为底100的对数</span></span><br><span class="line"><span class="built_in">Math</span>.log(<span class="number">512</span>)/<span class="built_in">Math</span>.LN2 <span class="comment">//以2为底512的对数</span></span><br><span class="line"><span class="built_in">Math</span>.exp(<span class="number">3</span>)     <span class="comment">//e的3次幂</span></span><br></pre></td></tr></table></figure>

<h2 id="JavaScript布尔"><a href="#JavaScript布尔" class="headerlink" title="JavaScript布尔"></a>JavaScript布尔</h2><p>在<code>JavaScript</code>中有布尔值和<code>falsy</code>值和<code>truthy</code>值</p>
<ul>
<li>布尔（逻辑）只能有两个值：<code>true</code> 或 <code>false</code></li>
<li>所有的<code>Falsy</code>值，当进行逻辑判断时均为<code>false</code></li>
<li>除<code>Falsy</code>值之外的所有的值均为<code>Truthy</code>，当进行逻辑判断时均为<code>true</code><ul>
<li><code>Infinity</code>、空数组、”0”都是<code>Truthy</code>值</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> br = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> br2 = <span class="literal">false</span></span><br><span class="line"><span class="built_in">console</span>.log(br);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> br);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Falsy值包括：</span></span><br><span class="line"><span class="comment"> * 1、数字:0</span></span><br><span class="line"><span class="comment"> * 2、数字:NaN</span></span><br><span class="line"><span class="comment"> * 3、空字符串:""</span></span><br><span class="line"><span class="comment"> * 4、布尔值:false</span></span><br><span class="line"><span class="comment"> * 5、undefined</span></span><br><span class="line"><span class="comment"> * 6、null</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="判断函数"><a href="#判断函数" class="headerlink" title="判断函数"></a>判断函数</h3><ul>
<li><code>isNaN(info)</code>  判断值是否是NaN，如果<code>info===NaN</code>则返回<code>true</code>，否则返回<code>false</code></li>
<li><code>isFinite()</code>检测是否是一个既非<code>Infinity</code>也非<code>NaN</code>的数字</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// isNaN函数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">NaN</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="built_in">parseInt</span>(<span class="string">"abc"</span>)));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="number">123</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 	isFinite函数	</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isFinite</span>(<span class="literal">Infinity</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isFinite</span>(-<span class="literal">Infinity</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isFinite</span>(<span class="literal">NaN</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isFinite</span>(<span class="number">123</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>js中一对双引号或单引号之间的任何都会被视为一个字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"https://titanjun.top"</span>;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="string">"/"</span>;</span><br><span class="line"><span class="comment">//两个字符串相加，相当于拼接</span></span><br><span class="line"><span class="keyword">var</span> ret = str + arr;</span><br><span class="line"><span class="built_in">console</span>.log(ret);</span><br><span class="line"></span><br><span class="line"><span class="comment">//数字+字符串:将数字转换成字符串后相加拼接</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">ret = str + num;</span><br><span class="line"><span class="built_in">console</span>.log(ret);</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串</span></span><br><span class="line"><span class="keyword">var</span> jsString = <span class="string">"Hello,JavaScript"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> jsString)  <span class="comment">// string</span></span><br><span class="line"><span class="comment">//字符串长度</span></span><br><span class="line"><span class="keyword">var</span> s0 = jsString.length;  <span class="comment">//16,</span></span><br><span class="line"><span class="comment">// 第一个字符</span></span><br><span class="line"><span class="keyword">var</span> s1 = jsString.charAt(<span class="number">0</span>) ; <span class="comment">//"H",</span></span><br><span class="line"><span class="comment">// 最后一个字符</span></span><br><span class="line"><span class="keyword">var</span> s2 = jsString.charAt(s0 - <span class="number">1</span>)  <span class="comment">//"t",</span></span><br><span class="line"><span class="comment">//第2~4个字符</span></span><br><span class="line"><span class="keyword">var</span> s3 = jsString.substring(<span class="number">1</span>, <span class="number">4</span>) <span class="comment">//"ell",</span></span><br><span class="line"><span class="comment">//第2~4个字符</span></span><br><span class="line"><span class="keyword">var</span> s4 = jsString.slice(<span class="number">1</span>, <span class="number">4</span>)  <span class="comment">//"ell"</span></span><br><span class="line"><span class="comment">// 最后三个字符</span></span><br><span class="line"><span class="keyword">var</span> s5 = jsString.slice(<span class="number">-3</span>)  <span class="comment">//"ipt"</span></span><br><span class="line"><span class="comment">// 字符"a"首次出现的位置</span></span><br><span class="line"><span class="keyword">var</span> s6 = jsString.indexOf(<span class="string">"a"</span>)  <span class="comment">//7</span></span><br><span class="line"><span class="comment">// 字符"a"最后一次出现的位置</span></span><br><span class="line"><span class="keyword">var</span> s7 = jsString.lastIndexOf(<span class="string">"a"</span>)  <span class="comment">//9</span></span><br><span class="line"><span class="comment">// 字符"a"第二次出现的位置</span></span><br><span class="line"><span class="keyword">var</span> s8 = jsString.indexOf(<span class="string">"a"</span>, <span class="number">2</span>)  <span class="comment">//7</span></span><br><span class="line"><span class="comment">// 字符串分割成数组</span></span><br><span class="line"><span class="keyword">var</span> s9 = jsString.split(<span class="string">","</span>)    <span class="comment">//["Hello", "JavaScript"]</span></span><br><span class="line"><span class="comment">// 全文字符替换</span></span><br><span class="line"><span class="keyword">var</span> s10 = jsString.replace(<span class="string">"e"</span>, <span class="string">"E"</span>)  <span class="comment">//"HEllo,JavaScript"</span></span><br><span class="line"><span class="comment">// 全文转换为大写</span></span><br><span class="line"><span class="keyword">var</span> s11 = jsString.toUpperCase()  <span class="comment">//"HELLO,JAVASCRIPT"</span></span><br><span class="line"><span class="comment">// 全文转换成小写</span></span><br><span class="line"><span class="keyword">var</span> s12 = jsString.toLowerCase()  <span class="comment">//"hello,javascript"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试输出结果</span></span><br><span class="line"><span class="keyword">var</span> sArr = [s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; sArr.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(sArr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="日期Date"><a href="#日期Date" class="headerlink" title="日期Date"></a>日期Date</h2><ul>
<li>日期对象用于处理日期和时间</li>
<li>格林尼治时间(GTM):是英国郊区皇家格林尼治天文台的时间，因为地球自转的原因，不同经度上的时间是不相同的，格林尼治天文台是经度为0的地方。世界上发生的重大时间都是以格林尼治时间时间为标准的。</li>
<li>世界协调时间(UTC):世界时间。1970年1月1日0点。</li>
<li><code>ECMAScript</code>中的<code>Date</code>类型是在早期<code>Java</code>中的<code>java.util.Date</code>类的基础上构建的。为此<code>Date</code>类型使用自UTC1970年1月1日午夜（零时）开始经过的毫秒数保存时间的。该Date类型保存的日期能够精确到1970年1月1日之前和之后的285616年</li>
</ul>
<h3 id="创建Date"><a href="#创建Date" class="headerlink" title="创建Date"></a>创建Date</h3><p>创建时间使用构造函数法, <code>new Date()</code>, 不论<code>Date()</code>是否带参数，返回的都是当前时间</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、构造函数法--不传参数</span></span><br><span class="line"><span class="keyword">var</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> date1) <span class="comment">//Object类型</span></span><br><span class="line"><span class="built_in">console</span>.log(date1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、参数是一个表示时间的字符串</span></span><br><span class="line"><span class="comment">//格式：month day, year hours:minutes:seconds</span></span><br><span class="line"><span class="comment">//如果省略了小时、分钟、秒数，这些会被设置为0</span></span><br><span class="line"><span class="keyword">var</span> date2 = <span class="built_in">Date</span>(<span class="string">"2016-09-18"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> date2) <span class="comment">//String类型</span></span><br><span class="line"><span class="built_in">console</span>.log(date2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 参数是毫秒数</span></span><br><span class="line"><span class="comment">//返回中国标准时间</span></span><br><span class="line"><span class="keyword">var</span> date3 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(date3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 参数是(年,月,日,时,分,秒,毫秒)</span></span><br><span class="line"><span class="comment">//注意：年和月必须写，且月从0开始，日期从1开始</span></span><br><span class="line"><span class="keyword">var</span> date4 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2016</span>,<span class="number">09</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">1000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(date4)</span><br></pre></td></tr></table></figure>

<h3 id="Date对象方法"><a href="#Date对象方法" class="headerlink" title="Date对象方法"></a>Date对象方法</h3><h4 id="获取时间"><a href="#获取时间" class="headerlink" title="获取时间"></a>获取时间</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取年份</span></span><br><span class="line"><span class="built_in">console</span>.log(date.getFullYear());</span><br><span class="line"><span class="comment">//获取月份，注意0表示1月，依次类推</span></span><br><span class="line"><span class="built_in">console</span>.log(date.getMonth());</span><br><span class="line"><span class="comment">//获取日期</span></span><br><span class="line"><span class="built_in">console</span>.log(date.getDate());</span><br><span class="line"><span class="comment">//获取星期</span></span><br><span class="line"><span class="built_in">console</span>.log(date.getDay());</span><br><span class="line"><span class="comment">//获取小时</span></span><br><span class="line"><span class="built_in">console</span>.log(date.getHours());</span><br><span class="line"><span class="comment">//获取分钟</span></span><br><span class="line"><span class="built_in">console</span>.log(date.getMinutes());</span><br><span class="line"><span class="comment">//获取秒数</span></span><br><span class="line"><span class="built_in">console</span>.log(date.getSeconds());</span><br><span class="line"><span class="comment">//获取毫秒数</span></span><br><span class="line"><span class="built_in">console</span>.log(date.getMilliseconds());</span><br><span class="line"><span class="comment">//获取日期对象所表示的日期距离1970-01-01的毫秒数</span></span><br><span class="line"><span class="built_in">console</span>.log(date.getTime());</span><br></pre></td></tr></table></figure>

<h4 id="设置时间"><a href="#设置时间" class="headerlink" title="设置时间"></a>设置时间</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置年份</span></span><br><span class="line">date.setFullYear(<span class="number">2015</span>);</span><br><span class="line"><span class="comment">//设置月份</span></span><br><span class="line"><span class="comment">//注意：传入的月份大于11，则年份增加</span></span><br><span class="line">date.setMonth(<span class="number">8</span>);</span><br><span class="line"><span class="comment">//设置日期</span></span><br><span class="line"><span class="comment">//注意：如果传入的日期超过了该月应有的天数则会增加月份</span></span><br><span class="line">date.setDate(<span class="number">29</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：星期一般不用设置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置小时</span></span><br><span class="line"><span class="comment">//注意：如果传入的值超过23则增加日期</span></span><br><span class="line">date.setHours(<span class="number">13</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置分钟</span></span><br><span class="line"><span class="comment">//注意：如果传入的值超过了59则增加小时数</span></span><br><span class="line">date.setMinutes(<span class="number">56</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置秒数</span></span><br><span class="line"><span class="comment">//注意：传入的值超过59会增加分钟数</span></span><br><span class="line">date.setSeconds(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置毫秒数</span></span><br><span class="line"><span class="comment">//注意：传入的值超过999会增加秒数</span></span><br><span class="line">date.setMilliseconds(<span class="number">888</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date)</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置距离1970-01-01的毫秒数</span></span><br><span class="line">date.setTime(<span class="number">1308484904898</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date);</span><br></pre></td></tr></table></figure>

<h4 id="Date转换格式"><a href="#Date转换格式" class="headerlink" title="Date转换格式"></a>Date转换格式</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//转换成字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(date.toString())</span><br><span class="line"><span class="comment">//日期部分转换为字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(date.toDateString())</span><br><span class="line"><span class="comment">//把时间部分转换为字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(date.toTimeString())</span><br><span class="line"><span class="comment">//包含年月日时分秒</span></span><br><span class="line"><span class="built_in">console</span>.log(date.toLocaleString());</span><br><span class="line"><span class="comment">//包含年月日</span></span><br><span class="line"><span class="built_in">console</span>.log(date.toLocaleDateString());</span><br><span class="line"><span class="comment">//包含时分秒</span></span><br><span class="line"><span class="built_in">console</span>.log(date.toLocaleTimeString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 ISO 标准返回字符串的日期格式</span></span><br><span class="line"><span class="built_in">console</span>.log(date.toISOString())</span><br><span class="line"><span class="comment">//JSON 数据格式返回日期字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(date.toJSON())</span><br><span class="line"><span class="comment">//根据世界时，把 Date 对象转换为字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(date.toUTCString())</span><br></pre></td></tr></table></figure>

<h4 id="parse"><a href="#parse" class="headerlink" title="parse"></a>parse</h4><p>返回某日期距离1970年1月1日0点的毫秒数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Date.parse(dateString)</span></span><br><span class="line"><span class="comment">//参数：日期字符串  格式：2016-05-08  2015/05/08 12:00:00</span></span><br><span class="line"><span class="comment">//返回该日期距离1970年1月1日0点的毫秒数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>.parse(<span class="string">"2018-10-10"</span>));</span><br></pre></td></tr></table></figure>

<h4 id="Date间运算"><a href="#Date间运算" class="headerlink" title="Date间运算"></a>Date间运算</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2018-10-10 10:10:10"</span>);</span><br><span class="line"><span class="keyword">var</span> date2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2018-10-10 10:10:12"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//两个日期对象之间相差的毫秒数</span></span><br><span class="line"><span class="built_in">console</span>.log(date2 - date1) <span class="comment">// 2000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回两个日期字符串拼接后的字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(date2 + date1)  <span class="comment">// Mon Oct 10 2016 10:10:12 GMT+0800 (CST)Mon Oct 10 2016 10:10:10 GMT+0800 (CST)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> (date2 + date1))  <span class="comment">//string</span></span><br></pre></td></tr></table></figure>

<h2 id="数组Array"><a href="#数组Array" class="headerlink" title="数组Array"></a>数组Array</h2><ul>
<li>数组是值的有序集合</li>
<li><code>JavaScript</code>数组事务类型的:数组元素可以使任何类型, 同一数组中的不同元素也可以是不同类型</li>
<li>数组的元素也可以是对象或者其他数组</li>
<li><code>JavaScript</code>数组可能是稀疏的: 数组元素的索引不一定是连续的,之间可能有空缺</li>
<li>稀疏数组的<code>length</code>比任何元素的索引都要大</li>
<li><code>JavaScript</code>中的数组可以存储多个不同类型的数据</li>
</ul>
<h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><h4 id="直接量创建"><a href="#直接量创建" class="headerlink" title="直接量创建"></a>直接量创建</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字面量表示法</span></span><br><span class="line"><span class="comment">//1.1: 简单数组</span></span><br><span class="line"><span class="keyword">var</span> empty = [];   <span class="comment">//空数组</span></span><br><span class="line"><span class="keyword">var</span> pram = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>]  <span class="comment">//有三个数值的数组</span></span><br><span class="line"><span class="keyword">var</span> misc = [<span class="number">1.1</span>, <span class="literal">true</span>, <span class="string">"a"</span>] <span class="comment">//三个不同元素的数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.2: 数组中的直接量不一定是常量,也可能是表达式</span></span><br><span class="line"><span class="keyword">var</span> base = <span class="number">1024</span></span><br><span class="line"><span class="keyword">var</span> baseArr = [base, base + <span class="number">1</span>, base + <span class="number">2</span>, base + <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.3: 包含对象或数组</span></span><br><span class="line"><span class="keyword">var</span> array3 = [[<span class="number">1</span>, &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;], [<span class="number">2</span>, &#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">4</span>&#125;]]</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.4: 忽略中间量中的某个值,省略的元素将被赋予undefined</span></span><br><span class="line"><span class="keyword">var</span> undef1 = [<span class="number">1</span>, ,<span class="number">3</span>] <span class="comment">//三个元素,中间的为undefined</span></span><br><span class="line"><span class="keyword">var</span> undef2 = [, ,] <span class="comment">//2个元素都是undefined</span></span><br><span class="line"><span class="comment">//注: 数组直接量的语法允许游客选的结尾的逗号,故[, ,]只有2个元素</span></span><br></pre></td></tr></table></figure>

<h4 id="Array-创建"><a href="#Array-创建" class="headerlink" title="Array()创建"></a>Array()创建</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="comment">// 空数组</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>()</span><br><span class="line"><span class="comment">//指定数组长度</span></span><br><span class="line"><span class="keyword">var</span> a1 = <span class="keyword">new</span>  <span class="built_in">Array</span>(<span class="number">10</span>)</span><br><span class="line"><span class="comment">//显示创建</span></span><br><span class="line"><span class="keyword">var</span> a2 = <span class="keyword">new</span>  <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">"a"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3. 读写数组元素</span></span><br><span class="line"><span class="comment">//注: 1.数组是对象的特殊形式,故JavaScript的数组不存在越界报错的情况,只会取到undefined</span></span><br><span class="line"><span class="keyword">var</span> value = a2[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 数组的长度</span></span><br><span class="line"><span class="comment">//length属性为可读可写</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">var</span> arrLength = arr.length  <span class="comment">//6</span></span><br><span class="line">arr.length = <span class="number">4</span>   <span class="comment">//数组变为[1, 2, 3, 4]</span></span><br><span class="line">arr.length = <span class="number">0</span>  <span class="comment">// 删除所有元素,为[]</span></span><br><span class="line">arr.length = <span class="number">5</span>  <span class="comment">// 长度为5,但是没有元素,相当于new Array(5)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5. 数组元素的添加和删除</span></span><br><span class="line"><span class="comment">//5.1: 索引值添加</span></span><br><span class="line"><span class="keyword">var</span> a0 = []</span><br><span class="line">a0[<span class="number">0</span>] = <span class="number">3</span></span><br><span class="line">a0[<span class="number">1</span>] = <span class="string">"one"</span></span><br><span class="line"><span class="comment">//a0为[3, "one"]</span></span><br></pre></td></tr></table></figure>

<h3 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a>数组的方法</h3><p>主要介绍<code>ECMAScript</code>中的方法</p>
<h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><ul>
<li>0.不改变原数组</li>
<li>1.将数组所有的元素都转化成字符串,并连接在一起,返回生成后的字符串(如不指定分隔符默认使用逗号)</li>
<li>2.join是String.split()的逆向操作</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr0 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">var</span> join1 = arr0.join() <span class="comment">// "1,2,3,4"</span></span><br><span class="line"><span class="keyword">var</span> join2 = arr0.join(<span class="string">""</span>) <span class="comment">//"1234"</span></span><br><span class="line"><span class="keyword">var</span> join3 = arr0.join(<span class="string">"-"</span>)  <span class="comment">//"1-2-3-4"</span></span><br><span class="line"><span class="built_in">console</span>.log(join1,join2,join3)</span><br></pre></td></tr></table></figure>

<h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h4><ul>
<li>0.改变原数组</li>
<li>1.将数组中的元素颠倒顺序*/</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr0.reverse()  <span class="comment">//现在arr0为[4, 3, 2, 1]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr0)</span><br></pre></td></tr></table></figure>

<h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><ul>
<li>0.改变原数组</li>
<li>1.不带参数时,以字母表顺序排序</li>
<li>2.如果数组包含undefined,则会被排到数组的末尾</li>
<li>3.字母排序区分大小写,A &lt; a</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"tian"</span>, <span class="string">"quan"</span>, <span class="string">"jun"</span>)</span><br><span class="line">arr1.sort() <span class="comment">//arr1 = ["jun", "quan", "tian"]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1)</span><br><span class="line"></span><br><span class="line"><span class="comment">//条件比较</span></span><br><span class="line"><span class="keyword">var</span>  arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"ant"</span>, <span class="string">"Bug"</span>, <span class="string">"cat"</span>, <span class="string">"Dog"</span>)</span><br><span class="line">arr2.sort()  <span class="comment">//["Bug", "Dog", "ant", "cat"]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2)</span><br><span class="line"></span><br><span class="line"><span class="comment">//不区分大小写排序</span></span><br><span class="line">arr2.sort(<span class="function"><span class="keyword">function</span> (<span class="params">s, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = s.toLowerCase()</span><br><span class="line">    <span class="keyword">var</span> b = t.toLowerCase()</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b) <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr2)</span><br><span class="line"><span class="comment">//["ant", "Bug", "cat", "Dog"]</span></span><br></pre></td></tr></table></figure>

<h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><p>创建并返回一个新数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//0.不改变原数组</span></span><br><span class="line"><span class="keyword">var</span> arr4 = [<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> concat1 = arr4.concat() <span class="comment">//[0, 2, 3]</span></span><br><span class="line"><span class="keyword">var</span> concat2 = arr4.concat(<span class="number">1</span>, <span class="number">4</span>)  <span class="comment">//[0, 2, 3, 1, 4]</span></span><br><span class="line"><span class="keyword">var</span> concat3 = arr4.concat([<span class="number">1</span>, <span class="number">4</span>]) <span class="comment">//[0, 2, 3, 1, 4]</span></span><br><span class="line"><span class="keyword">var</span> concat4 = arr4.concat([<span class="number">1</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]) <span class="comment">//[0, 2, 3, 1, 4, 5, 6]</span></span><br><span class="line"><span class="keyword">var</span> concat5 = arr4.concat(<span class="number">1</span>, [<span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]) <span class="comment">//[0, 2, 3, 1, 4, [5, 6]]</span></span><br><span class="line"><span class="keyword">var</span> concatArr = [concat1, concat2, concat3, concat4, concat5]</span><br><span class="line"><span class="built_in">console</span>.log(concatArr)</span><br></pre></td></tr></table></figure>

<h4 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h4><ul>
<li>注意:</li>
<li>1.返回数组的部分数组</li>
<li>2.不改变原数组</li>
<li>3.两个参数,分别表示始末位置,含左不含右</li>
<li>4.1表示第一个元素,-1表示倒数第一个元素</li>
<li>5.只有一个参数,默认以此参数开始,到最后一个元素结束</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> slice1 = arr3.slice(<span class="number">0</span>,<span class="number">2</span>) <span class="comment">//[1, 2]</span></span><br><span class="line"><span class="keyword">var</span> slice2 = arr3.slice(<span class="number">3</span>) <span class="comment">//[4, 5]</span></span><br><span class="line"><span class="keyword">var</span> slice3 = arr3.slice(<span class="number">1</span>,<span class="number">-2</span>) <span class="comment">//[2, 3]</span></span><br><span class="line"><span class="keyword">var</span> slice4 = arr3.slice(<span class="number">-3</span>,<span class="number">-2</span>)  <span class="comment">//[3]</span></span><br><span class="line"><span class="keyword">var</span> sliceArr = [slice1, slice2, slice3, slice4]</span><br><span class="line"><span class="built_in">console</span>.log(sliceArr)</span><br></pre></td></tr></table></figure>

<h4 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h4><ul>
<li>1.在数组中插入或删除元素的通用方法</li>
<li>2.会修改原数组,会改变数组的索引值</li>
<li>3.两个参数,参数一:起始位置;参数二:处理元素的个数(可省略)</li>
<li>4.若省略第二个参数,默认从起始位置到最后</li>
<li>5.如果没有元素就返回空数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">var</span> splice1 = m.splice(<span class="number">4</span>)  <span class="comment">//返回[5, 6, 7], m 是[1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(m)</span><br><span class="line"><span class="keyword">var</span> splice2 = m.splice(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">//返回[2, 3], m 是[1, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(m)</span><br><span class="line"><span class="keyword">var</span> splice3 = m.splice(<span class="number">1</span>, <span class="number">1</span>) <span class="comment">//返回[4], m 是[1]</span></span><br><span class="line"><span class="built_in">console</span>.log(m)</span><br><span class="line"><span class="keyword">var</span> spliceArr = [splice1, splice2, splice3]</span><br><span class="line"><span class="built_in">console</span>.log(spliceArr)</span><br></pre></td></tr></table></figure>

<h4 id="push和pop"><a href="#push和pop" class="headerlink" title="push和pop"></a>push和pop</h4><ul>
<li>方法将数组当成栈使用</li>
<li>1.push方法在尾部添加一个或者多个元素,返回新的数组长度</li>
<li>2.pop删除数组的最后一个元素,减小数组的长度,返回删除的值</li>
<li>3.改变原数组的值和长度</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m0 = []</span><br><span class="line"><span class="keyword">var</span> pp1 = m0.push(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment">//[1, 2], 返回2</span></span><br><span class="line"><span class="keyword">var</span> pp2 = m0.pop()       <span class="comment">//[1], 返回2</span></span><br><span class="line"><span class="keyword">var</span> pp3 = m0.push(<span class="number">3</span>, <span class="number">4</span>)  <span class="comment">//[1, 3, 4], 返回3</span></span><br><span class="line"><span class="keyword">var</span> pp4 = m0.pop()       <span class="comment">//[1, 3],  返回4</span></span><br><span class="line"><span class="keyword">var</span> pp5 = m0.push([<span class="number">9</span>,<span class="number">0</span>]) <span class="comment">//[1, 3, [9, 0]], 返回3</span></span><br><span class="line"><span class="keyword">var</span> pp6 = m0.pop()       <span class="comment">//[1, 3], 返回[9, 0]</span></span><br><span class="line"><span class="keyword">var</span> pp7 = m0.pop()       <span class="comment">//[1], 返回3</span></span><br><span class="line"><span class="keyword">var</span> ppArr = [pp1, pp2, pp3, pp4, pp5, pp6, pp7]</span><br><span class="line"><span class="built_in">console</span>.log(ppArr)</span><br></pre></td></tr></table></figure>

<h4 id="unshift和shift"><a href="#unshift和shift" class="headerlink" title="unshift和shift"></a>unshift和shift</h4><ul>
<li>1.unshift在头部添加一个或者多个元素,返回长度</li>
<li>2.shift删除数组的第一个元素,返回删除的元素</li>
<li>3.改变原数组,改变原数组的索引</li>
<li>4.unshift插入多个元素时,试一次性插入的</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sh = []</span><br><span class="line"><span class="keyword">var</span> sh1 = sh.unshift(<span class="number">1</span>)  <span class="comment">//sh: [1], 返回: 1</span></span><br><span class="line"><span class="keyword">var</span> sh2 = sh.unshift(<span class="number">22</span>) <span class="comment">//sh: [1, 22], 返回: 2</span></span><br><span class="line"><span class="keyword">var</span> sh3 = sh.shift()     <span class="comment">//sh: [22], 返回: 22</span></span><br><span class="line"><span class="keyword">var</span> sh4 = sh.unshift(<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]) <span class="comment">//sh: [3, [4, 5], 1], 返回:  3</span></span><br><span class="line"><span class="keyword">var</span> sh5 = sh.shift()      <span class="comment">//sh: [[4, 5], 1], 返回: 3</span></span><br><span class="line"><span class="keyword">var</span> sh6 = sh.shift()      <span class="comment">//sh: [1], 返回: [4, 5]</span></span><br><span class="line"><span class="keyword">var</span> shiftArr = [sh1, sh2, sh3, sh4, sh5, sh6]</span><br><span class="line"><span class="built_in">console</span>.log(shiftArr)</span><br><span class="line"><span class="comment">//注: unshift插入多个元素时,试一次性插入的,例如:</span></span><br><span class="line">sh.unshift(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment">// 结果: [3, 4]</span></span><br><span class="line">sh.unshift(<span class="number">3</span>)</span><br><span class="line">sh.unshift(<span class="number">4</span>)</span><br><span class="line"><span class="comment">//结果: [4, 3]</span></span><br></pre></td></tr></table></figure>

<h4 id="toString和toLocalString"><a href="#toString和toLocalString" class="headerlink" title="toString和toLocalString"></a>toString和toLocalString</h4><ul>
<li>1.toString()将数组元素转化成字符串后,用都好链接输出</li>
<li>2.toString()和join()不加参数的返回的值是一样的</li>
<li>3.toLocalString()是toString()的本地化版本</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str0 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].toString() <span class="comment">//返回: "1,2,3"</span></span><br><span class="line"><span class="keyword">var</span> str1 = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>].toString()  <span class="comment">//返回: "a,b,c"</span></span><br><span class="line"><span class="keyword">var</span> str2 = [<span class="number">1</span>, [<span class="number">2</span>, <span class="string">"c"</span>]].toString()  <span class="comment">//返回: "1,2,c"</span></span><br><span class="line"><span class="keyword">var</span> str3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].toLocaleString()  <span class="comment">//返回: "1,2,3"</span></span><br><span class="line"><span class="keyword">var</span> strArr = [str0, str1, str2, str3, str4]</span><br><span class="line"><span class="built_in">console</span>.log(strArr)</span><br></pre></td></tr></table></figure>

<h3 id="ECMAScript5"><a href="#ECMAScript5" class="headerlink" title="ECMAScript5"></a><code>ECMAScript5</code></h3><ul>
<li>1.<code>ECMAScript5</code>定义了九个新的数组方法</li>
<li>2.大多数<code>ECMAScript5</code>数组方法的第一个参数是一个函数</li>
<li>2.第二个参数是可选的,如果有,则调用的函数被看作是第二个参数的方法</li>
<li>3.也就是说在调用函数时,传递进去的第二个参数作为它的this关键字的值来使用</li>
<li>4.<code>ECMAScript5</code>中的数组方法不会修改他们调用的原始数组</li>
<li>5.传递给这些方法的函数是可以改变这些数组的</li>
</ul>
<h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h4><ul>
<li>1.方法从头到尾遍历数组,为每个元素调用指定的函数</li>
<li>2.forEach使用三个参数调用该函数:数组元素,元素索引, 数组本身</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment">//求和</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">data1.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    sum += value</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//每个元素本身自加1</span></span><br><span class="line">data1.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, i, arr</span>) </span>&#123;</span><br><span class="line">    arr[i] = value + <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//[2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>

<h4 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h4><ul>
<li>1.返回一个新数组,不改变原数组</li>
<li>2.原数组若是稀疏数组,返回也是稀疏数组</li>
<li>3.具有相同的长度,相同的缺失元素</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr2 = data1.map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// [4, 9, 16, 25, 36]</span></span><br></pre></td></tr></table></figure>

<h4 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h4><p>逻辑判定,过滤数组</p>
<ul>
<li>1.返回原数组的一个子集</li>
<li>2.返回原数组符合条件的元素,组成新数组</li>
<li>3.会将稀疏数组压缩,返回的是稠密数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr3 = data1.filter(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt; <span class="number">3</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//[4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> arr4 = data2.filter(<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//[2, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data3 = [<span class="number">1</span>, <span class="number">2</span>, , , <span class="literal">null</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> arr5 = data3.filter(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x !== <span class="literal">undefined</span> &amp;&amp; x != <span class="literal">null</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr5)</span><br><span class="line"><span class="comment">//[1, 2, 5]</span></span><br></pre></td></tr></table></figure>

<h4 id="every和some"><a href="#every和some" class="headerlink" title="every和some"></a>every和some</h4><p>数组的逻辑判定</p>
<ul>
<li>1.对数组元素应用指定的函数进行判定</li>
<li>2.返回trur或者false</li>
<li>2.every()都为true返回true,否则返回false</li>
<li>3.some()都为false,返回false;有一个为true,返回true</li>
<li>4.一旦该方法确定了返回值,就会停止遍历数组</li>
<li>5.空数组,every()返回true,some()返回false</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data4 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> sum1 = data4.every(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//sum1 = true</span></span><br><span class="line"><span class="keyword">var</span> sum2 = data4.every(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//sum2 = false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum3 = data4.some(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//sum3 = true</span></span><br><span class="line"><span class="keyword">var</span> sum4 = data4.some(<span class="built_in">isNaN</span>)</span><br><span class="line"><span class="comment">//sum4 = false, data4不包含非整数值元素</span></span><br></pre></td></tr></table></figure>

<h4 id="reduce和reduceRigh"><a href="#reduce和reduceRigh" class="headerlink" title="reduce和reduceRigh"></a>reduce和reduceRigh</h4><ul>
<li>作用: 将数组元素进行组合生成单个值</li>
<li>1.reduce()需要两个参数;参数一:执行操作的函数;参数二:传递给函数的初始值</li>
<li>2.reduceRight()是倒叙操作,功能与reduce相同</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data5 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> sn0 = data5.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="comment">//15</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sn1 = data5.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * y</span><br><span class="line">&#125;, <span class="number">1</span>)</span><br><span class="line"><span class="comment">//120</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sn2 = data5.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt; y ? x : y</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="indexOf和lastIndexOf"><a href="#indexOf和lastIndexOf" class="headerlink" title="indexOf和lastIndexOf"></a>indexOf和lastIndexOf</h4><ul>
<li>1.搜索整个数组中具有给定值的元素,返回找到的第一个元素的索引,如果没有找到就返回-1</li>
<li>2.indexOf(),从前向后搜索,lastIndexOf()从后向前搜索</li>
<li>3.参数一:元素值; 参数二: 搜索的起始位置(可省略,默认从头开始)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data6 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"><span class="keyword">var</span> index1 = data6.indexOf(<span class="number">1</span>) <span class="comment">//1, data6[1] = 1</span></span><br><span class="line"><span class="keyword">var</span> index2 = data6.indexOf(<span class="number">3</span>) <span class="comment">//-1, 没有值为3的元素</span></span><br><span class="line"><span class="keyword">var</span> index3 = data6.lastIndexOf(<span class="number">1</span>) <span class="comment">//3, data6[3] = 1</span></span><br><span class="line"><span class="keyword">var</span> index4 = data6.indexOf(<span class="number">2</span>, <span class="number">1</span>)<span class="comment">//2, data6[2] = 2</span></span><br><span class="line"><span class="keyword">var</span> index5 = data6.lastIndexOf(<span class="number">2</span>, <span class="number">-1</span>)<span class="comment">//2, data6[2] = 2</span></span><br></pre></td></tr></table></figure>

<h3 id="判定一个位置对象是否为数组"><a href="#判定一个位置对象是否为数组" class="headerlink" title="判定一个位置对象是否为数组"></a>判定一个位置对象是否为数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="comment">// var isA = data.isArray()</span></span><br><span class="line"><span class="built_in">console</span>.log(data.isArray())</span><br></pre></td></tr></table></figure>

<h2 id="类型间的转换"><a href="#类型间的转换" class="headerlink" title="类型间的转换"></a>类型间的转换</h2><h3 id="Number"><a href="#Number" class="headerlink" title="Number()"></a>Number()</h3><p>将其他类型数据转成Number类型数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、Null--&gt;Number</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">null</span>));<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、Undefined--&gt;Number</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">undefined</span>));<span class="comment">//NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3、Boolean--&gt;Number</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">true</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">false</span>));<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4、String--&gt;Number</span></span><br><span class="line"><span class="comment">//如果字符串中只有数字、小数点、(最前面空格 正负号)则转换成对应的十进制数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"123"</span>));<span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"12.3"</span>));<span class="comment">//12.3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"+123"</span>));<span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"-123"</span>));<span class="comment">//-123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"   123"</span>));<span class="comment">//123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果是一个空字符串，结果是0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">""</span>));<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"   "</span>));<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果字符串中含有非数字，非正负号，转换失败，结果NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"123abc"</span>));<span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"123+456"</span>));<span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"abc"</span>));<span class="comment">//NaN</span></span><br></pre></td></tr></table></figure>

<h3 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt()"></a>parseInt()</h3><ul>
<li>会试图将其收到的任何输入值(通常是字符串）转成整数类型，如果转换失败就返回NaN。</li>
<li>转换规则：如果第一个非空白字符(空格、换行、tab)是数字或者正负号则开始转换，直到碰到第一个非数字字符停止转换。如果第一个非空白字符不是数字或者正负号，转换失败，结果是NaN.</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'-----parseInt------'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"123"</span>));<span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"+123"</span>));<span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"-123"</span>));<span class="comment">//-123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"  123"</span>));<span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"12a3"</span>));<span class="comment">//12</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"12.3"</span>));<span class="comment">//12</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"12 3"</span>));<span class="comment">//12</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"true"</span>)); <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"  .123"</span>)); <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"+-123"</span>)); <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure>

<h3 id="parseFloat"><a href="#parseFloat" class="headerlink" title="parseFloat()"></a>parseFloat()</h3><ul>
<li>会试图将其收到的任何输入值(通常是字符串）转成浮点数类型，如果转换失败就返回NaN。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="built_in">parseFloat</span>(<span class="string">"   2.5a"</span>) );<span class="comment">//2.5</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">parseFloat</span>(<span class="string">"  .56"</span>) ); <span class="comment">//0.56</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">parseFloat</span>(<span class="string">"  -.23"</span>)); <span class="comment">//- 0.23</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">parseFloat</span>(<span class="string">"   +.23 + .1"</span>) );<span class="comment">//0.23</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">parseFloat</span>(<span class="string">"  3.14.956"</span>) ); <span class="comment">//3.14</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">parseFloat</span>(<span class="string">"a3.14"</span>) ); <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure>

<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>其它基本类型转换成String类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Null--&gt;String</span></span><br><span class="line"><span class="keyword">var</span> str0 = <span class="string">"titan"</span> + <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str0); <span class="comment">//string</span></span><br><span class="line"><span class="built_in">console</span>.log(str0); <span class="comment">//titannull</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Undefined--&gt;String</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">"jun"</span> + <span class="literal">undefined</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str1); <span class="comment">//string</span></span><br><span class="line"><span class="built_in">console</span>.log(str1); <span class="comment">//junundefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Boolean--&gt;String</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="literal">true</span>.toString(); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str2);<span class="comment">//string</span></span><br><span class="line"><span class="built_in">console</span>.log(str2);<span class="comment">//"true"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span>.toString());<span class="comment">//"false"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Number--&gt;String</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> str3 = num.toString();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str3);<span class="comment">//string</span></span><br><span class="line"><span class="built_in">console</span>.log(str3);<span class="comment">//"10"</span></span><br></pre></td></tr></table></figure>

<h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean()"></a>Boolean()</h3><ul>
<li>其它基本类型转换成<code>Boolean</code>类型</li>
<li>绝大部分值在转换为布尔类型时都为<code>true</code>，但以下6中<code>falsy</code>值除外</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、""</span></span><br><span class="line"><span class="comment"> * 2、null</span></span><br><span class="line"><span class="comment"> * 3、undefined</span></span><br><span class="line"><span class="comment"> * 4、0</span></span><br><span class="line"><span class="comment"> * 5、NaN</span></span><br><span class="line"><span class="comment"> * 6、false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">""</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">null</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">undefined</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">0</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">NaN</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 都输出false</span></span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>JavaScript笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基本语法03</title>
    <url>/posts/fb0f7be/</url>
    <content><![CDATA[<p><img src="https://titanjun.oss-cn-hangzhou.aliyuncs.com/javascript/javascropt.jpeg" alt="JavaScript"></p>
<a id="more"></a>

<ul>
<li>书接上文<a href="https://www.titanjun.top/categories/JavaScript%E7%AC%94%E8%AE%B0/" target="_blank" rel="noopener">JavaScript基本语法</a>, 记录了<code>JavaScript</code>的记录了相关数据类型和函数等相关语法</li>
<li>这里主要记录浏览器对象模型(<code>BOM</code>), <code>window</code>对象和文档对象模型(<code>DOM</code>)</li>
</ul>
<h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><ul>
<li><code>BOM</code>:浏览器对象模型（<code>Browser Object Model</code>)，是一个用于访问浏览器和计算机屏幕的对象集合。我们可以通过全局对象<code>window</code>来访问这些对象。</li>
<li>所有浏览器都支持<code>window</code>对象, 它表示浏览器窗口</li>
<li>所有<code>JavaScript</code>全局对象、函数以及变量均自动成为<code>window</code>对象的成员</li>
<li>全局变量是<code>window</code>对象的属性</li>
<li>全局函数是<code>window</code>对象的方法</li>
</ul>
<h3 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h3><ul>
<li><code>window.document</code>: 是一个BOM对象，表示的是当前所载入的文档(即页面)，但它的方法和属性同时也属于DOM对象所涵盖的范围</li>
<li><code>window.frames</code>: 是当前页面中所有框架的集合</li>
<li><code>window.navigator</code>: 用于反应浏览器及其功能信息的对象</li>
<li><code>window.screen</code>: 提供浏览器以外的环境信息</li>
<li><code>window.location</code>: 用于获得当前页面的地址 (URL)，并把浏览器重定向到新的页面</li>
<li><code>window.history</code>: 获取浏览器的历史记录</li>
<li>以上对象在编写时可以一般不使用<code>window</code>这个前缀</li>
</ul>
<h4 id="Screen"><a href="#Screen" class="headerlink" title="Screen"></a>Screen</h4><p><code>Screen</code>中的相关属性的使用如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 提供浏览器以外的环境信息</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.screen)</span><br><span class="line"><span class="comment">// 输出: Screen &#123; availWidth: 2560, availHeight: 1417, width: 2560, height: 1440, colorDepth: 24, pixelDepth: 24, top: 0, left: 0, availTop: 23, availLeft: 0 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回屏幕的宽度，以像素计，减去界面特性，比如窗口任务栏</span></span><br><span class="line"><span class="built_in">console</span>.log(screen.availWidth)</span><br><span class="line"><span class="comment">// 输出: 2560</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回访问者屏幕的高度，以像素计，减去界面特性，比如窗口任务栏</span></span><br><span class="line"><span class="built_in">console</span>.log(screen.availHeight)</span><br><span class="line"><span class="comment">// 输出: 1417</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回总宽度 * 高度</span></span><br><span class="line"><span class="built_in">console</span>.log(screen.width + <span class="string">"*"</span> + screen.height)</span><br><span class="line"><span class="comment">// 输出: 2560*1440</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回色彩深度</span></span><br><span class="line"><span class="built_in">console</span>.log(screen.colorDepth)</span><br><span class="line"><span class="comment">// 输出: 24</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回色彩分辨率</span></span><br><span class="line"><span class="built_in">console</span>.log(screen.pixelDepth)</span><br><span class="line"><span class="comment">// 输出: 24</span></span><br></pre></td></tr></table></figure>

<h4 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h4><ul>
<li>用于获得当前页面的地址 (URL)，并把浏览器重定向到新的页面</li>
<li>常用的属性使用和介绍</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回web主机的域名和端口号</span></span><br><span class="line"><span class="built_in">console</span>.log(location.host)</span><br><span class="line"><span class="comment">// localhost:63342</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回 web 主机的域名</span></span><br><span class="line"><span class="built_in">console</span>.log(location.hostname)</span><br><span class="line"><span class="comment">// localhost</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回当前页面的路径和文件名</span></span><br><span class="line"><span class="built_in">console</span>.log(location.pathname)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回 web 主机的端口 （80 或 443）</span></span><br><span class="line"><span class="built_in">console</span>.log(location.port)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回所使用的 web 协议（http:// 或 https://）</span></span><br><span class="line"><span class="built_in">console</span>.log(location.protocol)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回当前页面的 URL</span></span><br><span class="line"><span class="built_in">console</span>.log(location.href)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置需要跳转的页面的URL</span></span><br><span class="line"><span class="built_in">window</span>.location.href = <span class="string">"https://www.titanjun.top/"</span></span><br></pre></td></tr></table></figure>

<p>常用的相关方法介绍</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在浏览器中默认是会缓存浏览记录的</span></span><br><span class="line"><span class="comment">// 刷新当前页面, 会缓存</span></span><br><span class="line"><span class="built_in">window</span>.location.reload()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刷新当前页面, 不带缓存</span></span><br><span class="line"><span class="built_in">window</span>.location.reload(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载新的页面</span></span><br><span class="line"><span class="built_in">window</span>.location.assign(<span class="string">"greenWindow.html"</span>)</span><br><span class="line"><span class="built_in">window</span>.location.assign(<span class="string">"https:www.titanjun.top"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换当前页面(注意：不会再浏览器的历史记录表中留下记录)</span></span><br><span class="line"><span class="built_in">window</span>.location.replace(<span class="string">"greenWindow.html"</span>)</span><br><span class="line"><span class="built_in">window</span>.location.replace(<span class="string">"https:www.titanjun.top"</span>)</span><br></pre></td></tr></table></figure>

<h4 id="History"><a href="#History" class="headerlink" title="History"></a>History</h4><p>包含浏览器的历史记录</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取历史记录的长度</span></span><br><span class="line"><span class="built_in">console</span>.log(history.length)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回到上一页面</span></span><br><span class="line"><span class="built_in">window</span>.history.back()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进入到下一页面</span></span><br><span class="line"><span class="built_in">window</span>.history.forward()</span><br><span class="line"></span><br><span class="line"><span class="comment">// go() 里面的参数表示跳转页面的个数 </span></span><br><span class="line"><span class="comment">// 例如 history.go(2) 表示前进一个页面</span></span><br><span class="line"><span class="built_in">window</span>.history.go(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// history.go(-1) 表示后退一个页面</span></span><br><span class="line"><span class="built_in">window</span>.history.go(<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Window相关方法"><a href="#Window相关方法" class="headerlink" title="Window相关方法"></a>Window相关方法</h3><h4 id="open-amp-close"><a href="#open-amp-close" class="headerlink" title="open&amp;close"></a>open&amp;close</h4><p><code>window.close()</code>: 关闭窗口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 用于打开一个新的浏览器窗口或查找一个已命名的窗口</span><br><span class="line">open(url?: string, target?: string, features?: string, replace?: boolean)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>url</code></td>
<td>一个可选的字符串，声明了要在新窗口中显示的文档的 URL。如果省略了这个参数，或者它的值是空字符串，那么新窗口就不会显示任何文档</td>
</tr>
<tr>
<td><code>target</code></td>
<td>一个可选的字符串，该字符串是一个由逗号分隔的特征列表，其中包括数字、字母和下划线，该字符声明了新窗口的名称。这个名称可以用作标记 <code>&lt;a&gt;</code> 和 <code>&lt;form&gt;</code> 的属性 target 的值。如果该参数指定了一个已经存在的窗口，那么<code>open()</code> 方法就不再创建一个新窗口，而只是返回对指定窗口的引用。在这种情况下，<code>features</code>将被忽略。</td>
</tr>
<tr>
<td><code>features</code></td>
<td>一个可选的字符串，声明了新窗口要显示的标准浏览器的特征。如果省略该参数，新窗口将具有所有标准特征。在窗口特征这个表格中，我们对该字符串的格式进行了详细的说明</td>
</tr>
<tr>
<td><code>replace</code></td>
<td>一个可选的布尔值。<code>true</code>装载到窗口的URL在窗口的浏览历史中创建一个新条目，<code>false</code>替换浏览历史中的当前条目</td>
</tr>
</tbody></table>
<p><code>window</code>中方法<code>open()</code>常用的特性</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>width</td>
<td>数值</td>
<td>新窗口的宽度, 不能超过100</td>
</tr>
<tr>
<td>height</td>
<td>数值</td>
<td>新窗口的高度, 不能超过100</td>
</tr>
<tr>
<td>top</td>
<td>数值</td>
<td>距离屏幕上方的像素</td>
</tr>
<tr>
<td>left</td>
<td>数值</td>
<td>距离屏幕左侧像素</td>
</tr>
<tr>
<td>toolbar</td>
<td>yes/no</td>
<td>是否显示工具栏, IE浏览器有效</td>
</tr>
<tr>
<td>location</td>
<td>yes/no</td>
<td>是否显示地址栏, IE浏览器有效</td>
</tr>
<tr>
<td>fullscreen</td>
<td>yes/no</td>
<td>全屏显示</td>
</tr>
</tbody></table>
<h4 id="onload-onunload"><a href="#onload-onunload" class="headerlink" title="onload/onunload"></a>onload/onunload</h4><p><code>onload</code>加载事件和<code>onunload</code>卸载事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"func()"</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">		<span class="comment">//onunload事件</span></span></span><br><span class="line"><span class="actionscript">		<span class="comment">//当页面完全卸载再触发，只有IE支持</span></span></span><br><span class="line"><span class="javascript">		<span class="built_in">window</span>.onunload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">			alert(<span class="string">"确定关闭"</span>);</span></span><br><span class="line">		&#125;;</span><br><span class="line"><span class="actionscript">		<span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">			<span class="built_in">window</span>.location.href = <span class="string">"red.html"</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">		<span class="comment">//load事件</span></span></span><br><span class="line"><span class="actionscript">		<span class="comment">//当页面加载完成的时候会触发该事件	</span></span></span><br><span class="line"><span class="javascript">		<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">			alert(<span class="string">"我在界面加载完后才显示"</span>);</span></span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">		alert(<span class="string">"页面加载中"</span>);</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="onscroll"><a href="#onscroll" class="headerlink" title="onscroll"></a>onscroll</h4><p>当窗口发生滚动会触发该事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"height:3000px"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是顶部<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"goOn()"</span> <span class="attr">style</span>=<span class="string">"position: fixed;right: 50px;bottom: 50px"</span>&gt;</span>返回顶部<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">		<span class="comment">//当窗口发生滚动会触发该事件</span></span></span><br><span class="line"><span class="javascript">		<span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">			<span class="built_in">console</span>.log(<span class="string">"滚动"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">			<span class="comment">//打印滚动高度</span></span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop||<span class="built_in">document</span>.body.scrollTop;</span></span><br><span class="line"><span class="javascript">			<span class="built_in">console</span>.log(scrollTop);</span></span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">		<span class="comment">//返回顶部</span></span></span><br><span class="line"><span class="actionscript">		<span class="function"><span class="keyword">function</span> <span class="title">goOn</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">			<span class="built_in">document</span>.documentElement.scrollTop = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">			<span class="built_in">document</span>.body.scrollTop = <span class="number">0</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="onresize"><a href="#onresize" class="headerlink" title="onresize"></a>onresize</h4><p>当浏览器发生缩放的时候就会反复触发resize事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">		<span class="comment">//当浏览器发生缩放的时候就会反复触发resize事件		</span></span></span><br><span class="line"><span class="javascript">		<span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> w = <span class="built_in">document</span>.documentElement.clientWidth || <span class="built_in">document</span>.body.clientWidth || <span class="built_in">window</span>.innerWidth;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> h = <span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">document</span>.body.clientHeight || <span class="built_in">window</span>.innerHeight;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">			<span class="built_in">console</span>.log(<span class="built_in">document</span>.documentElement.clientWidth, <span class="built_in">document</span>.body.clientWidth, <span class="built_in">window</span>.innerWidth, w);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">			<span class="built_in">console</span>.log(<span class="built_in">document</span>.documentElement.clientHeight, <span class="built_in">document</span>.body.clientHeight, <span class="built_in">window</span>.innerHeight, h);</span></span><br><span class="line">		&#125;;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="JS弹窗"><a href="#JS弹窗" class="headerlink" title="JS弹窗"></a>JS弹窗</h3><p>在<code>JavaScript</code>中创建三种消息框：警告框、确认框、提示框</p>
<h4 id="警告框"><a href="#警告框" class="headerlink" title="警告框"></a>警告框</h4><ul>
<li>警告框经常用于确保用户可以得到某些信息。</li>
<li>当警告框出现后，用户需要点击确定按钮才能继续进行操作</li>
</ul>
<p><img src="https://titanjun.oss-cn-hangzhou.aliyuncs.com/javascript/jsAlert.png?x-oss-process=style/titanjun" alt="Alert"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"showAlert()"</span>&gt;</span>点击显示警告框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">showAlert</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">'你好, 这是一个警告框!'</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="确认框"><a href="#确认框" class="headerlink" title="确认框"></a>确认框</h4><ul>
<li>确认框通常用于验证是否接受用户操作。</li>
<li>当确认卡弹出时，用户可以点击 “确认” 或者 “取消” 来确定用户操作。</li>
<li>当你点击 “确认”, 确认框返回<code>true</code>， 如果点击 “取消”, 确认框返回<code>false</code></li>
</ul>
<p><img src="https://titanjun.oss-cn-hangzhou.aliyuncs.com/javascript/jsconfirm.png?x-oss-process=style/titanjun" alt="confirm"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"showConfirm()"</span>&gt;</span>点击显示确认框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">showConfirm</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> action = <span class="string">''</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> con = confirm(<span class="string">'你好, 这是一个警告框!'</span>)</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (con == <span class="literal">true</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                action = <span class="string">'选择了确认'</span></span></span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                action = <span class="string">'选择了取消'</span></span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(action)</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="提示框"><a href="#提示框" class="headerlink" title="提示框"></a>提示框</h4><ul>
<li>提示框经常用于提示用户在进入页面前输入某个值。</li>
<li>当提示框出现后，用户需要输入某个值，然后点击确认或取消按钮才能继续操纵。</li>
<li>如果用户点击确认，那么返回值为输入的值。如果用户点击取消，那么返回值为<code>null</code></li>
</ul>
<p><img src="https://titanjun.oss-cn-hangzhou.aliyuncs.com/javascript/jsproptm.png?x-oss-process=style/titanjun" alt="image"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"showPrompt()"</span>&gt;</span>点击显示提示框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">showPrompt</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> action = <span class="string">''</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> person = prompt(<span class="string">'请输入你的名字'</span>, <span class="string">'titanjun'</span>)</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (person != <span class="literal">null</span> &amp;&amp; person != <span class="string">""</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                action = <span class="string">"你好: "</span> + person</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(action)</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="JS计时器"><a href="#JS计时器" class="headerlink" title="JS计时器"></a>JS计时器</h3><ul>
<li>在<code>JavaScript</code>中有两种计时方式, 间歇性计时器和延迟性定时器</li>
<li><code>setInterval()</code>和<code>setTimeout()</code>是<code>HTML DOM Window</code>对象的两个方法</li>
<li>两个方法可以不使用<code>window</code>前缀，直接使用函数</li>
</ul>
<h4 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h4><ul>
<li>间隔指定的毫秒数不停地执行指定的代码</li>
<li>第一个参数是函数, 第二个参数间隔的毫秒数, 1000 毫秒是一秒</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// time不是定时器的名字, 只是定时器的编号, 是一个number类型</span></span><br><span class="line"><span class="keyword">var</span> time = <span class="built_in">window</span>.setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"titanjun.top"</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> time)</span><br></pre></td></tr></table></figure>

<ul>
<li>在开启定时器后, 如何让定时器停止工作?</li>
<li><code>clearInterval()</code>方法用于停止<code>setInterval()</code>方法执行的函数代码</li>
<li>一旦定时器停止工作后, 就必须重新启动定时器, 且定时器不能暂停, 只能停止和重启</li>
<li>要使用<code>clearInterval()</code>方法, 在创建计时方法时你必须使用全局变量</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"closeInterver()"</span>&gt;</span>关闭定时器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//setInterval(函数名,时间)</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 功能：创建一个间歇性定时器，每间隔参数二时间执行一次参数一函数</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 返回值：定时器的id，可以通过该id关闭定时器</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// time不是定时器的名字, 只是定时器的编号, 是一个number类型</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> time = <span class="built_in">window</span>.setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"titanjun.top"</span>)</span></span><br><span class="line">        &#125;, 1000)</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> time)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 关闭定时器</span></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">closeInterver</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//注：js中没有恢复定时器一说，当你停止定时器之后，定时器就会被删掉，想要继续的话，直接新建一个定时器。</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.clearInterval(time)</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h4><p>在指定的毫秒数后执行指定代码, 且只执行一次</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//setTimeout(函数名，时间)</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//功能：参数2时间以后再执行参数1函数</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//返回值：定时器的id</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        alert(<span class="string">"创建定时器，3秒后执行名为func的函数"</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> timer = setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"titanjun.top"</span>)</span></span><br><span class="line">        &#125;, 3000)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 关闭定时器</span></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">closeTimer</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.clearTimeout(timer)</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><ul>
<li>当网页被加载时，浏览器会创建页面的文档对象模型（<code>Document Object Model</code>）</li>
<li><code>DOM</code>是访问HTML和操作<code>HTML</code>的标准</li>
<li>通过可编程的对象模型，<code>JavaScript</code>获得了足够的能力来创建动态的<code>HTML</code><ul>
<li><code>JavaScript</code>能够改变页面中的所有<code>HTML</code>元素</li>
<li><code>JavaScript</code>能够改变页面中的所有<code>HTML</code>属性</li>
<li><code>JavaScript</code>能够改变页面中的所有<code>CSS</code>样式</li>
<li><code>JavaScript</code>能够对页面中的所有事件做出反应</li>
</ul>
</li>
<li><code>HTML DOM</code>模型被构造为对象的树</li>
</ul>
<p><img src="https://titanjun.oss-cn-hangzhou.aliyuncs.com/javascript/domlisten.png?x-oss-process=style/titanjun" alt="domlisten"></p>
<ul>
<li>DOM节点层级关系(DOM树)<ul>
<li>1、父节点(<code>parent node</code>)：父节点拥有任意数量的子节点</li>
<li>2、子节点(<code>child node</code>)：子节点只能拥有一个父节点</li>
<li>3、兄弟节点(<code>sibling node</code>)：拥有相同父节点的同级节点</li>
<li>4、根节点(<code>root node</code>)：一个<code>HTML</code>文档一般只有一个根节点，根节点没有父亲节点，是最上层的节点</li>
<li>祖先节点：包含子节点的节点都可以叫做祖先节点，其中包括了父节点</li>
<li>后代节点：一个节点内包含的所有节点，叫做后代节点，其中包括了子节点</li>
</ul>
</li>
<li>DOM节点的分类<ul>
<li>1、文档节点</li>
<li>2、标签(元素)节点</li>
<li>3、属性节点</li>
<li>4、文本节点</li>
<li>5、注释节点</li>
</ul>
</li>
</ul>
<p><img src="https://titanjun.oss-cn-hangzhou.aliyuncs.com/javascript/domcategory.png?x-oss-process=style/titanjun" alt="domcategory"></p>
<h3 id="获取HTML标签"><a href="#获取HTML标签" class="headerlink" title="获取HTML标签"></a>获取HTML标签</h3><p>在<code>JavaScript</code>中需要操作<code>HTML</code>标签, 首先要获取该标签, 这里介绍三种方法</p>
<ul>
<li>通过<code>id</code>找到<code>HTML</code>元素</li>
<li>通过标签名找到<code>HTML</code>元素</li>
<li>通过类名找到<code>HTML</code>元素</li>
<li>通过<code>name</code>属性找到<code>HTML</code>元素</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--id div--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"idDiv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--classs div--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"class1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"class1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"class1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"class1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--input--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"inputText"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"inputText"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"inputText"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--JavaScript--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 1. 根据元素id获取元素节点</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'-------getElementById--------'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> idDiv = <span class="built_in">document</span>.getElementById(<span class="string">'idDiv'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(idDiv)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> idDiv)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 2. 根据元素class属性获取元素节点, 返回数组</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取相同class属性的元素节点列表, 注意：此方法不支持IE8以下</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'-----------getElementsByClassName------------------'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> classDivs = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'class1'</span>)</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; classDivs.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(classDivs[i])</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 3.根据标签名来获取元素节点的结合, 返回数组</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'-----------getElementsByTagName------------------'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> tagNameDics = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tagNameDics.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(tagNameDics[i])</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 4. 根据name属性值来获取元素节点的集合, 返回数组</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'------------getElementsByName--------------------'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> nameDivs = <span class="built_in">document</span>.getElementsByName(<span class="string">'inputText'</span>)</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nameDivs.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(nameDivs[i])</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="获取属性节点"><a href="#获取属性节点" class="headerlink" title="获取属性节点"></a>获取属性节点</h3><ul>
<li>标签的属性分官方定义的属性和自定义属性</li>
<li>官方定义的属性可用点语法获取属性值</li>
<li>自定义属性只能通过<code>getAttribute</code>方法</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">id</span>=<span class="string">"in"</span> <span class="attr">placeholder</span>=<span class="string">"titanjun.top"</span> <span class="attr">blog</span>=<span class="string">"titanjun"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> input = <span class="built_in">document</span>.getElementById(<span class="string">'in'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(input)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 1. 获取官方定义的属性节点可以直接使用点语法, 用法: 元素节点.属性名</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 得到元素对应的属性值</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> inType = input.type</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(inType)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(input.placeholder)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 修改元素对应的属性值</span></span></span><br><span class="line"><span class="actionscript">        input.placeholder = <span class="string">"https://www.titanjun.top"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'-----------getAttribute-----------'</span>)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 2. getAttribute方法, 可获取官方定义的属性和自定义的属性</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(input.getAttribute(<span class="string">'placeholder'</span>))</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> blog = input.getAttribute(<span class="string">'blog'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(blog)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'-----------setAttribute-----------'</span>)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 修改元素对应的属性名</span></span></span><br><span class="line"><span class="actionscript">        input.setAttribute(<span class="string">'blog'</span>, <span class="string">'titan'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(input)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'-----------removeEventListener-----------'</span>)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 移除元素节点中的某个属性节点, 某些低版本浏览器不支持</span></span></span><br><span class="line"><span class="actionscript">        input.removeAttribute(<span class="string">'blog'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(input)</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="获取文本节点"><a href="#获取文本节点" class="headerlink" title="获取文本节点"></a>获取文本节点</h3><ul>
<li><code>innerHTML</code>: 从对象的开始标签到结束标签的全部内容,不包括本身Html标签</li>
<li><code>outerHTML</code>: 除了包含innerHTML的全部内容外, 还包含对象标签本身</li>
<li><code>innerText</code>: 从对象的开始标签到结束标签的全部的文本内容</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        这是一个div盒子</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> jsDiv = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 1. 元素节点.innerHTML</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//从对象的开始标签到结束标签的全部内容,不包括本身Html标签</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'--------innerHTML--------'</span>)</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> inner = jsDiv.innerHTML</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(jsDiv)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> jsDiv)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 2. 元素节点.outerHTML</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//除了包含innerHTML的全部内容外, 还包含对象标签本身</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'--------innerHTML--------'</span>)</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> outer = jsDiv.outerHTML</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(outer)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> outer)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 3. 元素节点.innerText</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//从对象的开始标签到结束标签的全部的文本内容</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'--------innerHTML--------'</span>)</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> text = jsDiv.innerText</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(text)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> text)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 修改</span></span></span><br><span class="line"><span class="actionscript">        jsDiv.innerText = <span class="string">"https://www.titanjun.top"</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        jsDiv.innerHTML = "<span class="tag">&lt;<span class="name">h2</span>&gt;</span>https://www.titanjun.top<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>"</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="读写行间样式表"><a href="#读写行间样式表" class="headerlink" title="读写行间样式表"></a>读写行间样式表</h3><p>获取像是表中的样式属性的属性值, 常用有两种方式</p>
<ul>
<li>方法一: 元素节点.style.样式属性名</li>
<li>方法二: 元素节点.style[“样式属性名”]</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"width: 100px; height: 100px; background-color: red"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"changeColor()"</span>&gt;</span>换颜色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取元素节点</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> jsDiv = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取style属性节点</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> divStyle = jsDiv.style</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log(divStyle)</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取像是表中的样式属性的属性值</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(divStyle.width)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(jsDiv.style[<span class="string">"height"</span>])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 设置样式表中样式属性的属性值</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 元素节点.style.样式属性名 = 样式属性值</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// background-color --- backgroundColor</span></span></span><br><span class="line"><span class="actionscript">        jsDiv.style.backgroundColor = <span class="string">'green'</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">changeColor</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> r = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> g = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> b = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> colorStr = <span class="string">"rgb("</span> + r + <span class="string">", "</span> + g + <span class="string">", "</span> + b + <span class="string">")"</span>;</span></span><br><span class="line">            jsDiv.style.backgroundColor = colorStr</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>设置样式表中样式属性的属性值时, 样式属性名遵循驼峰命名规则</li>
<li><code>HTML</code>中的-号去掉，-号后面的单词首字母大写</li>
<li>一般情况下, <code>css</code>的样式属性中出现”-“好, 则对应的<code>style</code>属性是: 去掉”-“号后面单词的第一个字母大写. 如果没有”-“号, 则两者一样</li>
</ul>
<table>
<thead>
<tr>
<th>CSS样式属性</th>
<th>Style对象属性</th>
</tr>
</thead>
<tbody><tr>
<td>color</td>
<td>color</td>
</tr>
<tr>
<td>font-size</td>
<td>fontSize</td>
</tr>
<tr>
<td>font-family</td>
<td>fontFamily</td>
</tr>
<tr>
<td>background-color</td>
<td>backgroundColor</td>
</tr>
<tr>
<td>background-image</td>
<td>backgroundImage</td>
</tr>
<tr>
<td>display</td>
<td>display</td>
</tr>
</tbody></table>
<h3 id="节点常用属性"><a href="#节点常用属性" class="headerlink" title="节点常用属性"></a>节点常用属性</h3><ul>
<li>在<code>DOM</code>中，每个节点都是一个对象</li>
<li>对象拥有方法和属性，并可通过<code>JavaScript</code>进行访问和操作</li>
<li>三个重要的节点属性是：<code>nodeName</code>, <code>nodeValue</code>, <code>nodeType</code></li>
</ul>
<table>
<thead>
<tr>
<th>节点类型</th>
<th>nodeName</th>
<th>nodeType</th>
<th>nodeValue</th>
</tr>
</thead>
<tbody><tr>
<td>元素节点</td>
<td>元素名称</td>
<td>1</td>
<td>null</td>
</tr>
<tr>
<td>属性节点</td>
<td>属性名称</td>
<td>2</td>
<td>属性值</td>
</tr>
<tr>
<td>文本节点</td>
<td>#text</td>
<td>3</td>
<td>文本内容不包括html</td>
</tr>
<tr>
<td>注释节点</td>
<td>#comment</td>
<td>8</td>
<td>注释内容</td>
</tr>
<tr>
<td>文档节点</td>
<td>#document</td>
<td>9</td>
<td>null</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第一个P<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第二个P<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第三个P<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第四个P<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"put"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"in"</span> <span class="attr">placeholder</span>=<span class="string">"https://www.titanjun.top"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 节点共有的属性：nodeName、nodeType、nodeValue</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">'box1'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(div1)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(div1.nodeName, div1.nodeType, div1.nodeValue)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 1. 获取当前元素节点的所有的子节点</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> childNodesArr = div1.childNodes</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(childNodesArr)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 2. 获取当前元素节点的第一个子节点</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> firstChildNode = div1.firstChild</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(firstChildNode)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 3. 获取当前节点的最后一个节点</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> lastChhildNode = div1.lastChild</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(lastChhildNode)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 4. 获取该节点文档的根节点, 相当于document</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> rootNode = div1.ownerDocument</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(rootNode)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 5. 获取当前节点的父节点</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> parentNode = div1.parentNode</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(parentNode)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 6. 获取当前节点的前一个同级节点</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div2 = <span class="built_in">document</span>.getElementById(<span class="string">'box2'</span>)</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> previousNode = div2.previousSibling</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(previousNode)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 7. 获取当前节点的后一个同级节点</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> nextNode = div2.nextSibling</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(nextNode)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 8. 获取当前节点的所有属性节点</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> jsInput = <span class="built_in">document</span>.getElementById(<span class="string">'put'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(jsInput.attributes)</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="节点动态操作"><a href="#节点动态操作" class="headerlink" title="节点动态操作"></a>节点动态操作</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>titanjun<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>titanking<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 创建元素节点</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div1 = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span></span><br><span class="line"><span class="actionscript">        div1.id = <span class="string">'box1'</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(div1)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 将一个新节点添加到某个节点的子节点列表的末尾上</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//父节点.appendChild(子节点)</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.body.appendChild(div1)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 将新节点添加到父节点的某个子节点的前面</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> jsP = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>)</span></span><br><span class="line"><span class="actionscript">        jsP.innerHTML = <span class="string">"https://www.titanjun.top"</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//父节点.insertBefore(新节点, 子节点)</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> jsD = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>)</span></span><br><span class="line">        jsD.insertBefore(jsP, jsD.childNodes[3])</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(jsD)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 创建文本节点</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> jsStr = <span class="built_in">document</span>.createTextNode(<span class="string">'/titanjun.top'</span>)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 添加文本节点</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> jsP2 = jsD.childNodes[<span class="number">1</span>]</span></span><br><span class="line">        jsP2.appendChild(jsStr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 替换节点, 将父节点中的某个子节点替换成新的节点</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> replaceDiv = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span></span><br><span class="line"><span class="actionscript">        replaceDiv.id = <span class="string">'box2'</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//父节点.replaceChild(新节点, 子节点)</span></span></span><br><span class="line">        div1.parentNode.replaceChild(replaceDiv, div1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 复制节点</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 只复制本身</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> copyDiv1 = jsD.cloneNode()</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(copyDiv1)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 复制本身和子节点</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(jsD.cloneNode(<span class="literal">true</span>))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 删除节点, 删除父节点下对应的子节点</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//父节点.removeChild(子节点)</span></span></span><br><span class="line">        replaceDiv.parentNode.removeChild(replaceDiv)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 参照物父元素</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//当某个元素的父元素或以上元素都未进行CSS定位时，则返回body元素，也就是说元素的偏移量（offsetTop、offsetLeft）等属性是以body为参照物的</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//当某个元素的父元素进行了CSS定位时（absolute或者relative），则返回父元素，也就是说元素的偏移量是以父元素为参照物的</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//当某个元素及其父元素都进行CSS定位时，则返回距离最近的使用了CSS定位的元素</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> temp = jsD.childNodes[<span class="number">1</span>].offsetParent</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(temp)</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>JavaScript笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>语法</tag>
      </tags>
  </entry>
</search>
