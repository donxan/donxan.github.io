<!DOCTYPE html>
<html lang="zh-Hans">
<head>

    <!--[if lt IE 9]>
        <style>body {display: none; background: none !important} </style>
        <meta http-equiv="Refresh" Content="0; url=//outdatedbrowser.com/" />
    <![endif]-->

<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge, chrome=1" />
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<meta name="format-detection" content="telephone=no" />
<meta name="author" content="RuningTitan" />



<meta name="description" content="一. ScrollView 记住ScrollView必须有一个确定的高度才能正常工作，因为它实际上所做的就是将一系列不确定高度的子组件装进一个确定高度的容器（通过滚动操作） 要给一个ScrollView确定一个高度的话，要么直接给它设置高度（不建议），要么确定所有的父容器都有确定的高度">
<meta name="keywords" content="CSS,ScrollView,ListView">
<meta property="og:type" content="article">
<meta property="og:title" content="ReactNaive之ScrollView和ListView">
<meta property="og:url" content="https://titanjun.top/2018/01/03/ReactNaive之ScrollView和ListView">
<meta property="og:site_name" content="RuningTitan&#39;s Blog">
<meta property="og:description" content="一. ScrollView 记住ScrollView必须有一个确定的高度才能正常工作，因为它实际上所做的就是将一系列不确定高度的子组件装进一个确定高度的容器（通过滚动操作） 要给一个ScrollView确定一个高度的话，要么直接给它设置高度（不建议），要么确定所有的父容器都有确定的高度">
<meta property="og:locale" content="zh-Hans">
<meta property="og:image" content="http://upload-images.jianshu.io/upload_images/4122543-45456c9ba9799576.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/200">
<meta property="og:updated_time" content="2018-03-08T01:32:53.525Z">
<meta name="twitter:card" content="summary">
<meta name="twitter:title" content="ReactNaive之ScrollView和ListView">
<meta name="twitter:description" content="一. ScrollView 记住ScrollView必须有一个确定的高度才能正常工作，因为它实际上所做的就是将一系列不确定高度的子组件装进一个确定高度的容器（通过滚动操作） 要给一个ScrollView确定一个高度的话，要么直接给它设置高度（不建议），要么确定所有的父容器都有确定的高度">
<meta name="twitter:image" content="http://upload-images.jianshu.io/upload_images/4122543-45456c9ba9799576.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/200">

<link rel="apple-touch-icon" href= "/apple-touch-icon.png">


    <link rel="alternate" href="/atom.xml" title="RuningTitan&#39;s Blog" type="application/atom+xml">



    <link rel="shortcut icon" href="/favicon.png">



    <link href="//cdn.bootcss.com/animate.css/3.5.1/animate.min.css" rel="stylesheet">



    <link href="//cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.css" rel="stylesheet">



    <script src="//cdn.bootcss.com/pace/1.0.2/pace.min.js"></script>
    <link href="//cdn.bootcss.com/pace/1.0.2/themes/blue/pace-theme-minimal.css" rel="stylesheet">


<link rel="stylesheet" href="/css/style.css">



<link href="//cdn.bootcss.com/font-awesome/4.6.3/css/font-awesome.min.css" rel="stylesheet">


<title>ReactNaive之ScrollView和ListView | RuningTitan&#39;s Blog</title>

<script src="//cdn.bootcss.com/jquery/2.2.4/jquery.min.js"></script>
<script src="//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js"></script>

<script>
    var yiliaConfig = {
        fancybox: true,
        animate: true,
        isHome: false,
        isPost: true,
        isArchive: false,
        isTag: false,
        isCategory: false,
        fancybox_js: "//cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.js",
        scrollreveal: "//cdn.bootcss.com/scrollReveal.js/3.1.4/scrollreveal.min.js",
        search: true
    }
</script>


    <script> yiliaConfig.jquery_ui = [false]; </script>



    <script> yiliaConfig.rootUrl = "\/";</script>



    <script src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-5a9e4cdf8ccd2ba8"></script>




</head>
<body>
  <div id="container">
    <div class="left-col">
    <div class="overlay"></div>
<div class="intrude-less">
    <header id="header" class="inner">
        <a href="/" class="profilepic">
            <img src="/img/titanjun.png" class="animated zoomIn">
        </a>
        <hgroup>
          <h1 class="header-author"><a href="/">RuningTitan</a></h1>
        </hgroup>

        

        
            <form id="search-form">
            <input type="text" id="local-search-input" name="q" placeholder="search..." class="search form-control" autocomplete="off" autocorrect="off" searchonload="true" />
            <i class="fa fa-times" onclick="resetSearch()"></i>
            </form>
            <div id="local-search-result"></div>
            <p class='no-result'>No results found <i class='fa fa-spinner fa-pulse'></i></p>
        


        
            <div id="switch-btn" class="switch-btn">
                <div class="icon">
                    <div class="icon-ctn">
                        <div class="icon-wrap icon-house" data-idx="0">
                            <div class="birdhouse"></div>
                            <div class="birdhouse_holes"></div>
                        </div>
                        <div class="icon-wrap icon-ribbon hide" data-idx="1">
                            <div class="ribbon"></div>
                        </div>
                        
                        <div class="icon-wrap icon-link hide" data-idx="2">
                            <div class="loopback_l"></div>
                            <div class="loopback_r"></div>
                        </div>
                        
                        
                        <div class="icon-wrap icon-me hide" data-idx="3">
                            <div class="user"></div>
                            <div class="shoulder"></div>
                        </div>
                        
                    </div>
                    
                </div>
                <div class="tips-box hide">
                    <div class="tips-arrow"></div>
                    <ul class="tips-inner">
                        <li>菜单</li>
                        <li>标签</li>
                        
                        <li>友情链接</li>
                        
                        
                        <li>关于我</li>
                        
                    </ul>
                </div>
            </div>
        

        <div id="switch-area" class="switch-area">
            <div class="switch-wrap">
                <section class="switch-part switch-part1">
                    <nav class="header-menu">
                        <ul>
                        
                            <li><a href="/">主页</a></li>
                        
                            <li><a href="/archives/">文章列表</a></li>
                        
                            <li><a href="/tags/">标签云</a></li>
                        
                            <li><a href="/about/">关于我</a></li>
                        
                        </ul>
                    </nav>
                    <nav class="header-nav">
                        <ul class="social">
                            
                                <a class="fa 简书" href="https://www.jianshu.com/u/5bd5e9ed569e" title="简书"></a>
                            
                                <a class="fa CSDN" href="http://blog.csdn.net/ShmilyCoder" title="CSDN"></a>
                            
                                <a class="fa GitHub" href="https://github.com/CoderTitan" title="GitHub"></a>
                            
                                <a class="fa 新浪微博" href="https://weibo.com/p/1005056052774133/home?from=page_100505&mod=TAB&is_all=1#place" title="新浪微博"></a>
                            
                                <a class="fa Email" href="mailto:quanjunt@163.com" title="Email"></a>
                            
                                <a class="fa QQ" href="/741700649" title="QQ"></a>
                            
                                <a class="fa 微信" href="/dan741700649" title="微信"></a>
                            
                        </ul>
                    </nav>
                </section>
                
                
                <section class="switch-part switch-part2">
                    <div class="widget tagcloud" id="js-tagcloud">
                        <ul class="tag-list"><li class="tag-list-item"><a class="tag-list-link" href="/tags/3DTouch/">3DTouch</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/AVFoundation/">AVFoundation</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Array/">Array</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/AsyncStorage/">AsyncStorage</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/CATransition/">CATransition</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/CIDetector/">CIDetector</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/CIFilter/">CIFilter</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/CSS/">CSS</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Category/">Category</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/CoreAnimation/">CoreAnimation</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/CoreImage/">CoreImage</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Dictionary/">Dictionary</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Error/">Error</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Express/">Express</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Facebook-POP/">Facebook POP</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Flex/">Flex</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/HTML5/">HTML5</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/HTML5标签/">HTML5标签</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/JavaScript/">JavaScript</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/ListView/">ListView</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Mac-工具/">Mac 工具</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Navigator/">Navigator</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/NavigatorIOS/">NavigatorIOS</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Node-js/">Node.js</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Objective-C/">Objective-C</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/RxSwift/">RxSwift</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Scanner/">Scanner</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/ScrollView/">ScrollView</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Speech/">Speech</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/String/">String</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Swift/">Swift</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Swift3-0/">Swift3.0</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Swift4-0/">Swift4.0</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/TabBariOS/">TabBariOS</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/TabNavigator/">TabNavigator</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/UIBesizationv/">UIBesizationv</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/UICollectionView/">UICollectionView</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/UIMenuController/">UIMenuController</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/UIStackView/">UIStackView</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/UITableView/">UITableView</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Vision/">Vision</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/WebStorm/">WebStorm</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/WebView/">WebView</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Web服务器/">Web服务器</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/iOS扫描器/">iOS扫描器</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/入坑/">入坑</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/响应式编程/">响应式编程</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/富文本/">富文本</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/框架/">框架</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/桥接/">桥接</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/语法/">语法</a></li></ul>
                    </div>
                </section>
                
                
                
                <section class="switch-part switch-part3">
                    <div id="js-friends">
                    
                      <a class="main-nav-link switch-friends-link" href="https://hexo.io">Hexo</a>
                    
                      <a class="main-nav-link switch-friends-link" href="https://pages.github.com/">GitHub</a>
                    
                      <a class="main-nav-link switch-friends-link" href="http://moxfive.xyz/">MOxFIVE</a>
                    
                    </div>
                </section>
                

                
                
                <section class="switch-part switch-part4">
                
                    <div id="js-aboutme">iOS开发工程师</div>
                </section>
                
            </div>
        </div>
    </header>                
</div>
    </div>
    <div class="mid-col">
      <nav id="mobile-nav">
      <div class="overlay">
          <div class="slider-trigger"></div>
          <h1 class="header-author js-mobile-header hide"><a href="/" title="回到主页">RuningTitan</a></h1>
      </div>
    <div class="intrude-less">
        <header id="header" class="inner">
            <a href="/" class="profilepic">
                <img src="/img/titanjun.png" class="animated zoomIn">
            </a>
            <hgroup>
              <h1 class="header-author"><a href="/" title="回到主页">RuningTitan</a></h1>
            </hgroup>
            
            <nav class="header-menu">
                <ul>
                
                    <li><a href="/">主页</a></li>
                
                    <li><a href="/archives/">文章列表</a></li>
                
                    <li><a href="/tags/">标签云</a></li>
                
                    <li><a href="/about/">关于我</a></li>
                
                <div class="clearfix"></div>
                </ul>
            </nav>
            <nav class="header-nav">
                        <ul class="social">
                            
                                <a class="fa 简书" target="_blank" href="https://www.jianshu.com/u/5bd5e9ed569e" title="简书"></a>
                            
                                <a class="fa CSDN" target="_blank" href="http://blog.csdn.net/ShmilyCoder" title="CSDN"></a>
                            
                                <a class="fa GitHub" target="_blank" href="https://github.com/CoderTitan" title="GitHub"></a>
                            
                                <a class="fa 新浪微博" target="_blank" href="https://weibo.com/p/1005056052774133/home?from=page_100505&mod=TAB&is_all=1#place" title="新浪微博"></a>
                            
                                <a class="fa Email" target="_blank" href="mailto:quanjunt@163.com" title="Email"></a>
                            
                                <a class="fa QQ" target="_blank" href="/741700649" title="QQ"></a>
                            
                                <a class="fa 微信" target="_blank" href="/dan741700649" title="微信"></a>
                            
                        </ul>
            </nav>
        </header>                
    </div>
    <link class="menu-list" tags="标签" friends="友情链接" about="关于我"/>
</nav>
      <div class="body-wrap"><article id="post-ReactNaive之ScrollView和ListView" class="article article-type-post" itemscope itemprop="blogPost">
  
    <div class="article-meta">
      <a href="/2018/01/03/ReactNaive之ScrollView和ListView" class="article-date">
      <time datetime="2018-01-03T08:54:00.000Z" itemprop="datePublished">2018-01-03</time>
</a>


    </div>
  
  <div class="article-inner">
    
      <input type="hidden" class="isFancy" />
    
    
      <header class="article-header">
        
  
    <h1 class="article-title" itemprop="name">
      ReactNaive之ScrollView和ListView
    </h1>
  

      </header>
      
      <div class="article-info article-info-post">
        
    <div class="article-category tagcloud">
    <a class="article-category-link" href="/categories/ReactNaive/">ReactNaive</a>
    </div>


        
    <div class="article-tag tagcloud">
        <ul class="article-tag-list"><li class="article-tag-list-item"><a class="article-tag-list-link" href="/tags/CSS/">CSS</a></li><li class="article-tag-list-item"><a class="article-tag-list-link" href="/tags/ListView/">ListView</a></li><li class="article-tag-list-item"><a class="article-tag-list-link" href="/tags/ScrollView/">ScrollView</a></li></ul>
    </div>

        <div class="clearfix"></div>
      </div>
      
    
    <div class="article-entry" itemprop="articleBody">
      
          
        <h2 id="一-ScrollView"><a href="#一-ScrollView" class="headerlink" title="一. ScrollView"></a>一. ScrollView</h2><ul>
<li>记住ScrollView必须有一个确定的高度才能正常工作，因为它实际上所做的就是将一系列不确定高度的子组件装进一个确定高度的容器（通过滚动操作）</li>
<li>要给一个ScrollView确定一个高度的话，要么直接给它设置高度（不建议），要么确定所有的父容器都有确定的高度</li>
</ul>
<a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/4122543-45456c9ba9799576.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/200" alt="ListView.png"></p>
<h3 id="1-ScrollView常用的属性"><a href="#1-ScrollView常用的属性" class="headerlink" title="1. ScrollView常用的属性"></a>1. ScrollView常用的属性</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">horizontal <span class="keyword">bool</span> </span><br><span class="line"><span class="comment">//当此属性为true的时候，所有的子视图会在水平方向上排成一行，而不是默认的在垂直方向上排成一列。默认值为false。</span></span><br><span class="line"></span><br><span class="line">showsHorizontalScrollIndicator <span class="keyword">bool</span></span><br><span class="line"><span class="comment">//当此属性为true的时候，显示一个水平方向的滚动条。</span></span><br><span class="line">showsVerticalScrollIndicator <span class="keyword">bool</span></span><br><span class="line"><span class="comment">//当此属性为true的时候，显示一个垂直方向的滚动条。</span></span><br><span class="line"></span><br><span class="line">alwaysBounceHorizontal <span class="keyword">bool</span> </span><br><span class="line"><span class="comment">//当此属性为true时，水平方向即使内容比滚动视图本身还要小，也可以弹性地拉动一截。当horizontal=&#123;true&#125;时默认值为true，否则为false。</span></span><br><span class="line"></span><br><span class="line">refreshControl element </span><br><span class="line"><span class="comment">//指定RefreshControl组件，用于为ScrollView提供下拉刷新功能</span></span><br><span class="line"></span><br><span class="line">(ios) alwaysBounceVertical <span class="keyword">bool</span></span><br><span class="line"><span class="comment">//当此属性为true时，垂直方向即使内容比滚动视图本身还要小，也可以弹性地拉动一截。</span></span><br><span class="line"><span class="comment">//当horizontal=&#123;true&#125;时默认值为false，否则为true。</span></span><br><span class="line"></span><br><span class="line">(ios) automaticallyAdjustContentInsets <span class="keyword">bool</span></span><br><span class="line"><span class="comment">//当滚动视图放在一个导航条或者工具条后面的时候，iOS系统是否要自动调整内容的范围。默认值为true。（译注：如果你的ScrollView或ListView的头部出现莫名其妙的空白，尝试将此属性置为false）</span></span><br><span class="line"></span><br><span class="line">(ios) bounces <span class="keyword">bool</span></span><br><span class="line"><span class="comment">//当值为true时，如果内容范围比滚动视图本身大，在到达内容末尾的时候，可以弹性地拉动一截。如果为false，尾部的所有弹性都会被禁用，即使alwaysBounce*属性为true。默认值为true。</span></span><br><span class="line"></span><br><span class="line">(ios) bouncesZoom <span class="keyword">bool</span> </span><br><span class="line"><span class="comment">//当值为true时，使用手势缩放内容可以超过min/max的限制，然后在手指抬起之后弹回min/max的缩放比例。否则的话，缩放不能超过限制。</span></span><br><span class="line"></span><br><span class="line">(ios) contentInset &#123;top: number, left: number, bottom: number, right: number&#125; </span><br><span class="line"><span class="comment">//内容范围相对滚动视图边缘的坐标。默认为&#123;0, 0, 0, 0&#125;</span></span><br><span class="line"></span><br><span class="line">(ios) contentOffset PointPropType</span><br><span class="line"><span class="comment">//用来手动设置初始的滚动坐标。默认值为&#123;x: 0, y: 0&#125;</span></span><br><span class="line"></span><br><span class="line">pagingEnabled <span class="keyword">bool</span></span><br><span class="line"><span class="comment">//当值为true时，滚动条会停在滚动视图的尺寸的整数倍位置。这个可以用在水平分页上。默认值为false。</span></span><br><span class="line"></span><br><span class="line">scrollEnabled <span class="keyword">bool</span></span><br><span class="line"><span class="comment">//当值为false的时候，内容不能滚动，默认值为true。</span></span><br><span class="line"></span><br><span class="line">(ios) scrollEventThrottle number</span><br><span class="line"><span class="comment">//这个属性控制在滚动过程中，scroll事件被调用的频率（单位是每秒事件数量）。更大的数值能够更及时的跟踪滚动位置，不过可能会带来性能问题，因为更多的信息会通过bridge传递。默认值为0，意味着每次视图被滚动，scroll事件只会被调用一次。</span></span><br><span class="line"></span><br><span class="line">(ios)scrollIndicatorInsets &#123;top: number, left: number, bottom: number, right: number&#125; </span><br><span class="line"><span class="comment">//决定滚动条距离视图边缘的坐标。这个值应该和contentInset一样。默认值为&#123;0, 0, 0, 0&#125;。</span></span><br><span class="line"></span><br><span class="line">(ios) scrollsToTop <span class="keyword">bool</span> </span><br><span class="line"><span class="comment">//当此值为true时，点击状态栏的时候视图会滚动到顶部。默认值为true。</span></span><br><span class="line"></span><br><span class="line">stickyHeaderIndices [number]</span><br><span class="line"><span class="comment">//一个子视图下标的数组，用于决定哪些成员会在滚动之后固定在屏幕顶端。</span></span><br><span class="line"><span class="comment">//举个例子，传递stickyHeaderIndices=&#123;[0]&#125;会让第一个成员固定在滚动视图顶端。</span></span><br><span class="line"><span class="comment">//这个属性不能和horizontal=&#123;true&#125;一起使用。</span></span><br><span class="line"></span><br><span class="line">(ios) maximumZoomScale number </span><br><span class="line"><span class="comment">//允许的最大缩放比例。默认值为1.0。</span></span><br><span class="line"></span><br><span class="line">(ios) minimumZoomScale number </span><br><span class="line"><span class="comment">//允许的最小缩放比例。默认值为1.0。</span></span><br></pre></td></tr></table></figure>
<h3 id="2-ScrollView常用的方法"><a href="#2-ScrollView常用的方法" class="headerlink" title="2. ScrollView常用的方法"></a>2. ScrollView常用的方法</h3><ul>
<li>开发中，常需要在滚动的时候做事情，那怎么监听ScrollView滚动</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// 监听滚动开始</span><br><span class="line">onMomentumScrollBegin=&#123;this._onMomentumScrollBegin.bind(this)&#125;</span><br><span class="line"></span><br><span class="line">// 监听滚动结束</span><br><span class="line">onMomentumScrollEnd=&#123;this._onMomentumScrollEnd.bind(this)&#125;</span><br><span class="line"></span><br><span class="line">// 监听开始拖拽</span><br><span class="line">onScrollBeginDrag=&#123;this._onScrollBeginDrag.bind(this)&#125;</span><br><span class="line"></span><br><span class="line">// 监听结束拖拽</span><br><span class="line">onScrollEndDrag=&#123;this._onScrollEndDrag.bind(this)&#125;</span><br><span class="line"></span><br><span class="line">// 监听滚动动画完成</span><br><span class="line">onScrollAnimationEnd=&#123;this._onScrollAnimationEnd.bind(this)&#125;</span><br><span class="line"></span><br><span class="line">onMomentumScrollStart?: function </span><br><span class="line">//滚动动画开始时调用此函数。</span><br><span class="line"></span><br><span class="line">onMomentumScrollEnd?: function </span><br><span class="line">//滚动动画结束时调用此函数。</span><br><span class="line"></span><br><span class="line">// 监听滚动的时候</span><br><span class="line">onScroll=&#123;this._onScroll.bind(this)&#125;</span><br><span class="line"></span><br><span class="line">// 设置滚动频率,一滚动就监听,需要和onScroll配套使用</span><br><span class="line">scrollEventThrottle=&#123;1&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scrollTo(y: number | &#123; x?: number, y?: number, animated?: boolean &#125;, x: number, animated: boolean) </span><br><span class="line">//滚动到指定的x, y偏移处。第三个参数为是否启用平滑滚动动画。</span><br><span class="line">//使用示例:</span><br><span class="line">scrollTo(&#123;x: 0, y: 0, animated: true&#125;)</span><br><span class="line"></span><br><span class="line">scrollToEnd(options?) </span><br><span class="line">//滚动到视图底部（水平方向的视图则滚动到最右边）。</span><br><span class="line">//加上动画参数 scrollToEnd(&#123;animated: true&#125;)则启用平滑滚动动画，或是调用 scrollToEnd(&#123;animated: false&#125;)来立即跳转。如果不使用参数，则animated选项默认启用。</span><br></pre></td></tr></table></figure>
<h3 id="3-获取原生事件"><a href="#3-获取原生事件" class="headerlink" title="3. 获取原生事件"></a>3. 获取原生事件</h3><ul>
<li>滚动的时候,会传入一个合成事件作为监听滚动方法的参数，每个方法都会有这个合成事件</li>
<li>通过合成事件能获取原生事件nativeEvent,原生事件nativeEvent会有我们想要的信息.</li>
<li>什么是合成事件：在RN中，事件的处理由其内部自己实现的事件系统完成，触发的事件都叫做 合成事件（SyntheticEvent）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 滚动完成的时候调用</span><br><span class="line">_onMomentumScrollEnd(e)&#123;</span><br><span class="line">    // 获取原生事件</span><br><span class="line">    var nativeEvent = e.nativeEvent</span><br><span class="line">    //获取当前偏移量</span><br><span class="line">    var contentX = nativeEvent.contentOffset.x</span><br><span class="line">    //当前页</span><br><span class="line">    var page = contentX / kScreenWidth</span><br><span class="line"></span><br><span class="line">    this.setState(&#123;</span><br><span class="line">        currentPage:page</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二-ListView"><a href="#二-ListView" class="headerlink" title="二. ListView"></a>二. ListView</h2><ul>
<li>官方文档提示: 在0.46版本开始此组件已过期, 并推荐使用<code>FlatList</code>或<code>SectionList</code>替代, 但是在0.51版本依然可以使用</li>
<li><code>ListView</code>: 一个核心组件，用于高效地显示一个可以垂直滚动的变化的数据列表</li>
<li>ListView内部是通过<code>ListViewDataSource</code>这个对象，显示数据，因此使用ListView必须先创建<code>ListViewDataSource</code>对象。</li>
<li><code>ListViewDataSource</code>构造方法(创建对象):可选择性传入4个参数,描述怎么提取数据，怎么刷新cell</li>
<li>这些参数：都是函数，当产生对应的事件的时候，会自动执行这些函数.</li>
</ul>
<h3 id="1-ListView常用的属性和方法"><a href="#1-ListView常用的属性和方法" class="headerlink" title="1. ListView常用的属性和方法"></a>1. ListView常用的属性和方法</h3><ul>
<li>ListView可以使用所有ScrollView的属性。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">initialListSize number </span><br><span class="line">//指定在组件刚挂载的时候渲染多少行数据。用这个属性来确保首屏显示合适数量的数据，而不是花费太多帧逐步显示出来</span><br><span class="line"></span><br><span class="line">dataSource ListViewDataSource </span><br><span class="line">//ListView.DataSource实例（列表依赖的数据源）</span><br></pre></td></tr></table></figure>
<ul>
<li><code>ListViewDataSource</code>构造函数可以接受下列四种参数（都是可选）：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getRowData(dataBlob, sectionID, rowID);</span><br><span class="line">//怎么获取行数据</span><br><span class="line">getSectionHeaderData(dataBlob, sectionID);</span><br><span class="line">//怎么获取每一组头部数据</span><br><span class="line">rowHasChanged(prevRowData, nextRowData);</span><br><span class="line">//决定什么情况行数据才发生改变，当行数据发生改变，就会绘制下一行cell</span><br><span class="line">sectionHeaderHasChanged(prevSectionData, nextSectionData);</span><br><span class="line">//决定什么情况头部数据才发生改变，当行数据发生改变，就会绘制下一行cell</span><br></pre></td></tr></table></figure>
<ul>
<li><code>ListViewDataSource</code>为<code>ListView</code>组件提供高性能的数据处理和访问。我们需要调用clone方法从原始输入数据中抽取数据来创建<code>ListViewDataSource</code>对象。</li>
<li>要更新<code>datasource</code>中的数据，请（每次都重新）调用<code>cloneWithRows</code>方法（如果用到了section，则对应<code>cloneWithRowsAndSections</code>方法）clone方法会自动提取新数据并进行逐行对比（使用<code>rowHasChanged</code>方法中的策略），这样<code>ListView</code>就知道哪些行需要重新渲染了</li>
<li>注意：初始化<code>ListViewDataSource</code>的时候，如果不需要修改提取数据的方式，只需要实现<code>rowHasChanged</code>，告诉什么时候刷新下一行数据.</li>
<li>注意：默认<code>ListViewDataSource</code>有提取数据方式，可以使用默认的提取方式.</li>
</ul>
<h3 id="2-ListView使用步骤"><a href="#2-ListView使用步骤" class="headerlink" title="2. ListView使用步骤"></a>2. ListView使用步骤</h3><ul>
<li>1). 创建数据源</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//1. 创建数据源对象</span><br><span class="line">var datas = new ListView.DataSource(&#123;</span><br><span class="line">    //设置数据改变的时候刷新下一行数据</span><br><span class="line">    rowHasChanged: (r1, r2)=&gt;&#123;r1 != r2&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//2. 请求数据&apos;</span><br><span class="line">var foodArr = require(&apos;./Resource/food.json&apos;)</span><br><span class="line"></span><br><span class="line">//3. 设置数据</span><br><span class="line">datas = datas.cloneWithRows(foodArr)</span><br><span class="line"></span><br><span class="line">//5. 保存数据源</span><br><span class="line">this.state = &#123;</span><br><span class="line">    dataArr: datas</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>2). ListView实现</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;ListView style=&#123;&#123;backgroundColor:&apos;white&apos;, marginTop:20&#125;&#125;</span><br><span class="line">    //设置数据源</span><br><span class="line">          dataSource=&#123;this.state.dataArr&#125;</span><br><span class="line">    //渲染哪一行(设置cell样式)</span><br><span class="line">          renderRow=&#123;this._renderRow.bind(this)&#125;</span><br><span class="line">          //设置头部样式</span><br><span class="line">          renderHeader=&#123;this._renderHeader.bind(this)&#125;</span><br><span class="line">          //设置section的头部样式</span><br><span class="line">          renderSectionHeader=&#123;this._renderSectionHeader.bind(this)&#125;</span><br><span class="line">          //设置尾部样式</span><br><span class="line">          renderFooter=&#123;this._renderFooter.bind(this)&#125;</span><br><span class="line">          //设置分割线样式</span><br><span class="line">          renderSeparator=&#123;this._renderSeparator.bind(this)&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>3). 相关属性方法介绍<ul>
<li>renderRow: 设置每行cell样式</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 实现数据源方法,设置每行cell样式</span><br><span class="line">/*这个方法会自动传入四个参数(rowData,sectionID,rowID,highlightRow)</span><br><span class="line">rowData:当前行数据</span><br><span class="line">sectionID:当前行所在组ID</span><br><span class="line">rowID：哪一行的角标</span><br><span class="line">highlightRow:高亮函数</span><br><span class="line">*/</span><br><span class="line">    _renderRow(rowData, sectionID, rowID, highlightRow) &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;View&gt;</span><br><span class="line">                &lt;Text&gt;&#123;rowData&#125;&lt;/Text&gt;</span><br><span class="line">            &lt;/View&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>ListView头部和尾部视图</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//头部视图</span><br><span class="line"> _renderHeader() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;View&gt;</span><br><span class="line">                &lt;Text&gt;头部视图&lt;/Text&gt;</span><br><span class="line">            &lt;/View&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">//尾部视图</span><br><span class="line"> _renderFooter() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;View&gt;</span><br><span class="line">                &lt;Text&gt;尾部视图&lt;/Text&gt;</span><br><span class="line">            &lt;/View&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>renderSectionHeader: 设置每一个section的头部样式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//sectionData: 每一组的头部数据</span><br><span class="line">//sectionID: 组ID</span><br><span class="line">_renderSectionHeader(sectionData, sectionID)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>ListView分割线<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 哪一组,哪一行,相邻行是否高亮</span><br><span class="line">   _renderSeparator(sectionID, rowID, adjacentRowHighlighted)  &#123;</span><br><span class="line">       console.log(sectionID,rowID,adjacentRowHighlighted);</span><br><span class="line">       return (</span><br><span class="line">           &lt;View style=&#123;&#123;height:1,backgroundColor:&apos;black&apos;&#125;&#125;&gt;&lt;/View&gt;</span><br><span class="line">       )</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
</ul>

      
    </div>
    
  </div>
  
    
    <div class="copyright">
        <p><span>本文标题:</span><a href="/2018/01/03/ReactNaive之ScrollView和ListView">ReactNaive之ScrollView和ListView</a></p>
        <p><span>文章作者:</span><a href="/" title="回到主页">RuningTitan</a></p>
        <p><span>发布时间:</span>2018-01-03, 16:54:00</p>
        <p><span>最后更新:</span>2018-03-08, 09:32:53</p>
        <p>
            <span>原始链接:</span><a class="post-url" href="/2018/01/03/ReactNaive之ScrollView和ListView" title="ReactNaive之ScrollView和ListView">https://titanjun.top/2018/01/03/ReactNaive之ScrollView和ListView</a>
            <span class="copy-path" data-clipboard-text="原文: https://titanjun.top/2018/01/03/ReactNaive之ScrollView和ListView　　作者: RuningTitan" title="点击复制文章链接"><i class="fa fa-clipboard"></i></span>
            <script> var clipboard = new Clipboard('.copy-path'); </script>
        </p>
        <p>
            <span>许可协议:</span><i class="fa fa-creative-commons"></i> <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" title="CC BY-NC-SA 4.0 International" target = "_blank">"署名-非商用-相同方式共享 4.0"</a> 转载请保留原文链接及作者。
        </p>
    </div>



    <nav id="article-nav">
        
            <div id="article-nav-newer" class="article-nav-title">
                <a href="/2018/01/05/React Native之导航组件NavigatorIOS和Navigator">
                    React Native之导航组件NavigatorIOS和Navigator
                </a>
            </div>
        
        
            <div id="article-nav-older" class="article-nav-title">
                <a href="/2017/12/10/Swift语音和文本的转换">
                    Swift语音和文本的转换
                </a>
            </div>
        
    </nav>

  
</article>

    <div id="toc" class="toc-article">
        <strong class="toc-title">文章目录</strong>
        
            <ol class="toc"><li class="toc-item toc-level-2"><a class="toc-link" href="#一-ScrollView"><span class="toc-number">1.</span> <span class="toc-text">一. ScrollView</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#1-ScrollView常用的属性"><span class="toc-number">1.1.</span> <span class="toc-text">1. ScrollView常用的属性</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-ScrollView常用的方法"><span class="toc-number">1.2.</span> <span class="toc-text">2. ScrollView常用的方法</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#3-获取原生事件"><span class="toc-number">1.3.</span> <span class="toc-text">3. 获取原生事件</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#二-ListView"><span class="toc-number">2.</span> <span class="toc-text">二. ListView</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#1-ListView常用的属性和方法"><span class="toc-number">2.1.</span> <span class="toc-text">1. ListView常用的属性和方法</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-ListView使用步骤"><span class="toc-number">2.2.</span> <span class="toc-text">2. ListView使用步骤</span></a></li></ol></li></ol>
        
    </div>
    <style>
        .left-col .switch-btn,
        .left-col .switch-area {
            display: none;
        }
        .toc-level-6 i,
        .toc-level-6 ol {
            display: none !important;
        }
    </style>

    <input type="button" id="tocButton" value="隐藏目录"  title="点击按钮隐藏或者显示文章目录">

    <script>
        yiliaConfig.toc = ["隐藏目录", "显示目录", !!"false"];
    </script>



    
<div class="share">
    

    
        <div class="addthis_sharing_toolbox"></div>
    
</div>







    



  
  <!-- Gitment评论插件通用代码 -->
<div id="git"></div>
<link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css">
<script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script>
<script>
var gitment = new Gitment({
  owner: "CoderTitan",//github用户名
  repo: "CoderTitan.github.io",//用户存储评论的github项目名称
  oauth: {
    client_id: "42cc1c92340bb98775b3",//注册OAuth Application时生产的ClinetID
    client_secret:"4d5bc35eb71c99eb21ad0f13d592943b498bce89",//注册OAuth Application时生成的Client Secret
  },
})
gitment.render('git')
</script>
<!-- Gitment代码结束 -->

  




    <div class="scroll" id="post-nav-button">
        
            <a href="/2018/01/05/React Native之导航组件NavigatorIOS和Navigator" title="上一篇: React Native之导航组件NavigatorIOS和Navigator">
                <i class="fa fa-angle-left"></i>
            </a>
        

        <a title="文章列表"><i class="fa fa-bars"></i><i class="fa fa-times"></i></a>

        
            <a href="/2017/12/10/Swift语音和文本的转换" title="下一篇: Swift语音和文本的转换">
                <i class="fa fa-angle-right"></i>
            </a>
        
    </div>

    <ul class="post-list"><li class="post-list-item"><a class="post-list-link" href="/2018/01/24/ReactNative之AsyncStorage本地存储">ReactNative之AsyncStorage本地存储</a></li><li class="post-list-item"><a class="post-list-link" href="/2018/01/20/Node.js搭建Web服务器">Node.js搭建Web服务器</a></li><li class="post-list-item"><a class="post-list-link" href="/2018/01/06/ReactNative之TabBariOS和TabNavigator">ReactNative之TabBariOS和TabNavigator</a></li><li class="post-list-item"><a class="post-list-link" href="/2018/01/05/React Native之导航组件NavigatorIOS和Navigator">React Native之导航组件NavigatorIOS和Navigator</a></li><li class="post-list-item"><a class="post-list-link" href="/2018/01/03/ReactNaive之ScrollView和ListView">ReactNaive之ScrollView和ListView</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/12/10/Swift语音和文本的转换">Swift语音和文本的转换</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/11/29/Swift之Vision 图像识别框架">Swift之Vision 图像识别框架</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/11/22/iOS黑科技之(AVFoundation)动态人脸识别(二)">iOS黑科技之(AVFoundation)动态人脸识别(二)</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/11/22/iOS黑科技之(CoreImage)静态人脸识别(一)">iOS黑科技之(CoreImage)静态人脸识别(一)</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/11/16/Swift之二维码的生成、识别和扫描">Swift之二维码的生成、识别和扫描</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/11/11/Swift之删除HTML5页面的广告">Swift之删除HTML5页面的广告</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/10/28/Swift之微信朋友圈图片浏览器">Swift之微信朋友圈图片浏览器</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/10/23/Swift开发之3DTouch实用演练">Swift开发之3DTouch实用演练</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/10/23/ReactNaive之CSS和Flex布局">ReactNaive之CSS和Flex布局</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/10/17/Swift之Facebook的POP动画使用和实战">Swift之Facebook的POP动画使用和实战</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/10/12/iOS出门必备之CoreAnimation(核心动画)">iOS出门必备之CoreAnimation(核心动画)</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/10/08/RxSwift+Moya网络请求之项目实战">RxSwift+Moya网络请求之项目实战</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/09/21/RxSwift的使用详解02">RxSwift的使用详解02</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/09/15/RxSwift的使用详解01">RxSwift的使用详解01</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/09/09/iOS之Scanner字符串扫描类">iOS之Scanner字符串扫描类</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/08/25/升级Swift4.0遇到的坑">升级Swift4.0遇到的坑</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/08/09/JavaScript基本语法01">JavaScript基本语法01</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/07/19/Swift4.0新特性之String、Array和Dictionary">Swift4.0新特性之String、Array和Dictionary</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/07/10/Swift版-H5页面实现长按保存图片">Swift版-H5页面实现长按保存图片</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/06/16/HTML5学习笔记之音视频标签">HTML5学习笔记之音视频标签</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/06/15/HTML5学习笔记之表单标签">HTML5学习笔记之表单标签</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/06/15/HTML5学习笔记之表格标签">HTML5学习笔记之表格标签</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/06/15/HTML5学习笔记之基础标签">HTML5学习笔记之基础标签</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/06/15/HTML5基本介绍">HTML5基本介绍</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/06/15/Swift项目创建桥接文件">Swift项目创建桥接文件</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/06/12/Swift仿网易新闻首页左右滑动切换页面">Swift仿网易新闻首页左右滑动切换页面</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/06/10/iOS9之UIStackView的使用">iOS9之UIStackView的使用</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/05/19/NSMutableAttributedString富文本">NSMutableAttributedString富文本</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/05/19/Swift函数式编程之Map&Reduce&Filter">Swift函数式编程之Map&Reduce&Filter</a></li><li class="post-list-item"><a class="post-list-link" href="/2016/12/30/Swift3.0基本语法03">Swift3.0基本语法03</a></li><li class="post-list-item"><a class="post-list-link" href="/2016/12/28/Swift3.0基本语法02">Swift基本语法02</a></li><li class="post-list-item"><a class="post-list-link" href="/2016/12/25/Swift3.0之基本语法01">Swift3.0之基本语法01</a></li><li class="post-list-item"><a class="post-list-link" href="/2016/11/25/iOS之NSDate的Category">iOS之NSDate的Category</a></li><li class="post-list-item"><a class="post-list-link" href="/2016/11/22/iOS之UIMenuController的简单使用">iOS之UIMenuController的简单使用</a></li><li class="post-list-item"><a class="post-list-link" href="/2016/11/20/iOS之UITableView设置全屏分隔线">iOS之UITableView设置全屏分隔线</a></li><li class="post-list-item"><a class="post-list-link" href="/2016/11/15/iOS之UICollectionView自定义布局">iOS之UICollectionView自定义布局</a></li><li class="post-list-item"><a class="post-list-link" href="/2016/10/10/Mac破解版软件大全">Mac破解版软件大全</a></li></ul>




    <script>
        
    </script>
</div>
      <footer id="footer">
    <div class="outer">
        <div id="footer-info">
            <div class="footer-left">
                <i class="fa fa-copyright"></i> 
                2016-2018 RuningTitan
            </div>
            <div class="footer-right">
                <a href="http://hexo.io/" target="_blank" title="快速、简洁且高效的博客框架">Hexo</a>  Theme <a href="https://github.com/MOxFIVE/hexo-theme-yelee" target="_blank" title="简而不减 Hexo 双栏博客主题  v3.5">Yelee</a> by MOxFIVE <i class="fa fa-heart animated infinite pulse"></i>
            </div>
        </div>
        
            <div class="visit">
                
                    <span id="busuanzi_container_site_pv" style='display:none'>
                        <span id="site-visit" title="本站到访数"><i class="fa fa-user" aria-hidden="true"></i><span id="busuanzi_value_site_uv"></span>
                        </span>
                    </span>
                
                
                    <span>| </span>
                
                
                    <span id="busuanzi_container_page_pv" style='display:none'>
                        <span id="page-visit"  title="本页阅读量"><i class="fa fa-eye animated infinite pulse" aria-hidden="true"></i><span id="busuanzi_value_page_pv"></span>
                        </span>
                    </span>
                
            </div>
        
    </div>
</footer>
    </div>
    
<script data-main="/js/main.js" src="//cdn.bootcss.com/require.js/2.2.0/require.min.js"></script>





    <script type="text/x-mathjax-config">
MathJax.Hub.Config({
    tex2jax: {
        inlineMath: [ ['$','$'], ["\\(","\\)"]  ],
        processEscapes: true,
        skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
    }
});

MathJax.Hub.Queue(function() {
    var all = MathJax.Hub.getAllJax(), i;
    for(i=0; i < all.length; i += 1) {
        all[i].SourceElement().parentNode.className += ' has-jax';                 
    }       
});
</script>

<script src="//cdn.bootcss.com/mathjax/2.6.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>


<div class="scroll" id="scroll">
    <a href="#" title="返回顶部"><i class="fa fa-arrow-up"></i></a>
    <a href="#comments" onclick="load$hide();" title="查看评论"><i class="fa fa-comments-o"></i></a>
    <a href="#footer" title="转到底部"><i class="fa fa-arrow-down"></i></a>
</div>
<script>
    // Open in New Window
    
        var oOpenInNew = {
            
            
             post: ".article-entry a[href], .copyright a[href]", 
            
            
            
             archives: ".archive-article-title", 
             miniArchives: "a.post-list-link", 
            
             friends: "#js-friends a", 
             socail: ".social a" 
        }
        for (var x in oOpenInNew) {
            $(oOpenInNew[x]).attr("target", "_blank");
        }
    
</script>

<script async src="https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js">
</script>
  </div>
</body>
</html>