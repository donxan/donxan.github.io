<!DOCTYPE html>
<html lang="zh-Hans">
<head>

    <!--[if lt IE 9]>
        <style>body {display: none; background: none !important} </style>
        <meta http-equiv="Refresh" Content="0; url=//outdatedbrowser.com/" />
    <![endif]-->

<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge, chrome=1" />
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<meta name="format-detection" content="telephone=no" />
<meta name="author" content="RuningTitan" />



<meta name="description" content="2017年苹果大大又推出了新机型iPhone 8和iPhone 8Plus, 这还不是重点, 重点是那一款价值9000RMB的iPhone X, 虽说网上吐槽声从未停止过, 但是我觉得还是不错的哈! 软件方面, 苹果大大也推出了iOS 11, 经本人iPhone 7手机亲测, 耗电快外加通知栏改不完的bug 当然了随着iOS 11的推出, 也随之推出了一些新的API，如：ARKit 、Core">
<meta name="keywords" content="Swift,Vision">
<meta property="og:type" content="article">
<meta property="og:title" content="Swift之Vision 图像识别框架">
<meta property="og:url" content="https://titanjun.top/2017/11/29/Swift之Vision 图像识别框架">
<meta property="og:site_name" content="RuningTitan&#39;s Blog">
<meta property="og:description" content="2017年苹果大大又推出了新机型iPhone 8和iPhone 8Plus, 这还不是重点, 重点是那一款价值9000RMB的iPhone X, 虽说网上吐槽声从未停止过, 但是我觉得还是不错的哈! 软件方面, 苹果大大也推出了iOS 11, 经本人iPhone 7手机亲测, 耗电快外加通知栏改不完的bug 当然了随着iOS 11的推出, 也随之推出了一些新的API，如：ARKit 、Core">
<meta property="og:locale" content="zh-Hans">
<meta property="og:image" content="http://upload-images.jianshu.io/upload_images/4122543-b58783bec9d07551.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240">
<meta property="og:image" content="http://upload-images.jianshu.io/upload_images/4122543-c0b83aa723e149ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240">
<meta property="og:image" content="http://upload-images.jianshu.io/upload_images/4122543-0c09426c80013322.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/200">
<meta property="og:image" content="http://upload-images.jianshu.io/upload_images/4122543-8b970c464c26ffb0.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/200">
<meta property="og:image" content="http://upload-images.jianshu.io/upload_images/4122543-05e6a9cc6c193b1d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/400">
<meta property="og:image" content="http://upload-images.jianshu.io/upload_images/4122543-e5faf93cebae945e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/400">
<meta property="og:image" content="http://upload-images.jianshu.io/upload_images/4122543-9f199a027f186a5c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/400">
<meta property="og:image" content="http://upload-images.jianshu.io/upload_images/4122543-895670df5fd8e2c9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/400">
<meta property="og:updated_time" content="2018-03-08T01:41:02.954Z">
<meta name="twitter:card" content="summary">
<meta name="twitter:title" content="Swift之Vision 图像识别框架">
<meta name="twitter:description" content="2017年苹果大大又推出了新机型iPhone 8和iPhone 8Plus, 这还不是重点, 重点是那一款价值9000RMB的iPhone X, 虽说网上吐槽声从未停止过, 但是我觉得还是不错的哈! 软件方面, 苹果大大也推出了iOS 11, 经本人iPhone 7手机亲测, 耗电快外加通知栏改不完的bug 当然了随着iOS 11的推出, 也随之推出了一些新的API，如：ARKit 、Core">
<meta name="twitter:image" content="http://upload-images.jianshu.io/upload_images/4122543-b58783bec9d07551.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240">

<link rel="apple-touch-icon" href= "/apple-touch-icon.png">


    <link rel="alternate" href="/atom.xml" title="RuningTitan&#39;s Blog" type="application/atom+xml">



    <link rel="shortcut icon" href="/favicon.png">



    <link href="//cdn.bootcss.com/animate.css/3.5.1/animate.min.css" rel="stylesheet">



    <link href="//cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.css" rel="stylesheet">



    <script src="//cdn.bootcss.com/pace/1.0.2/pace.min.js"></script>
    <link href="//cdn.bootcss.com/pace/1.0.2/themes/blue/pace-theme-minimal.css" rel="stylesheet">


<link rel="stylesheet" href="/css/style.css">



<link href="//cdn.bootcss.com/font-awesome/4.6.3/css/font-awesome.min.css" rel="stylesheet">


<title>Swift之Vision 图像识别框架 | RuningTitan&#39;s Blog</title>

<script src="//cdn.bootcss.com/jquery/2.2.4/jquery.min.js"></script>
<script src="//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js"></script>

<script>
    var yiliaConfig = {
        fancybox: true,
        animate: true,
        isHome: false,
        isPost: true,
        isArchive: false,
        isTag: false,
        isCategory: false,
        fancybox_js: "//cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.js",
        scrollreveal: "//cdn.bootcss.com/scrollReveal.js/3.1.4/scrollreveal.min.js",
        search: true
    }
</script>


    <script> yiliaConfig.jquery_ui = [false]; </script>



    <script> yiliaConfig.rootUrl = "\/";</script>



    <script src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-5a9e4cdf8ccd2ba8"></script>




</head>
<body>
  <div id="container">
    <div class="left-col">
    <div class="overlay"></div>
<div class="intrude-less">
    <header id="header" class="inner">
        <a href="/" class="profilepic">
            <img src="/img/titanjun.png" class="animated zoomIn">
        </a>
        <hgroup>
          <h1 class="header-author"><a href="/">RuningTitan</a></h1>
        </hgroup>

        

        
            <form id="search-form">
            <input type="text" id="local-search-input" name="q" placeholder="search..." class="search form-control" autocomplete="off" autocorrect="off" searchonload="true" />
            <i class="fa fa-times" onclick="resetSearch()"></i>
            </form>
            <div id="local-search-result"></div>
            <p class='no-result'>No results found <i class='fa fa-spinner fa-pulse'></i></p>
        


        
            <div id="switch-btn" class="switch-btn">
                <div class="icon">
                    <div class="icon-ctn">
                        <div class="icon-wrap icon-house" data-idx="0">
                            <div class="birdhouse"></div>
                            <div class="birdhouse_holes"></div>
                        </div>
                        <div class="icon-wrap icon-ribbon hide" data-idx="1">
                            <div class="ribbon"></div>
                        </div>
                        
                        <div class="icon-wrap icon-link hide" data-idx="2">
                            <div class="loopback_l"></div>
                            <div class="loopback_r"></div>
                        </div>
                        
                        
                        <div class="icon-wrap icon-me hide" data-idx="3">
                            <div class="user"></div>
                            <div class="shoulder"></div>
                        </div>
                        
                    </div>
                    
                </div>
                <div class="tips-box hide">
                    <div class="tips-arrow"></div>
                    <ul class="tips-inner">
                        <li>菜单</li>
                        <li>标签</li>
                        
                        <li>友情链接</li>
                        
                        
                        <li>关于我</li>
                        
                    </ul>
                </div>
            </div>
        

        <div id="switch-area" class="switch-area">
            <div class="switch-wrap">
                <section class="switch-part switch-part1">
                    <nav class="header-menu">
                        <ul>
                        
                            <li><a href="/">主页</a></li>
                        
                            <li><a href="/archives/">文章列表</a></li>
                        
                            <li><a href="/tags/">标签云</a></li>
                        
                            <li><a href="/about/">关于我</a></li>
                        
                        </ul>
                    </nav>
                    <nav class="header-nav">
                        <ul class="social">
                            
                                <a class="fa 简书" href="https://www.jianshu.com/u/5bd5e9ed569e" title="简书"></a>
                            
                                <a class="fa CSDN" href="http://blog.csdn.net/ShmilyCoder" title="CSDN"></a>
                            
                                <a class="fa GitHub" href="https://github.com/CoderTitan" title="GitHub"></a>
                            
                                <a class="fa 新浪微博" href="https://weibo.com/p/1005056052774133/home?from=page_100505&mod=TAB&is_all=1#place" title="新浪微博"></a>
                            
                                <a class="fa Email" href="mailto:quanjunt@163.com" title="Email"></a>
                            
                                <a class="fa QQ" href="/741700649" title="QQ"></a>
                            
                                <a class="fa 微信" href="/dan741700649" title="微信"></a>
                            
                        </ul>
                    </nav>
                </section>
                
                
                <section class="switch-part switch-part2">
                    <div class="widget tagcloud" id="js-tagcloud">
                        <ul class="tag-list"><li class="tag-list-item"><a class="tag-list-link" href="/tags/3DTouch/">3DTouch</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/AVFoundation/">AVFoundation</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Array/">Array</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/AsyncStorage/">AsyncStorage</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/CATransition/">CATransition</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/CIDetector/">CIDetector</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/CIFilter/">CIFilter</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/CSS/">CSS</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Category/">Category</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/CoreAnimation/">CoreAnimation</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/CoreImage/">CoreImage</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Dictionary/">Dictionary</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Error/">Error</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Express/">Express</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Facebook-POP/">Facebook POP</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Flex/">Flex</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/HTML5/">HTML5</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/HTML5标签/">HTML5标签</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/JavaScript/">JavaScript</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/ListView/">ListView</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Mac-工具/">Mac 工具</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Navigator/">Navigator</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/NavigatorIOS/">NavigatorIOS</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Node-js/">Node.js</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Objective-C/">Objective-C</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/RxSwift/">RxSwift</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Scanner/">Scanner</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/ScrollView/">ScrollView</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Speech/">Speech</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/String/">String</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Swift/">Swift</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Swift3-0/">Swift3.0</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Swift4-0/">Swift4.0</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/TabBariOS/">TabBariOS</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/TabNavigator/">TabNavigator</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/UIBesizationv/">UIBesizationv</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/UICollectionView/">UICollectionView</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/UIMenuController/">UIMenuController</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/UIStackView/">UIStackView</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/UITableView/">UITableView</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Vision/">Vision</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/WebStorm/">WebStorm</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/WebView/">WebView</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/Web服务器/">Web服务器</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/iOS扫描器/">iOS扫描器</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/入坑/">入坑</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/响应式编程/">响应式编程</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/富文本/">富文本</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/框架/">框架</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/桥接/">桥接</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/语法/">语法</a></li></ul>
                    </div>
                </section>
                
                
                
                <section class="switch-part switch-part3">
                    <div id="js-friends">
                    
                      <a class="main-nav-link switch-friends-link" href="https://hexo.io">Hexo</a>
                    
                      <a class="main-nav-link switch-friends-link" href="https://pages.github.com/">GitHub</a>
                    
                      <a class="main-nav-link switch-friends-link" href="http://moxfive.xyz/">MOxFIVE</a>
                    
                    </div>
                </section>
                

                
                
                <section class="switch-part switch-part4">
                
                    <div id="js-aboutme">iOS开发工程师</div>
                </section>
                
            </div>
        </div>
    </header>                
</div>
    </div>
    <div class="mid-col">
      <nav id="mobile-nav">
      <div class="overlay">
          <div class="slider-trigger"></div>
          <h1 class="header-author js-mobile-header hide"><a href="/" title="回到主页">RuningTitan</a></h1>
      </div>
    <div class="intrude-less">
        <header id="header" class="inner">
            <a href="/" class="profilepic">
                <img src="/img/titanjun.png" class="animated zoomIn">
            </a>
            <hgroup>
              <h1 class="header-author"><a href="/" title="回到主页">RuningTitan</a></h1>
            </hgroup>
            
            <nav class="header-menu">
                <ul>
                
                    <li><a href="/">主页</a></li>
                
                    <li><a href="/archives/">文章列表</a></li>
                
                    <li><a href="/tags/">标签云</a></li>
                
                    <li><a href="/about/">关于我</a></li>
                
                <div class="clearfix"></div>
                </ul>
            </nav>
            <nav class="header-nav">
                        <ul class="social">
                            
                                <a class="fa 简书" target="_blank" href="https://www.jianshu.com/u/5bd5e9ed569e" title="简书"></a>
                            
                                <a class="fa CSDN" target="_blank" href="http://blog.csdn.net/ShmilyCoder" title="CSDN"></a>
                            
                                <a class="fa GitHub" target="_blank" href="https://github.com/CoderTitan" title="GitHub"></a>
                            
                                <a class="fa 新浪微博" target="_blank" href="https://weibo.com/p/1005056052774133/home?from=page_100505&mod=TAB&is_all=1#place" title="新浪微博"></a>
                            
                                <a class="fa Email" target="_blank" href="mailto:quanjunt@163.com" title="Email"></a>
                            
                                <a class="fa QQ" target="_blank" href="/741700649" title="QQ"></a>
                            
                                <a class="fa 微信" target="_blank" href="/dan741700649" title="微信"></a>
                            
                        </ul>
            </nav>
        </header>                
    </div>
    <link class="menu-list" tags="标签" friends="友情链接" about="关于我"/>
</nav>
      <div class="body-wrap"><article id="post-Swift之Vision 图像识别框架" class="article article-type-post" itemscope itemprop="blogPost">
  
    <div class="article-meta">
      <a href="/2017/11/29/Swift之Vision 图像识别框架" class="article-date">
      <time datetime="2017-11-29T06:58:00.000Z" itemprop="datePublished">2017-11-29</time>
</a>


    </div>
  
  <div class="article-inner">
    
      <input type="hidden" class="isFancy" />
    
    
      <header class="article-header">
        
  
    <h1 class="article-title" itemprop="name">
      Swift之Vision 图像识别框架
    </h1>
  

      </header>
      
      <div class="article-info article-info-post">
        
    <div class="article-category tagcloud">
    <a class="article-category-link" href="/categories/Swift黑科技/">Swift黑科技</a>
    </div>


        
    <div class="article-tag tagcloud">
        <ul class="article-tag-list"><li class="article-tag-list-item"><a class="article-tag-list-link" href="/tags/Swift/">Swift</a></li><li class="article-tag-list-item"><a class="article-tag-list-link" href="/tags/Vision/">Vision</a></li></ul>
    </div>

        <div class="clearfix"></div>
      </div>
      
    
    <div class="article-entry" itemprop="articleBody">
      
          
        <ul>
<li>2017年苹果大大又推出了新机型iPhone 8和iPhone 8Plus, 这还不是重点, 重点是那一款价值9000RMB的iPhone X, 虽说网上吐槽声从未停止过, 但是我觉得还是不错的哈!</li>
<li>软件方面, 苹果大大也推出了iOS 11, 经本人iPhone 7手机亲测, 耗电快外加通知栏改不完的bug</li>
<li>当然了随着iOS 11的推出, 也随之推出了一些新的API，如：<a href="https://developer.apple.com/documentation/arkit" target="_blank" rel="noopener"><code>ARKit</code></a> 、<a href="https://developer.apple.com/documentation/coreml" target="_blank" rel="noopener"><code>Core ML</code></a>、<a href="https://developer.apple.com/documentation/fileprovider" target="_blank" rel="noopener"><code>FileProvider</code></a>、<a href="https://developer.apple.com/documentation/identitylookup" target="_blank" rel="noopener"><code>IdentityLookup</code></a> 、<a href="https://developer.apple.com/documentation/corenfc" target="_blank" rel="noopener"><code>Core NFC</code></a>、<a href="https://developer.apple.com/documentation/vision" target="_blank" rel="noopener"><code>Vison</code></a> 等。</li>
<li>这里我们还要说的就是Apple 在 WWDC 2017 推出的图像识别框架–<code>Vison</code><a href="https://developer.apple.com/documentation/vision" target="_blank" rel="noopener">官方文档</a></li>
<li><a href="https://github.com/coderQuanjun/JunVisionFace" target="_blank" rel="noopener">Demo地址</a></li>
</ul>
<a id="more"></a>
<h2 id="一-Vision应用场景"><a href="#一-Vision应用场景" class="headerlink" title="一. Vision应用场景"></a>一. Vision应用场景</h2><ul>
<li><code>Face Detection and Recognition</code> : 人脸检测<ul>
<li>支持检测笑脸、侧脸、局部遮挡脸部、戴眼镜和帽子等场景，可以标记出人脸的矩形区域</li>
<li>可以标记出人脸和眼睛、眉毛、鼻子、嘴、牙齿的轮廓，以及人脸的中轴线</li>
</ul>
</li>
<li><code>Image Alignment Analysis</code>: 图像对比分析</li>
<li><code>Barcode Detection</code>: 二维码/条形码检测<ul>
<li>用于查找和识别图像中的条码</li>
<li>检测条形码信息</li>
</ul>
</li>
<li><code>Text Detection</code>: 文字检测<ul>
<li>查找图像中可见文本的区域</li>
<li>检测文本区域的信息</li>
</ul>
</li>
<li><code>Object Detection and Tracking</code>: 目标跟踪<ul>
<li>脸部，矩形和通用模板</li>
</ul>
</li>
</ul>
<h2 id="二-Vision支持的图片类型"><a href="#二-Vision支持的图片类型" class="headerlink" title="二. Vision支持的图片类型"></a>二. Vision支持的图片类型</h2><h3 id="1-Objective-C中"><a href="#1-Objective-C中" class="headerlink" title="1. Objective-C中"></a>1. Objective-C中</h3><ul>
<li><code>CVPixelBufferRef</code></li>
<li><code>CGImageRef</code></li>
<li><code>CIImage</code></li>
<li><code>NSURL</code></li>
<li><code>NSData</code></li>
</ul>
<h3 id="2-Swift中"><a href="#2-Swift中" class="headerlink" title="2. Swift中"></a>2. Swift中</h3><ul>
<li><code>CVPixelBuffer</code></li>
<li><code>CGImage</code></li>
<li><code>CIImage</code></li>
<li><code>URL</code></li>
<li><code>Data</code></li>
</ul>
<blockquote>
<p>具体详情可在<code>Vision.framework</code>的<code>VNImageRequestHandler.h</code>文件中查看</p>
</blockquote>
<h2 id="三-Vision之API介绍"><a href="#三-Vision之API介绍" class="headerlink" title="三. Vision之API介绍"></a>三. Vision之API介绍</h2><ul>
<li>使用在<code>vision</code>的时候，我们首先需要明确自己需要什么效果，然后根据想要的效果来选择不同的类</li>
<li>给各种功能的 <code>Request</code> 提供给一个 <code>RequestHandler</code></li>
<li><code>Handler</code> 持有需要识别的图片信息，并将处理结果分发给每个 <code>Request</code> 的 <code>completion Block</code> 中</li>
<li>可以从 <code>results</code> 属性中得到 <code>Observation</code> 数组</li>
<li><code>observations</code>数组中的内容根据不同的request请求返回了不同的<code>observation</code></li>
<li>每种<code>Observation</code>有<code>boundingBox</code>，<code>landmarks</code>等属性，存储的是识别后物体的坐标，点位等</li>
<li>我们拿到坐标后，就可以进行一些UI绘制。</li>
</ul>
<h3 id="1-RequestHandler处理请求对象"><a href="#1-RequestHandler处理请求对象" class="headerlink" title="1. RequestHandler处理请求对象"></a>1. <code>RequestHandler</code>处理请求对象</h3><ul>
<li><code>VNImageRequestHandler</code>: 处理与单个图像有关的一个或多个图像分析请求的对象<ul>
<li>一般情况下都是用该类处理识别请求</li>
<li>初始化方法支持<code>CVPixelBuffer</code>, <code>CGImage</code>, <code>CIImage</code>, <code>URL</code>, <code>Data</code></li>
</ul>
</li>
<li><code>VNSequenceRequestHandler</code>: 处理与多个图像序列有关的图像分析请求的对象<ul>
<li>目前我在处理物体跟踪的时候使用该类</li>
<li>初始化方法同上</li>
</ul>
</li>
</ul>
<h3 id="2-VNRequest介绍"><a href="#2-VNRequest介绍" class="headerlink" title="2. VNRequest介绍"></a>2. VNRequest介绍</h3><ul>
<li><code>VNRequest</code>: 图像分析请求的抽象类, 继承于<code>NSObject</code></li>
<li><code>VNBaseImageRequest</code>: 专注于图像的特定部分的分析请求</li>
<li>具体分析请求类如下: </li>
<li><img src="http://upload-images.jianshu.io/upload_images/4122543-b58783bec9d07551.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="VNImageBasedRequest.png"></li>
</ul>
<h3 id="3-VNObservation检测对象"><a href="#3-VNObservation检测对象" class="headerlink" title="3. VNObservation检测对象"></a>3. <code>VNObservation</code>检测对象</h3><ul>
<li><code>VNObservation</code>: 图像分析结果的抽象类, 继承与<code>NSObject</code></li>
<li>图像检测结果的相关处理类如下:</li>
<li><img src="http://upload-images.jianshu.io/upload_images/4122543-c0b83aa723e149ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="VNObservation.png"></li>
</ul>
<h2 id="四-实战演练"><a href="#四-实战演练" class="headerlink" title="四. 实战演练"></a>四. 实战演练</h2><h3 id="1-文本检测"><a href="#1-文本检测" class="headerlink" title="1. 文本检测"></a>1. 文本检测</h3><ul>
<li>方式一: 识别出具体的每一个字体的位置信息</li>
<li>方式二: 识别一行字体的位置信息</li>
<li>如图效果:</li>
<li><img src="http://upload-images.jianshu.io/upload_images/4122543-0c09426c80013322.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/200" alt="WechatIMG3.jpeg"> </li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4122543-8b970c464c26ffb0.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/200" alt="WechatIMG5.jpeg"></p>
<h4 id="1-1-现将图片转成初始化VNImageRequestHandler对象时-可接受的的CIImage"><a href="#1-1-现将图片转成初始化VNImageRequestHandler对象时-可接受的的CIImage" class="headerlink" title="1.1 现将图片转成初始化VNImageRequestHandler对象时, 可接受的的CIImage"></a>1.1 现将图片转成初始化<code>VNImageRequestHandler</code>对象时, 可接受的的<code>CIImage</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//1. 转成ciimage</span><br><span class="line">guard let ciImage = CIImage(image: image) else &#123; return &#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-2-创建处理请求的handle"><a href="#1-2-创建处理请求的handle" class="headerlink" title="1.2 创建处理请求的handle"></a>1.2 创建处理请求的handle</h4><ul>
<li>参数一: 图片类型</li>
<li>参数二: 字典类型, 有默认值为[:]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let requestHandle = VNImageRequestHandler(ciImage: ciImage, options: [:])</span><br></pre></td></tr></table></figure>
<h4 id="1-3-创建回调闭包"><a href="#1-3-创建回调闭包" class="headerlink" title="1.3 创建回调闭包"></a>1.3 创建回调闭包</h4><ul>
<li>两个参数, 无返回值</li>
<li><code>VNRequest</code>: 是所有请求Request的父类</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public typealias VNRequestCompletionHandler = (VNRequest, Error?) -&gt; Swift.Void</span><br></pre></td></tr></table></figure>
<ul>
<li>具体代码如下: </li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4. 设置回调</span></span><br><span class="line">let completionHandle: VNRequestCompletionHandler = &#123; request, error <span class="keyword">in</span></span><br><span class="line">    let observations = request.results</span><br><span class="line">    <span class="comment">//识别出来的对象数组    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-4-创建识别请求"><a href="#1-4-创建识别请求" class="headerlink" title="1.4 创建识别请求"></a>1.4 创建识别请求</h4><ul>
<li>两种初始化方式</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无参数</span></span><br><span class="line">public convenience init()</span><br><span class="line">    </span><br><span class="line"><span class="comment">//闭包参数</span></span><br><span class="line">public init(completionHandler: Vision.VNRequestCompletionHandler? = <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>这里使用带闭包的初始化方式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let baseRequest = VNDetectTextRectanglesRequest(completionHandler: completionHandle)</span><br></pre></td></tr></table></figure>
<ul>
<li>属性设置(是否识别具体的每一个文字)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 设置识别具体文字</span><br><span class="line">baseRequest.setValue(true, forKey: &quot;reportCharacterBoxes&quot;)</span><br></pre></td></tr></table></figure>
<ul>
<li>不设置该属性, 识别出来的是一行文字</li>
</ul>
<h4 id="1-5-发送请求"><a href="#1-5-发送请求" class="headerlink" title="1.5 发送请求"></a>1.5 发送请求</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open func perform(_ requests: [VNRequest]) throws</span><br></pre></td></tr></table></figure>
<ul>
<li>该方法会抛出一个异常错误</li>
<li>在连续不断(摄像头扫描)发送请求过程中, 必须在子线程执行该方法, 否则会造成线程堵塞</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//6. 发送请求</span></span><br><span class="line">DispatchQueue.global().async &#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        try requestHandle.perform([baseRequest])</span><br><span class="line">    &#125;catch&#123;</span><br><span class="line">        print(<span class="string">"Throws：\(error)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-6-处理识别的Observations对象"><a href="#1-6-处理识别的Observations对象" class="headerlink" title="1.6 处理识别的Observations对象"></a>1.6 处理识别的<code>Observations</code>对象</h4><ul>
<li>识别出来的<code>results</code>是<code>[Any]?</code>类型</li>
<li>根据<code>boundingBox</code>属性可以获取到对应的文本区域的尺寸</li>
<li>需要注意的是:<ul>
<li><code>boundingBox</code>得到的是相对iamge的比例尺寸, 都是小于1的</li>
<li>Y轴坐标于UIView坐标系是相反的</li>
</ul>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取识别到的VNTextObservation</span></span><br><span class="line">guard let boxArr = observations as? [VNTextObservation] <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//2. 创建rect数组</span></span><br><span class="line">var bigRects = [<span class="built_in">CGRect</span>](), smallRects = [<span class="built_in">CGRect</span>]()</span><br><span class="line">        </span><br><span class="line"><span class="comment">//3. 遍历识别结果</span></span><br><span class="line"><span class="keyword">for</span> boxObj <span class="keyword">in</span> boxArr &#123;</span><br><span class="line">    <span class="comment">// 3.1尺寸转换</span></span><br><span class="line">    <span class="comment">//获取一行文本的区域位置</span></span><br><span class="line">    bigRects.append(convertRect(boxObj.boundingBox, image))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2. 获取</span></span><br><span class="line">    guard let rectangleArr = boxObj.characterBoxes <span class="keyword">else</span> &#123; <span class="keyword">continue</span> &#125;</span><br><span class="line">    <span class="keyword">for</span> rectangle <span class="keyword">in</span> rectangleArr&#123;</span><br><span class="line">        <span class="comment">//3. 得到每一个字体的的尺寸</span></span><br><span class="line">        let boundBox = rectangle.boundingBox</span><br><span class="line">        smallRects.append(convertRect(boundBox, image))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>坐标转换</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// image坐标转换</span></span><br><span class="line">fileprivate func convertRect(_ rectangleRect: <span class="built_in">CGRect</span>, _ image: <span class="built_in">UIImage</span>) -&gt; <span class="built_in">CGRect</span> &#123;</span><br><span class="line"><span class="comment">//此处是将Image的实际尺寸转化成imageView的尺寸</span></span><br><span class="line">    let imageSize = image.scaleImage()</span><br><span class="line">    let w = rectangleRect.width * imageSize.width</span><br><span class="line">    let h = rectangleRect.height * imageSize.height</span><br><span class="line">    let x = rectangleRect.minX * imageSize.width</span><br><span class="line">    <span class="comment">//该Y坐标与UIView的Y坐标是相反的</span></span><br><span class="line">    let y = (<span class="number">1</span> - rectangleRect.minY) * imageSize.height - h</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">CGRect</span>(x: x, y: y, width: w, height: h)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-矩形识别和静态人脸识别"><a href="#2-矩形识别和静态人脸识别" class="headerlink" title="2. 矩形识别和静态人脸识别"></a>2. 矩形识别和静态人脸识别</h3><ul>
<li>识别图像中的矩形</li>
<li><p><img src="http://upload-images.jianshu.io/upload_images/4122543-05e6a9cc6c193b1d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/400" alt="1511935758595.jpg"></p>
</li>
<li><p>静态人脸识别</p>
</li>
<li><p><img src="http://upload-images.jianshu.io/upload_images/4122543-e5faf93cebae945e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/400" alt="1511936019734.jpg"></p>
</li>
<li><p>主要核心代码</p>
</li>
<li></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//1. 转成ciimage</span><br><span class="line">guard let ciImage = CIImage(image: image) else &#123; return &#125;</span><br><span class="line">        </span><br><span class="line">//2. 创建处理request</span><br><span class="line">let requestHandle = VNImageRequestHandler(ciImage: ciImage, options: [:])</span><br><span class="line">        </span><br><span class="line">//3. 创建baseRequest</span><br><span class="line">//大多数识别请求request都继承自VNImageBasedRequest</span><br><span class="line">var baseRequest = VNImageBasedRequest()</span><br><span class="line">        </span><br><span class="line">//4. 设置回调</span><br><span class="line">let completionHandle: VNRequestCompletionHandler = &#123; request, error in</span><br><span class="line">    let observations = request.results</span><br><span class="line">    self.handleImageObservable(type: type, image: image, observations, completeBack)</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">//5. 创建识别请求</span><br><span class="line">switch type &#123;</span><br><span class="line">case .rectangle:</span><br><span class="line">    baseRequest = VNDetectRectanglesRequest(completionHandler: completionHandle)</span><br><span class="line">case .staticFace:</span><br><span class="line">    baseRequest = VNDetectFaceRectanglesRequest(completionHandler: completionHandle)</span><br><span class="line">default:</span><br><span class="line">    break</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>处理识别的observation</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 矩形检测</span></span><br><span class="line">fileprivate func rectangleDectect(_ observations: [Any]?, image: <span class="built_in">UIImage</span>, _ complecHandle: JunDetectHandle)&#123;</span><br><span class="line">    <span class="comment">//1. 获取识别到的VNRectangleObservation</span></span><br><span class="line">    guard let boxArr = observations as? [VNRectangleObservation] <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="comment">//2. 创建rect数组</span></span><br><span class="line">    var bigRects = [<span class="built_in">CGRect</span>]()</span><br><span class="line">    <span class="comment">//3. 遍历识别结果</span></span><br><span class="line">    <span class="keyword">for</span> boxObj <span class="keyword">in</span> boxArr &#123;</span><br><span class="line">        <span class="comment">// 3.1</span></span><br><span class="line">        bigRects.append(convertRect(boxObj.boundingBox, image))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4. 回调结果</span></span><br><span class="line">    complecHandle(bigRects, [])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>静态人脸识别需要将<code>observation</code>转成<code>VNFaceObservation</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">guard let boxArr = observations as? [VNFaceObservation] else &#123; return &#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-条码识别"><a href="#3-条码识别" class="headerlink" title="3. 条码识别"></a>3. 条码识别</h3><p><img src="http://upload-images.jianshu.io/upload_images/4122543-9f199a027f186a5c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/400" alt="1511936988374.jpg"></p>
<ul>
<li>这里请求的步骤与矩形识别相同, 这里不再赘述</li>
<li>需要注意的是,在初始化request的时候需要设一个置可识别的条码类型参数</li>
<li>这里先看一下<code>VNDetectBarcodesRequest</code>的两个参数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//支持的可识别的条码类型(需要直接用class调用)</span><br><span class="line">open class var supportedSymbologies: [VNBarcodeSymbology] &#123; get &#125;</span><br><span class="line"></span><br><span class="line">//设置可识别的条码类型</span><br><span class="line">open var symbologies: [VNBarcodeSymbology]</span><br></pre></td></tr></table></figure>
<ul>
<li>此处设置可识别到的条码类型为, 该请求支持是别的所有类型, 如下</li>
<li>注意<code>supportedSymbologies</code>参数的调用方法</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let request = VNDetectBarcodesRequest(completionHandler: completionHandle)</span><br><span class="line">request.symbologies = VNDetectBarcodesRequest.supportedSymbologies</span><br></pre></td></tr></table></figure>
<ul>
<li>条码识别不但能识别条码的位置信息, 还可以识别出条码的相关信息, 这里以二维码为例</li>
<li>这里需要将识别的<code>observations</code>转成<code>[VNBarcodeObservation]</code></li>
<li><code>VNBarcodeObservation</code>有三个属性</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//条码类型: qr, code128....等等</span></span><br><span class="line">open var symbology: VNBarcodeSymbology &#123; get &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//条码的相关信息</span></span><br><span class="line">open var barcodeDescriptor: <span class="built_in">CIBarcodeDescriptor</span>? &#123; get &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果是二维码, 则是二维码的网址链接    </span></span><br><span class="line">open var payloadStringValue: String? &#123; get &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>如上述图片识别出来的<code>payloadStringValue</code>参数则是小编的<a href="http://www.jianshu.com/u/5bd5e9ed569e" target="_blank" rel="noopener">简书地址</a></li>
<li>下面是以上述图片的二维码为例处理的<code>CIBarcodeDescriptor</code>对象</li>
<li>有兴趣的可以仔细研究研究</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 二维码信息处理</span></span><br><span class="line">fileprivate func qrCodeHandle(barCode: <span class="built_in">CIBarcodeDescriptor</span>?)&#123;</span><br><span class="line">    <span class="comment">//1. 转成对应的条码对象</span></span><br><span class="line">    guard let code = barCode as? <span class="built_in">CIQRCodeDescriptor</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2. 解读条码信息</span></span><br><span class="line">    let level = code.errorCorrectionLevel.hashValue</span><br><span class="line">    let version = code.symbolVersion</span><br><span class="line">    let mask = code.maskPattern</span><br><span class="line">    let data = code.errorCorrectedPayload</span><br><span class="line">    let dataStr = String(data: data, encoding: .utf8)</span><br><span class="line">    print(<span class="string">"这是二维码信息--"</span>, level, <span class="string">"---"</span>, version, <span class="string">"----"</span>, mask, <span class="string">"---"</span>, dataStr ?? <span class="string">""</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-人脸特征识别"><a href="#4-人脸特征识别" class="headerlink" title="4. 人脸特征识别"></a>4. 人脸特征识别</h3><ul>
<li>可识别出人脸的轮廓, 眼睛, 鼻子, 嘴巴等具体位置</li>
<li><img src="http://upload-images.jianshu.io/upload_images/4122543-895670df5fd8e2c9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/400" alt="1511944652200.jpg"></li>
</ul>
<ul>
<li><code>VNFaceLandmarks2D</code>介绍</li>
<li></li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 脸部轮廓</span></span><br><span class="line">var faceContour: VNFaceLandmarkRegion2D?</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 左眼, 右眼</span></span><br><span class="line">var leftEye: VNFaceLandmarkRegion2D?</span><br><span class="line">var rightEye: VNFaceLandmarkRegion2D?</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 左睫毛, 右睫毛</span></span><br><span class="line">var leftEyebrow: VNFaceLandmarkRegion2D?</span><br><span class="line">var rightEyebrow: VNFaceLandmarkRegion2D?</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 左眼瞳, 右眼瞳</span></span><br><span class="line">var leftPupil: VNFaceLandmarkRegion2D?</span><br><span class="line">var rightPupil: VNFaceLandmarkRegion2D?</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 鼻子, 鼻嵴, 正中线</span></span><br><span class="line">var nose: VNFaceLandmarkRegion2D?</span><br><span class="line">var noseCrest: VNFaceLandmarkRegion2D?</span><br><span class="line">var medianLine: VNFaceLandmarkRegion2D?</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 外唇, 内唇</span></span><br><span class="line">var outerLips: VNFaceLandmarkRegion2D?</span><br><span class="line">var innerLips: VNFaceLandmarkRegion2D?</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//某一部位所有的像素点</span><br><span class="line">@nonobjc public var normalizedPoints: [CGPoint] &#123; get &#125;</span><br><span class="line"></span><br><span class="line">//某一部位的所有像素点的个数</span><br><span class="line">open var pointCount: Int &#123; get &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>将所有的像素点坐标转换成image对应的尺寸坐标</li>
<li>使用图像上下文, 对应部位画线</li>
<li>在UIView中重写<code>func draw(_ rect: CGRect)</code>方法</li>
<li></li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//5.1 获取当前上下文</span></span><br><span class="line">let content = <span class="built_in">UIGraphicsGetCurrentContext</span>()</span><br><span class="line">                </span><br><span class="line"><span class="comment">//5.2 设置填充颜色(setStroke设置描边颜色)</span></span><br><span class="line"><span class="built_in">UIColor</span>.green.set()</span><br><span class="line">                </span><br><span class="line"><span class="comment">//5.3 设置宽度</span></span><br><span class="line">content?.setLineWidth(<span class="number">2</span>)</span><br><span class="line">                </span><br><span class="line"><span class="comment">//5.4. 设置线的类型(连接处)</span></span><br><span class="line">content?.setLineJoin(.round)</span><br><span class="line">content?.setLineCap(.round)</span><br><span class="line">                </span><br><span class="line"><span class="comment">//5.5. 设置抗锯齿效果</span></span><br><span class="line">content?.setShouldAntialias(<span class="literal">true</span>)</span><br><span class="line">content?.setAllowsAntialiasing(<span class="literal">true</span>)</span><br><span class="line">                </span><br><span class="line"><span class="comment">//5.6 开始绘制</span></span><br><span class="line">content?.addLines(between: pointArr)</span><br><span class="line">content?.drawPath(using: .stroke)</span><br><span class="line">                </span><br><span class="line"><span class="comment">//5.7 结束绘制</span></span><br><span class="line">content?.strokePath()</span><br></pre></td></tr></table></figure>
<h3 id="5-动态人脸识别和实时动态添加"><a href="#5-动态人脸识别和实时动态添加" class="headerlink" title="5. 动态人脸识别和实时动态添加"></a>5. 动态人脸识别和实时动态添加</h3><blockquote>
<p>由于真机不好录制gif图(尝试了一下, 效果不是很好, 放弃了), 想看效果的朋友<a href="https://github.com/coderQuanjun/JunVisionFace" target="_blank" rel="noopener">下载源码</a>真机运行吧</p>
<ul>
<li>这里提供一张<a href="http://upload-images.jianshu.io/upload_images/4122543-e390e4107c0b811b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" target="_blank" rel="noopener">可供扫描的图片</a></li>
</ul>
</blockquote>
<ul>
<li><code>request</code>的初始化这里就不做介绍了, 说一下<code>handle</code>的初始化方法<ul>
<li><code>CVPixelBuffer</code>: 扫描实时输出的对象</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//1. 创建处理请求</span><br><span class="line">let faceHandle = VNImageRequestHandler(cvPixelBuffer: pixelBuffer, options: [:])</span><br></pre></td></tr></table></figure>
<ul>
<li>主要强调一点, 相机扫描, 获取实时图像的过程, 必须在子线程执行, 否在会堵塞线程, 整个app失去响应, 亲自踩过的坑</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DispatchQueue.global().async &#123;</span><br><span class="line">    do&#123;</span><br><span class="line">        try faceHandle.perform([baseRequest])</span><br><span class="line">    &#125;catch&#123;</span><br><span class="line">        print(&quot;Throws：\(error)&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="扫描结果处理"><a href="#扫描结果处理" class="headerlink" title="扫描结果处理"></a>扫描结果处理</h4><ul>
<li>动态人脸识别和静态人脸识别不同的地方就是, 动态实时刷新, 更新UI, 所以处理结果的方法相同</li>
<li>动态添加: 这里处理方式是添加一个眼镜效果</li>
<li>这里需要获取到两只眼睛的位置和宽度<ul>
<li>先获取到左右眼的所有的像素点和像素点的个数</li>
<li>遍历所有的像素点, 转换成合适的坐标</li>
<li>将左右眼的所有的point, 分别获取X和Y坐标放到不同的数组</li>
<li>将数组有小到大排序, 得到X的最大和最小的差值, Y的最大和最小的差值</li>
<li>具体代码如下</li>
</ul>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// H偶去转换后的尺寸坐标</span></span><br><span class="line">fileprivate func getEyePoint(faceModel: FaceFeatureModel, position: <span class="built_in">AVCaptureDevice</span>.Position) -&gt; <span class="built_in">CGRect</span>&#123;</span><br><span class="line">    <span class="comment">//1. 获取左右眼</span></span><br><span class="line">    guard let leftEye = faceModel.leftEye <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="built_in">CGRect</span>.zero &#125;</span><br><span class="line">    guard let rightEye = faceModel.rightEye <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="built_in">CGRect</span>.zero &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 位置数组</span></span><br><span class="line">    let leftPoint = conventPoint(landmark: leftEye, faceRect: faceModel.faceObservation.boundingBox, position: position)</span><br><span class="line">    let rightPoint = conventPoint(landmark: rightEye, faceRect: faceModel.faceObservation.boundingBox, position: position)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 排序</span></span><br><span class="line">    let pointXs = (leftPoint<span class="number">.0</span> + rightPoint<span class="number">.0</span>).sorted()</span><br><span class="line">    let pointYs = (leftPoint<span class="number">.1</span> + rightPoint<span class="number">.1</span>).sorted()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//4. 添加眼睛</span></span><br><span class="line">    let image = <span class="built_in">UIImage</span>(named: <span class="string">"eyes"</span>)!</span><br><span class="line">    let imageWidth = (pointXs.last ?? <span class="number">0.0</span>) - (pointXs.first ?? <span class="number">0</span>) + <span class="number">40</span></span><br><span class="line">    let imageHeight = image.size.height / image.size.width * imageWidth</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">CGRect</span>(x: (pointXs.first ?? <span class="number">0</span>) - <span class="number">20</span>, y: (pointYs.first ?? <span class="number">0</span>) - <span class="number">5</span>, width: imageWidth, height: imageHeight)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>每一只眼睛的坐标处理</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 坐标转换</span></span><br><span class="line">fileprivate func conventPoint(landmark: VNFaceLandmarkRegion2D, faceRect: <span class="built_in">CGRect</span>, position: <span class="built_in">AVCaptureDevice</span>.Position) -&gt; ([<span class="built_in">CGFloat</span>], [<span class="built_in">CGFloat</span>])&#123;</span><br><span class="line">    <span class="comment">//1. 定义</span></span><br><span class="line">    var XArray = [<span class="built_in">CGFloat</span>](), YArray = [<span class="built_in">CGFloat</span>]()</span><br><span class="line">    let viewRect = previewLayer.frame</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2. 遍历</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0.</span>.&lt;landmark.pointCount &#123;</span><br><span class="line">        <span class="comment">//2.1 获取当前位置并转化到合适尺寸</span></span><br><span class="line">        let point = landmark.normalizedPoints[i]</span><br><span class="line">        let rectWidth = viewRect.width * faceRect.width</span><br><span class="line">        let rectHeight = viewRect.height * faceRect.height</span><br><span class="line">        let rectY = viewRect.height - (point.y * rectHeight + faceRect.minY * viewRect.height)</span><br><span class="line">        var rectX = point.x * rectWidth + faceRect.minX * viewRect.width</span><br><span class="line">        <span class="keyword">if</span> position == .front&#123;</span><br><span class="line">            rectX = viewRect.width + (point.x - <span class="number">1</span>) * rectWidth</span><br><span class="line">        &#125;</span><br><span class="line">        XArray.append(rectX)</span><br><span class="line">        YArray.append(rectY)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (XArray, YArray)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>最后获取到该<code>CGRect</code>, 添加眼镜效果即可</li>
</ul>
<h3 id="6-物体跟踪"><a href="#6-物体跟踪" class="headerlink" title="6. 物体跟踪"></a>6. 物体跟踪</h3><ul>
<li>简介<ul>
<li>我们在屏幕上点击某物体, 然后Vision就会根据点击的物体, 实时跟踪该物体</li>
<li>当你移动手机或者物体时, 识别的对象和红框的位置是统一的</li>
</ul>
</li>
<li>这里我们出的的对象是<code>VNDetectedObjectObservation</code></li>
<li>定义一个观察属性</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fileprivate var lastObservation: VNDetectedObjectObservation?</span><br></pre></td></tr></table></figure>
<ul>
<li>创建一个处理多个图像序列的请求</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//处理与多个图像序列的请求handle</span><br><span class="line">let sequenceHandle = VNSequenceRequestHandler()</span><br></pre></td></tr></table></figure>
<ul>
<li>创建跟踪识别请求</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4. 创建跟踪识别请求</span></span><br><span class="line">let trackRequest = VNTrackObjectRequest(detectedObjectObservation: lastObservation, completionHandler: completionHandle)</span><br><span class="line"><span class="comment">//将精度设置为高</span></span><br><span class="line">trackRequest.trackingLevel = .accurate</span><br></pre></td></tr></table></figure>
<ul>
<li>当用户点击屏幕时，我们想要找出用户点击的位置,</li>
<li>根据点击的位置, 获取到一个新的物体对象</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//2. 转换坐标</span><br><span class="line">let convertRect = visionTool.convertRect(viewRect: redView.frame, layerRect: previewLayer.frame)</span><br><span class="line">        </span><br><span class="line">//3. 根据点击的位置获取新的对象</span><br><span class="line">let newObservation = VNDetectedObjectObservation(boundingBox: convertRect)</span><br><span class="line">lastObservation = newObservation</span><br></pre></td></tr></table></figure>
<ul>
<li>获取到扫描的结果, 如果是一个<code>VNDetectedObjectObservation</code>对象, 重新赋值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//1. 获取一个实际的结果</span><br><span class="line">guard let newObservation = observations?.first as? VNDetectedObjectObservation else &#123; return &#125;</span><br><span class="line">            </span><br><span class="line">//2. 重新赋值</span><br><span class="line">self.lastObservation = newObservation</span><br></pre></td></tr></table></figure>
<ul>
<li>根据获取到的新值, 获取物体的坐标位置</li>
<li>转换坐标, 改变红色框的位置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//4. 坐标转换</span><br><span class="line">let newRect = newObservation.boundingBox</span><br><span class="line">let convertRect = visionTool.convertRect(newRect, self.previewLayer.frame)</span><br><span class="line">self.redView.frame = convertRect</span><br></pre></td></tr></table></figure>
<blockquote>
<p>以上就是iOS 11的新框架Vision在Swift中的所有使用的情况</p>
<ul>
<li>文中所列的内容可能有点空洞, 也稍微有点乱</li>
<li>小编也是刚接触Vision, 文中如有解释不全, 或者错误的地方, 还请不吝赐教</li>
</ul>
</blockquote>
<hr>
<h3 id="GitHub–Demo地址"><a href="#GitHub–Demo地址" class="headerlink" title="GitHub–Demo地址"></a>GitHub–<a href="https://github.com/coderQuanjun/JunVisionFace" target="_blank" rel="noopener">Demo地址</a></h3><ul>
<li>注意:  <ul>
<li>这里只是列出了主要的核心代码,具体的代码逻辑请参考demo</li>
<li>文中相关介绍有的地方如果有不是很详细或者有更好建议的,欢迎联系小编</li>
<li>如果方便的话, 还望star一下</li>
</ul>
</li>
</ul>

      
    </div>
    
  </div>
  
    
    <div class="copyright">
        <p><span>本文标题:</span><a href="/2017/11/29/Swift之Vision 图像识别框架">Swift之Vision 图像识别框架</a></p>
        <p><span>文章作者:</span><a href="/" title="回到主页">RuningTitan</a></p>
        <p><span>发布时间:</span>2017-11-29, 14:58:00</p>
        <p><span>最后更新:</span>2018-03-08, 09:41:02</p>
        <p>
            <span>原始链接:</span><a class="post-url" href="/2017/11/29/Swift之Vision 图像识别框架" title="Swift之Vision 图像识别框架">https://titanjun.top/2017/11/29/Swift之Vision 图像识别框架</a>
            <span class="copy-path" data-clipboard-text="原文: https://titanjun.top/2017/11/29/Swift之Vision 图像识别框架　　作者: RuningTitan" title="点击复制文章链接"><i class="fa fa-clipboard"></i></span>
            <script> var clipboard = new Clipboard('.copy-path'); </script>
        </p>
        <p>
            <span>许可协议:</span><i class="fa fa-creative-commons"></i> <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" title="CC BY-NC-SA 4.0 International" target = "_blank">"署名-非商用-相同方式共享 4.0"</a> 转载请保留原文链接及作者。
        </p>
    </div>



    <nav id="article-nav">
        
            <div id="article-nav-newer" class="article-nav-title">
                <a href="/2017/12/10/Swift语音和文本的转换">
                    Swift语音和文本的转换
                </a>
            </div>
        
        
            <div id="article-nav-older" class="article-nav-title">
                <a href="/2017/11/22/iOS黑科技之(AVFoundation)动态人脸识别(二)">
                    iOS黑科技之(AVFoundation)动态人脸识别(二)
                </a>
            </div>
        
    </nav>

  
</article>

    <div id="toc" class="toc-article">
        <strong class="toc-title">文章目录</strong>
        
            <ol class="toc"><li class="toc-item toc-level-2"><a class="toc-link" href="#一-Vision应用场景"><span class="toc-number">1.</span> <span class="toc-text">一. Vision应用场景</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#二-Vision支持的图片类型"><span class="toc-number">2.</span> <span class="toc-text">二. Vision支持的图片类型</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#1-Objective-C中"><span class="toc-number">2.1.</span> <span class="toc-text">1. Objective-C中</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-Swift中"><span class="toc-number">2.2.</span> <span class="toc-text">2. Swift中</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#三-Vision之API介绍"><span class="toc-number">3.</span> <span class="toc-text">三. Vision之API介绍</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#1-RequestHandler处理请求对象"><span class="toc-number">3.1.</span> <span class="toc-text">1. RequestHandler处理请求对象</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-VNRequest介绍"><span class="toc-number">3.2.</span> <span class="toc-text">2. VNRequest介绍</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#3-VNObservation检测对象"><span class="toc-number">3.3.</span> <span class="toc-text">3. VNObservation检测对象</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#四-实战演练"><span class="toc-number">4.</span> <span class="toc-text">四. 实战演练</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#1-文本检测"><span class="toc-number">4.1.</span> <span class="toc-text">1. 文本检测</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#1-1-现将图片转成初始化VNImageRequestHandler对象时-可接受的的CIImage"><span class="toc-number">4.1.1.</span> <span class="toc-text">1.1 现将图片转成初始化VNImageRequestHandler对象时, 可接受的的CIImage</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#1-2-创建处理请求的handle"><span class="toc-number">4.1.2.</span> <span class="toc-text">1.2 创建处理请求的handle</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#1-3-创建回调闭包"><span class="toc-number">4.1.3.</span> <span class="toc-text">1.3 创建回调闭包</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#1-4-创建识别请求"><span class="toc-number">4.1.4.</span> <span class="toc-text">1.4 创建识别请求</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#1-5-发送请求"><span class="toc-number">4.1.5.</span> <span class="toc-text">1.5 发送请求</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#1-6-处理识别的Observations对象"><span class="toc-number">4.1.6.</span> <span class="toc-text">1.6 处理识别的Observations对象</span></a></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-矩形识别和静态人脸识别"><span class="toc-number">4.2.</span> <span class="toc-text">2. 矩形识别和静态人脸识别</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#3-条码识别"><span class="toc-number">4.3.</span> <span class="toc-text">3. 条码识别</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#4-人脸特征识别"><span class="toc-number">4.4.</span> <span class="toc-text">4. 人脸特征识别</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#5-动态人脸识别和实时动态添加"><span class="toc-number">4.5.</span> <span class="toc-text">5. 动态人脸识别和实时动态添加</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#扫描结果处理"><span class="toc-number">4.5.1.</span> <span class="toc-text">扫描结果处理</span></a></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#6-物体跟踪"><span class="toc-number">4.6.</span> <span class="toc-text">6. 物体跟踪</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#GitHub–Demo地址"><span class="toc-number">4.7.</span> <span class="toc-text">GitHub–Demo地址</span></a></li></ol></li></ol>
        
    </div>
    <style>
        .left-col .switch-btn,
        .left-col .switch-area {
            display: none;
        }
        .toc-level-6 i,
        .toc-level-6 ol {
            display: none !important;
        }
    </style>

    <input type="button" id="tocButton" value="隐藏目录"  title="点击按钮隐藏或者显示文章目录">

    <script>
        yiliaConfig.toc = ["隐藏目录", "显示目录", !!"false"];
    </script>



    
<div class="share">
    

    
        <div class="addthis_sharing_toolbox"></div>
    
</div>







    



  
  <!-- Gitment评论插件通用代码 -->
<div id="git"></div>
<link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css">
<script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script>
<script>
var gitment = new Gitment({
  owner: "CoderTitan",//github用户名
  repo: "CoderTitan.github.io",//用户存储评论的github项目名称
  oauth: {
    client_id: "42cc1c92340bb98775b3",//注册OAuth Application时生产的ClinetID
    client_secret:"4d5bc35eb71c99eb21ad0f13d592943b498bce89",//注册OAuth Application时生成的Client Secret
  },
})
gitment.render('git')
</script>
<!-- Gitment代码结束 -->

  




    <div class="scroll" id="post-nav-button">
        
            <a href="/2017/12/10/Swift语音和文本的转换" title="上一篇: Swift语音和文本的转换">
                <i class="fa fa-angle-left"></i>
            </a>
        

        <a title="文章列表"><i class="fa fa-bars"></i><i class="fa fa-times"></i></a>

        
            <a href="/2017/11/22/iOS黑科技之(AVFoundation)动态人脸识别(二)" title="下一篇: iOS黑科技之(AVFoundation)动态人脸识别(二)">
                <i class="fa fa-angle-right"></i>
            </a>
        
    </div>

    <ul class="post-list"><li class="post-list-item"><a class="post-list-link" href="/2018/01/24/ReactNative之AsyncStorage本地存储">ReactNative之AsyncStorage本地存储</a></li><li class="post-list-item"><a class="post-list-link" href="/2018/01/20/Node.js搭建Web服务器">Node.js搭建Web服务器</a></li><li class="post-list-item"><a class="post-list-link" href="/2018/01/06/ReactNative之TabBariOS和TabNavigator">ReactNative之TabBariOS和TabNavigator</a></li><li class="post-list-item"><a class="post-list-link" href="/2018/01/05/React Native之导航组件NavigatorIOS和Navigator">React Native之导航组件NavigatorIOS和Navigator</a></li><li class="post-list-item"><a class="post-list-link" href="/2018/01/03/ReactNaive之ScrollView和ListView">ReactNaive之ScrollView和ListView</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/12/10/Swift语音和文本的转换">Swift语音和文本的转换</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/11/29/Swift之Vision 图像识别框架">Swift之Vision 图像识别框架</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/11/22/iOS黑科技之(AVFoundation)动态人脸识别(二)">iOS黑科技之(AVFoundation)动态人脸识别(二)</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/11/22/iOS黑科技之(CoreImage)静态人脸识别(一)">iOS黑科技之(CoreImage)静态人脸识别(一)</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/11/16/Swift之二维码的生成、识别和扫描">Swift之二维码的生成、识别和扫描</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/11/11/Swift之删除HTML5页面的广告">Swift之删除HTML5页面的广告</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/10/28/Swift之微信朋友圈图片浏览器">Swift之微信朋友圈图片浏览器</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/10/23/Swift开发之3DTouch实用演练">Swift开发之3DTouch实用演练</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/10/23/ReactNaive之CSS和Flex布局">ReactNaive之CSS和Flex布局</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/10/17/Swift之Facebook的POP动画使用和实战">Swift之Facebook的POP动画使用和实战</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/10/12/iOS出门必备之CoreAnimation(核心动画)">iOS出门必备之CoreAnimation(核心动画)</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/10/08/RxSwift+Moya网络请求之项目实战">RxSwift+Moya网络请求之项目实战</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/09/21/RxSwift的使用详解02">RxSwift的使用详解02</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/09/15/RxSwift的使用详解01">RxSwift的使用详解01</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/09/09/iOS之Scanner字符串扫描类">iOS之Scanner字符串扫描类</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/08/25/升级Swift4.0遇到的坑">升级Swift4.0遇到的坑</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/08/09/JavaScript基本语法01">JavaScript基本语法01</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/07/19/Swift4.0新特性之String、Array和Dictionary">Swift4.0新特性之String、Array和Dictionary</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/07/10/Swift版-H5页面实现长按保存图片">Swift版-H5页面实现长按保存图片</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/06/16/HTML5学习笔记之音视频标签">HTML5学习笔记之音视频标签</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/06/15/HTML5学习笔记之表单标签">HTML5学习笔记之表单标签</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/06/15/HTML5学习笔记之表格标签">HTML5学习笔记之表格标签</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/06/15/HTML5学习笔记之基础标签">HTML5学习笔记之基础标签</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/06/15/HTML5基本介绍">HTML5基本介绍</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/06/15/Swift项目创建桥接文件">Swift项目创建桥接文件</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/06/12/Swift仿网易新闻首页左右滑动切换页面">Swift仿网易新闻首页左右滑动切换页面</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/06/10/iOS9之UIStackView的使用">iOS9之UIStackView的使用</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/05/19/NSMutableAttributedString富文本">NSMutableAttributedString富文本</a></li><li class="post-list-item"><a class="post-list-link" href="/2017/05/19/Swift函数式编程之Map&Reduce&Filter">Swift函数式编程之Map&Reduce&Filter</a></li><li class="post-list-item"><a class="post-list-link" href="/2016/12/30/Swift3.0基本语法03">Swift3.0基本语法03</a></li><li class="post-list-item"><a class="post-list-link" href="/2016/12/28/Swift3.0基本语法02">Swift基本语法02</a></li><li class="post-list-item"><a class="post-list-link" href="/2016/12/25/Swift3.0之基本语法01">Swift3.0之基本语法01</a></li><li class="post-list-item"><a class="post-list-link" href="/2016/11/25/iOS之NSDate的Category">iOS之NSDate的Category</a></li><li class="post-list-item"><a class="post-list-link" href="/2016/11/22/iOS之UIMenuController的简单使用">iOS之UIMenuController的简单使用</a></li><li class="post-list-item"><a class="post-list-link" href="/2016/11/20/iOS之UITableView设置全屏分隔线">iOS之UITableView设置全屏分隔线</a></li><li class="post-list-item"><a class="post-list-link" href="/2016/11/15/iOS之UICollectionView自定义布局">iOS之UICollectionView自定义布局</a></li><li class="post-list-item"><a class="post-list-link" href="/2016/10/10/Mac破解版软件大全">Mac破解版软件大全</a></li></ul>




    <script>
        
    </script>
</div>
      <footer id="footer">
    <div class="outer">
        <div id="footer-info">
            <div class="footer-left">
                <i class="fa fa-copyright"></i> 
                2016-2018 RuningTitan
            </div>
            <div class="footer-right">
                <a href="http://hexo.io/" target="_blank" title="快速、简洁且高效的博客框架">Hexo</a>  Theme <a href="https://github.com/MOxFIVE/hexo-theme-yelee" target="_blank" title="简而不减 Hexo 双栏博客主题  v3.5">Yelee</a> by MOxFIVE <i class="fa fa-heart animated infinite pulse"></i>
            </div>
        </div>
        
            <div class="visit">
                
                    <span id="busuanzi_container_site_pv" style='display:none'>
                        <span id="site-visit" title="本站到访数"><i class="fa fa-user" aria-hidden="true"></i><span id="busuanzi_value_site_uv"></span>
                        </span>
                    </span>
                
                
                    <span>| </span>
                
                
                    <span id="busuanzi_container_page_pv" style='display:none'>
                        <span id="page-visit"  title="本页阅读量"><i class="fa fa-eye animated infinite pulse" aria-hidden="true"></i><span id="busuanzi_value_page_pv"></span>
                        </span>
                    </span>
                
            </div>
        
    </div>
</footer>
    </div>
    
<script data-main="/js/main.js" src="//cdn.bootcss.com/require.js/2.2.0/require.min.js"></script>





    <script type="text/x-mathjax-config">
MathJax.Hub.Config({
    tex2jax: {
        inlineMath: [ ['$','$'], ["\\(","\\)"]  ],
        processEscapes: true,
        skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
    }
});

MathJax.Hub.Queue(function() {
    var all = MathJax.Hub.getAllJax(), i;
    for(i=0; i < all.length; i += 1) {
        all[i].SourceElement().parentNode.className += ' has-jax';                 
    }       
});
</script>

<script src="//cdn.bootcss.com/mathjax/2.6.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>


<div class="scroll" id="scroll">
    <a href="#" title="返回顶部"><i class="fa fa-arrow-up"></i></a>
    <a href="#comments" onclick="load$hide();" title="查看评论"><i class="fa fa-comments-o"></i></a>
    <a href="#footer" title="转到底部"><i class="fa fa-arrow-down"></i></a>
</div>
<script>
    // Open in New Window
    
        var oOpenInNew = {
            
            
            
            
            
            
             archives: ".archive-article-title", 
             miniArchives: "a.post-list-link", 
            
             friends: "#js-friends a", 
             socail: ".social a" 
        }
        for (var x in oOpenInNew) {
            $(oOpenInNew[x]).attr("target", "_blank");
        }
    
</script>

<script async src="https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js">
</script>
  </div>
</body>
</html>